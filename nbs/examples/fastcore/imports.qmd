---
title: "imports"
description: "module fastcore.imports in fastcore"
---

## Functions

    
### `all_equal`
    


```{=html}
<blockquote><strong><code>all_equal(a, b)</code></strong></blockquote>
```


    
        Compares whether `a` and `b` are the same length and have the same contents
    
### `any_is_instance`
    


```{=html}
<blockquote><strong><code>any_is_instance(t, *args)</code></strong></blockquote>
```


    
    
### `array_equal`
    


```{=html}
<blockquote><strong><code>array_equal(a, b)</code></strong></blockquote>
```


    
    
### `df_equal`
    


```{=html}
<blockquote><strong><code>df_equal(a, b)</code></strong></blockquote>
```


    
    
### `equals`
    


```{=html}
<blockquote><strong><code>equals(a, b)</code></strong></blockquote>
```


    
        Compares `a` and `b` for equality; supports sublists, tensors and arrays too
    
### `in_colab`
    


```{=html}
<blockquote><strong><code>in_colab()</code></strong></blockquote>
```


    
        Check if the code is running in Google Colaboratory
    
### `in_ipython`
    


```{=html}
<blockquote><strong><code>in_ipython()</code></strong></blockquote>
```


    
        Check if code is running in some kind of IPython environment
    
### `in_jupyter`
    


```{=html}
<blockquote><strong><code>in_jupyter()</code></strong></blockquote>
```


    
        Check if the code is running in a jupyter notebook
    
### `in_notebook`
    


```{=html}
<blockquote><strong><code>in_notebook()</code></strong></blockquote>
```


    
        Check if the code is running in a jupyter notebook
    
### `ipython_shell`
    


```{=html}
<blockquote><strong><code>ipython_shell()</code></strong></blockquote>
```


    
        Same as `get_ipython` but returns `False` if not in IPython
    
### `is_coll`
    


```{=html}
<blockquote><strong><code>is_coll(o)</code></strong></blockquote>
```


    
        Test whether `o` is a collection (i.e. has a usable `len`)
    
### `is_iter`
    


```{=html}
<blockquote><strong><code>is_iter(o)</code></strong></blockquote>
```


    
        Test whether `o` can be used in a `for` loop
    
### `isinstance_str`
    


```{=html}
<blockquote><strong><code>isinstance_str(x, cls_name)</code></strong></blockquote>
```


    
        Like `isinstance`, except takes a type name instead of a type
    
### `noop`
    


```{=html}
<blockquote><strong><code>noop(x=None, *args, **kwargs)</code></strong></blockquote>
```


    
        Do nothing
    
### `noops`
    


```{=html}
<blockquote><strong><code>noops(self, x=None, *args, **kwargs)</code></strong></blockquote>
```


    
        Do nothing (method)
    
### `reduce`
    


```{=html}
<blockquote><strong><code>reduce(...)</code></strong></blockquote>
```


    
        reduce(function, iterable[, initial]) -> value
        
        Apply a function of two arguments cumulatively to the items of a sequence
        or iterable, from left to right, so as to reduce the iterable to a single
        value.  For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
        ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
        of the iterable in the calculation, and serves as a default when the
        iterable is empty.
    
### `remove_prefix`
    


```{=html}
<blockquote><strong><code>remove_prefix(text, prefix)</code></strong></blockquote>
```


    
        Temporary until py39 is a prereq
    
### `remove_suffix`
    


```{=html}
<blockquote><strong><code>remove_suffix(text, suffix)</code></strong></blockquote>
```


    
        Temporary until py39 is a prereq
    
### `warn`
    


```{=html}
<blockquote><strong><code>warn(message, category=None, stacklevel=1, source=None)</code></strong></blockquote>
```


    
        Issue a warning, or maybe ignore it or raise an exception.

