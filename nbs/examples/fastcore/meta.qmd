---
title: "meta"
description: "module fastcore.meta in fastcore"
---

## Classes

    builtins.object
        AutoInit
    builtins.type(builtins.object)
        FixSigMeta
            BypassNewMeta
            NewChkMeta
            PrePostInitMeta
    
    
### AutoInit
    


```{=html}
<blockquote><strong><code>class AutoInit(builtins.object)</code></strong></blockquote>
```


    
     |  AutoInit(*args, **kwargs)
     |  
     |  Same as `object`, but no need for subclasses to call `super().__init__`
     |  
     |  Methods defined here:
     |  
     |  
#### `AutoInit.__pre_init__`
     |  
     |  __pre_init__(self, *args, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
### BypassNewMeta
    


```{=html}
<blockquote><strong><code>class BypassNewMeta(FixSigMeta)</code></strong></blockquote>
```


    
     |  BypassNewMeta(name, bases, dict)
     |  
     |  Metaclass: casts `x` to this class if it's of type `cls._bypass_type`
     |  
     |  Method resolution order:
     |      BypassNewMeta
     |      FixSigMeta
     |      builtins.type
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  
#### `BypassNewMeta.__call__`
     |  
     |  __call__(cls, x=None, *args, **kwargs)
     |      Call self as a function.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __annotations__ = {}
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from FixSigMeta:
     |  
     |  
#### `FixSigMeta.__new__`
     |  
     |  __new__(cls, name, bases, dict)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.type:
     |  
     |  
#### `type.__delattr__`
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  
#### `type.__dir__`
     |  
     |  __dir__(self, /)
     |      Specialized __dir__ implementation for types.
     |  
     |  
#### `type.__getattribute__`
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  
#### `type.__init__`
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  
#### `type.__instancecheck__`
     |  
     |  __instancecheck__(self, instance, /)
     |      Check if an object is an instance.
     |  
     |  
#### `type.__or__`
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  
#### `type.__repr__`
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  
#### `type.__ror__`
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  
#### `type.__setattr__`
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  
#### `type.__sizeof__`
     |  
     |  __sizeof__(self, /)
     |      Return memory consumption of the type object.
     |  
     |  
#### `type.__subclasscheck__`
     |  
     |  __subclasscheck__(self, subclass, /)
     |      Check if a class is a subclass.
     |  
     |  
#### `type.__subclasses__`
     |  
     |  __subclasses__(self, /)
     |      Return a list of immediate subclasses.
     |  
     |  
#### `type.mro`
     |  
     |  mro(self, /)
     |      Return a type's method resolution order.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.type:
     |  
     |  
#### `BypassNewMeta.__prepare__`
     |  
     |  __prepare__(...) from builtins.type
     |      __prepare__() -> dict
     |      used to create the namespace for the class statement
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.type:
     |  
     |  __abstractmethods__
     |  
     |  __dict__
     |  
     |  __text_signature__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.type:
     |  
     |  __base__ = <class 'fastcore.meta.FixSigMeta'>
     |      A metaclass that fixes the signature on classes that override `__new__`
     |  
     |  
     |  __bases__ = (<class 'fastcore.meta.FixSigMeta'>,)
     |  
     |  __basicsize__ = 888
     |  
     |  __dictoffset__ = 264
     |  
     |  __flags__ = 2148029952
     |  
     |  __itemsize__ = 40
     |  
     |  __mro__ = (<class 'fastcore.meta.BypassNewMeta'>, <class 'fastcore.met...
     |  
     |  __weakrefoffset__ = 368
    
### FixSigMeta
    


```{=html}
<blockquote><strong><code>class FixSigMeta(builtins.type)</code></strong></blockquote>
```


    
     |  FixSigMeta(name, bases, dict)
     |  
     |  A metaclass that fixes the signature on classes that override `__new__`
     |  
     |  Method resolution order:
     |      FixSigMeta
     |      builtins.type
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  
#### `FixSigMeta.__new__`
     |  
     |  __new__(cls, name, bases, dict)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __annotations__ = {}
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.type:
     |  
     |  
#### `type.__call__`
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  
#### `type.__delattr__`
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  
#### `type.__dir__`
     |  
     |  __dir__(self, /)
     |      Specialized __dir__ implementation for types.
     |  
     |  
#### `type.__getattribute__`
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  
#### `type.__init__`
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  
#### `type.__instancecheck__`
     |  
     |  __instancecheck__(self, instance, /)
     |      Check if an object is an instance.
     |  
     |  
#### `type.__or__`
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  
#### `type.__repr__`
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  
#### `type.__ror__`
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  
#### `type.__setattr__`
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  
#### `type.__sizeof__`
     |  
     |  __sizeof__(self, /)
     |      Return memory consumption of the type object.
     |  
     |  
#### `type.__subclasscheck__`
     |  
     |  __subclasscheck__(self, subclass, /)
     |      Check if a class is a subclass.
     |  
     |  
#### `type.__subclasses__`
     |  
     |  __subclasses__(self, /)
     |      Return a list of immediate subclasses.
     |  
     |  
#### `type.mro`
     |  
     |  mro(self, /)
     |      Return a type's method resolution order.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.type:
     |  
     |  
#### `FixSigMeta.__prepare__`
     |  
     |  __prepare__(...) from builtins.type
     |      __prepare__() -> dict
     |      used to create the namespace for the class statement
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.type:
     |  
     |  __abstractmethods__
     |  
     |  __dict__
     |  
     |  __text_signature__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.type:
     |  
     |  __base__ = <class 'type'>
     |      type(object) -> the object's type
     |      type(name, bases, dict, **kwds) -> a new type
     |  
     |  
     |  __bases__ = (<class 'type'>,)
     |  
     |  __basicsize__ = 888
     |  
     |  __dictoffset__ = 264
     |  
     |  __flags__ = 2148029952
     |  
     |  __itemsize__ = 40
     |  
     |  __mro__ = (<class 'fastcore.meta.FixSigMeta'>, <class 'type'>, <class ...
     |  
     |  __weakrefoffset__ = 368
    
### NewChkMeta
    


```{=html}
<blockquote><strong><code>class NewChkMeta(FixSigMeta)</code></strong></blockquote>
```


    
     |  NewChkMeta(name, bases, dict)
     |  
     |  Metaclass to avoid recreating object passed to constructor
     |  
     |  Method resolution order:
     |      NewChkMeta
     |      FixSigMeta
     |      builtins.type
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  
#### `NewChkMeta.__call__`
     |  
     |  __call__(cls, x=None, *args, **kwargs)
     |      Call self as a function.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __annotations__ = {}
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from FixSigMeta:
     |  
     |  
#### `FixSigMeta.__new__`
     |  
     |  __new__(cls, name, bases, dict)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.type:
     |  
     |  
#### `type.__delattr__`
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  
#### `type.__dir__`
     |  
     |  __dir__(self, /)
     |      Specialized __dir__ implementation for types.
     |  
     |  
#### `type.__getattribute__`
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  
#### `type.__init__`
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  
#### `type.__instancecheck__`
     |  
     |  __instancecheck__(self, instance, /)
     |      Check if an object is an instance.
     |  
     |  
#### `type.__or__`
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  
#### `type.__repr__`
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  
#### `type.__ror__`
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  
#### `type.__setattr__`
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  
#### `type.__sizeof__`
     |  
     |  __sizeof__(self, /)
     |      Return memory consumption of the type object.
     |  
     |  
#### `type.__subclasscheck__`
     |  
     |  __subclasscheck__(self, subclass, /)
     |      Check if a class is a subclass.
     |  
     |  
#### `type.__subclasses__`
     |  
     |  __subclasses__(self, /)
     |      Return a list of immediate subclasses.
     |  
     |  
#### `type.mro`
     |  
     |  mro(self, /)
     |      Return a type's method resolution order.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.type:
     |  
     |  
#### `NewChkMeta.__prepare__`
     |  
     |  __prepare__(...) from builtins.type
     |      __prepare__() -> dict
     |      used to create the namespace for the class statement
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.type:
     |  
     |  __abstractmethods__
     |  
     |  __dict__
     |  
     |  __text_signature__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.type:
     |  
     |  __base__ = <class 'fastcore.meta.FixSigMeta'>
     |      A metaclass that fixes the signature on classes that override `__new__`
     |  
     |  
     |  __bases__ = (<class 'fastcore.meta.FixSigMeta'>,)
     |  
     |  __basicsize__ = 888
     |  
     |  __dictoffset__ = 264
     |  
     |  __flags__ = 2148029952
     |  
     |  __itemsize__ = 40
     |  
     |  __mro__ = (<class 'fastcore.meta.NewChkMeta'>, <class 'fastcore.meta.F...
     |  
     |  __weakrefoffset__ = 368
    
### PrePostInitMeta
    


```{=html}
<blockquote><strong><code>class PrePostInitMeta(FixSigMeta)</code></strong></blockquote>
```


    
     |  PrePostInitMeta(name, bases, dict)
     |  
     |  A metaclass that calls optional `__pre_init__` and `__post_init__` methods
     |  
     |  Method resolution order:
     |      PrePostInitMeta
     |      FixSigMeta
     |      builtins.type
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  
#### `PrePostInitMeta.__call__`
     |  
     |  __call__(cls, *args, **kwargs)
     |      Call self as a function.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __annotations__ = {}
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from FixSigMeta:
     |  
     |  
#### `FixSigMeta.__new__`
     |  
     |  __new__(cls, name, bases, dict)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.type:
     |  
     |  
#### `type.__delattr__`
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  
#### `type.__dir__`
     |  
     |  __dir__(self, /)
     |      Specialized __dir__ implementation for types.
     |  
     |  
#### `type.__getattribute__`
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  
#### `type.__init__`
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  
#### `type.__instancecheck__`
     |  
     |  __instancecheck__(self, instance, /)
     |      Check if an object is an instance.
     |  
     |  
#### `type.__or__`
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  
#### `type.__repr__`
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  
#### `type.__ror__`
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  
#### `type.__setattr__`
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  
#### `type.__sizeof__`
     |  
     |  __sizeof__(self, /)
     |      Return memory consumption of the type object.
     |  
     |  
#### `type.__subclasscheck__`
     |  
     |  __subclasscheck__(self, subclass, /)
     |      Check if a class is a subclass.
     |  
     |  
#### `type.__subclasses__`
     |  
     |  __subclasses__(self, /)
     |      Return a list of immediate subclasses.
     |  
     |  
#### `type.mro`
     |  
     |  mro(self, /)
     |      Return a type's method resolution order.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.type:
     |  
     |  
#### `PrePostInitMeta.__prepare__`
     |  
     |  __prepare__(...) from builtins.type
     |      __prepare__() -> dict
     |      used to create the namespace for the class statement
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.type:
     |  
     |  __abstractmethods__
     |  
     |  __dict__
     |  
     |  __text_signature__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.type:
     |  
     |  __base__ = <class 'fastcore.meta.FixSigMeta'>
     |      A metaclass that fixes the signature on classes that override `__new__`
     |  
     |  
     |  __bases__ = (<class 'fastcore.meta.FixSigMeta'>,)
     |  
     |  __basicsize__ = 888
     |  
     |  __dictoffset__ = 264
     |  
     |  __flags__ = 2148029952
     |  
     |  __itemsize__ = 40
     |  
     |  __mro__ = (<class 'fastcore.meta.PrePostInitMeta'>, <class 'fastcore.m...
     |  
     |  __weakrefoffset__ = 368

## Functions

    
### `anno_dict`
    


```{=html}
<blockquote><strong><code>anno_dict(f)</code></strong></blockquote>
```


    
        `__annotation__ dictionary with `empty` cast to `None`, returning empty if doesn't exist
    
### `delegates`
    


```{=html}
<blockquote><strong><code>delegates(to: function = None, keep=False, but: list = None)</code></strong></blockquote>
```


    
        Decorator: replace `**kwargs` in signature with params from `to`
    
### `empty2none`
    


```{=html}
<blockquote><strong><code>empty2none(p)</code></strong></blockquote>
```


    
        Replace `Parameter.empty` with `None`
    
### `funcs_kwargs`
    


```{=html}
<blockquote><strong><code>funcs_kwargs(as_method=False)</code></strong></blockquote>
```


    
        Replace methods in `cls._methods` with those from `kwargs`
    
### `method`
    


```{=html}
<blockquote><strong><code>method(f)</code></strong></blockquote>
```


    
        Mark `f` as a method
    
### `test_sig`
    


```{=html}
<blockquote><strong><code>test_sig(f, b)</code></strong></blockquote>
```


    
        Test the signature of an object
    
### `use_kwargs`
    


```{=html}
<blockquote><strong><code>use_kwargs(names, keep=False)</code></strong></blockquote>
```


    
        Decorator: replace `**kwargs` in signature with `names` params
    
### `use_kwargs_dict`
    


```{=html}
<blockquote><strong><code>use_kwargs_dict(keep=False, **kwargs)</code></strong></blockquote>
```


    
        Decorator: replace `**kwargs` in signature with `names` params

