---
title: "test"
description: "module fastcore.test in fastcore"
---

## Classes

    builtins.object
        ExceptionExpected
    
    
### ExceptionExpected
    


```{=html}
<blockquote><strong><code>class ExceptionExpected(builtins.object)</code></strong></blockquote>
```


    
     |  ExceptionExpected(ex=<class 'Exception'>, regex='')
     |  
     |  Context manager that tests if an exception is raised
     |  
     |  Methods defined here:
     |  
     |  
#### `ExceptionExpected.__enter__`
     |  
     |  __enter__(self)
     |  
     |  
#### `ExceptionExpected.__exit__`
     |  
     |  __exit__(self, type, value, traceback)
     |  
     |  
#### `ExceptionExpected.__init__`
     |  
     |  __init__(self, ex=<class 'Exception'>, regex='')
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

## Functions

    
### `is_close`
    


```{=html}
<blockquote><strong><code>is_close(a, b, eps=1e-05)</code></strong></blockquote>
```


    
        Is `a` within `eps` of `b`
    
### `nequals`
    


```{=html}
<blockquote><strong><code>nequals(a, b)</code></strong></blockquote>
```


    
        Compares `a` and `b` for `not equals`
    
### `test`
    


```{=html}
<blockquote><strong><code>test(a, b, cmp, cname=None)</code></strong></blockquote>
```


    
        `assert` that `cmp(a,b)`; display inputs and `cname or cmp.__name__` if it fails
    
### `test_close`
    


```{=html}
<blockquote><strong><code>test_close(a, b, eps=1e-05)</code></strong></blockquote>
```


    
        `test` that `a` is within `eps` of `b`
    
### `test_eq`
    


```{=html}
<blockquote><strong><code>test_eq(a, b)</code></strong></blockquote>
```


    
        `test` that `a==b`
    
### `test_eq_type`
    


```{=html}
<blockquote><strong><code>test_eq_type(a, b)</code></strong></blockquote>
```


    
        `test` that `a==b` and are same type
    
### `test_fail`
    


```{=html}
<blockquote><strong><code>test_fail(f, msg='', contains='', args=None, kwargs=None)</code></strong></blockquote>
```


    
        # %% ../nbs/00_test.ipynb 6
    
### `test_fig_exists`
    


```{=html}
<blockquote><strong><code>test_fig_exists(ax)</code></strong></blockquote>
```


    
        Test there is a figure displayed in `ax`
    
### `test_is`
    


```{=html}
<blockquote><strong><code>test_is(a, b)</code></strong></blockquote>
```


    
        `test` that `a is b`
    
### `test_ne`
    


```{=html}
<blockquote><strong><code>test_ne(a, b)</code></strong></blockquote>
```


    
        `test` that `a!=b`
    
### `test_shuffled`
    


```{=html}
<blockquote><strong><code>test_shuffled(a, b)</code></strong></blockquote>
```


    
        `test` that `a` and `b` are shuffled versions of the same sequence of items
    
### `test_stdout`
    


```{=html}
<blockquote><strong><code>test_stdout(f, exp, regex=False)</code></strong></blockquote>
```


    
        Test that `f` prints `exp` to stdout, optionally checking as `regex`
    
### `test_warns`
    


```{=html}
<blockquote><strong><code>test_warns(f, show=False)</code></strong></blockquote>
```


    
        # %% ../nbs/00_test.ipynb 40

