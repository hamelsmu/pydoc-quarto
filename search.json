[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pydoc-quarto",
    "section": "",
    "text": "pip install pydoc_quarto"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "pydoc-quarto",
    "section": "Usage",
    "text": "Usage\n\n!pydoc_quarto -h\n\nusage: pydoc_quarto [-h] lib dest_dir\n\nGenerate Quarto Markdown API docs\n\npositional arguments:\n  lib         the name of the python library\n  dest_dir    the destination directory the markdown files will be rendered into\n\noptions:\n  -h, --help  show this help message and exit"
  },
  {
    "objectID": "index.html#example",
    "href": "index.html#example",
    "title": "pydoc-quarto",
    "section": "Example",
    "text": "Example\nThis will generate markdown files for the requests library:\n\n!pydoc_quarto requests _test_dir/\n!ls _test_dir/\n\nadapters.qmd     compat.qmd       hooks.qmd        status_codes.qmd\napi.qmd          cookies.qmd      models.qmd       structures.qmd\nauth.qmd         exceptions.qmd   packages.qmd     utils.qmd\ncerts.qmd        help.qmd         sessions.qmd"
  },
  {
    "objectID": "examples/fastcore/shutil.html",
    "href": "examples/fastcore/shutil.html",
    "title": "shutil",
    "section": "",
    "text": "chown(path, user=None, group=None)\n    Change owner user and group of the given path.\n    \n    user and group can be the uid/gid or the user/group names, and in that case,\n    they are converted to their respective uid/gid.\n\n\n\ncopy(src, dst, *, follow_symlinks=True)\n    Copy data and mode bits (\"cp src dst\"). Return the file's destination.\n    \n    The destination may be a directory.\n    \n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n    \n    If source and destination are the same file, a SameFileError will be\n    raised.\n\n\n\ncopy2(src, dst, *, follow_symlinks=True)\n    Copy data and metadata. Return the file's destination.\n    \n    Metadata is copied with copystat(). Please see the copystat function\n    for more information.\n    \n    The destination may be a directory.\n    \n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n\n\n\ncopymode(src, dst, *, follow_symlinks=True)\n    Copy mode bits from src to dst.\n    \n    If follow_symlinks is not set, symlinks aren't followed if and only\n    if both `src` and `dst` are symlinks.  If `lchmod` isn't available\n    (e.g. Linux) this method does nothing.\n\n\n\ncopystat(src, dst, *, follow_symlinks=True)\n    Copy file metadata\n    \n    Copy the permission bits, last access time, last modification time, and\n    flags from `src` to `dst`. On Linux, copystat() also copies the \"extended\n    attributes\" where possible. The file contents, owner, and group are\n    unaffected. `src` and `dst` are path-like objects or path names given as\n    strings.\n    \n    If the optional flag `follow_symlinks` is not set, symlinks aren't\n    followed if and only if both `src` and `dst` are symlinks.\n\n\n\ncopytree(src, dst, symlinks=False, ignore=None, copy_function=, ignore_dangling_symlinks=False, dirs_exist_ok=False)\n    Recursively copy a directory tree and return the destination directory.\n    \n    dirs_exist_ok dictates whether to raise an exception in case dst or any\n    missing parent directory already exists.\n    \n    If exception(s) occur, an Error is raised with a list of reasons.\n    \n    If the optional symlinks flag is true, symbolic links in the\n    source tree result in symbolic links in the destination tree; if\n    it is false, the contents of the files pointed to by symbolic\n    links are copied. If the file pointed by the symlink doesn't\n    exist, an exception will be added in the list of errors raised in\n    an Error exception at the end of the copy process.\n    \n    You can set the optional ignore_dangling_symlinks flag to true if you\n    want to silence this exception. Notice that this has no effect on\n    platforms that don't support os.symlink.\n    \n    The optional ignore argument is a callable. If given, it\n    is called with the `src` parameter, which is the directory\n    being visited by copytree(), and `names` which is the list of\n    `src` contents, as returned by os.listdir():\n    \n        callable(src, names) -> ignored_names\n    \n    Since copytree() is called recursively, the callable will be\n    called once for each directory that is copied. It returns a\n    list of names relative to the `src` directory that should\n    not be copied.\n    \n    The optional copy_function argument is a callable that will be used\n    to copy each file. It will be called with the source path and the\n    destination path as arguments. By default, copy2() is used, but any\n    function that supports the same signature (like copy()) can be used.\n\n\n\ndisk_usage(path)\n    Return disk usage statistics about the given path.\n    \n    Returned value is a named tuple with attributes 'total', 'used' and\n    'free', which are the amount of total, used and free space, in bytes.\n\n\n\nmove(src, dst, copy_function=)\n    Recursively move a file or directory to another location. This is\n    similar to the Unix \"mv\" command. Return the file or directory's\n    destination.\n    \n    If the destination is a directory or a symlink to a directory, the source\n    is moved inside the directory. The destination path must not already\n    exist.\n    \n    If the destination already exists but is not a directory, it may be\n    overwritten depending on os.rename() semantics.\n    \n    If the destination is on our current filesystem, then rename() is used.\n    Otherwise, src is copied to the destination and then removed. Symlinks are\n    recreated under the new name if os.rename() fails because of cross\n    filesystem renames.\n    \n    The optional `copy_function` argument is a callable that will be used\n    to copy the source or it will be delegated to `copytree`.\n    By default, copy2() is used, but any function that supports the same\n    signature (like copy()) can be used.\n    \n    A lot more could be done here...  A look at a mv.c shows a lot of\n    the issues this implementation glosses over.\n\n\n\nrmtree(path, ignore_errors=False, onerror=None)\n    Recursively delete a directory tree.\n    \n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised."
  },
  {
    "objectID": "examples/fastcore/xdg.html",
    "href": "examples/fastcore/xdg.html",
    "title": "xdg",
    "section": "",
    "text": "xdg_cache_home()\n    Path corresponding to `XDG_CACHE_HOME`\n\n\n\nxdg_config_dirs()\n    Paths corresponding to `XDG_CONFIG_DIRS`\n\n\n\nxdg_config_home()\n    Path corresponding to `XDG_CONFIG_HOME`\n\n\n\nxdg_data_dirs()\n    Paths corresponding to XDG_DATA_DIRS`\n\n\n\nxdg_data_home()\n    Path corresponding to `XDG_DATA_HOME`\n\n\n\nxdg_runtime_dir()\n    Path corresponding to `XDG_RUNTIME_DIR`\n\n\n\nxdg_state_home()\n    Path corresponding to `XDG_STATE_HOME`"
  },
  {
    "objectID": "examples/fastcore/transform.html",
    "href": "examples/fastcore/transform.html",
    "title": "transform",
    "section": "",
    "text": "builtins.object\n    Func\n    Pipeline\n    Transform\n        DisplayedTransform\n        InplaceTransform\n        ItemTransform\n\n\nclass DisplayedTransform(Transform)\n |  DisplayedTransform(self, enc=None, dec=None, split_idx=None, order=None)\n |  \n |  A transform with a `__repr__` that shows its attrs\n |  \n |  Method resolution order:\n |      DisplayedTransform\n |      Transform\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  decodes = \n |  encodes = \n |  setups = \n |  ----------------------------------------------------------------------\n |  Readonly properties defined here:\n |  \n |  name\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __signature__ = <Signature (self, enc=None, dec=None, split_idx=None, ...\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from Transform:\n |  \n |  \n\n\n |  \n |  __call__(self, x, **kwargs)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  __init__(self, enc=None, dec=None, split_idx=None, order=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  decode(self, x, **kwargs)\n |      Delegate to <code>decodes</code> to undo transform\n |  \n |  \n\n\n\n |  \n |  setup(self, items=None, train_setup=False)\n |      Delegate to <code>setups</code> to set up transform\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from Transform:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from Transform:\n |  \n |  init_enc = None\n |  \n |  order = 0\n |  \n |  split_idx = None\n |  \n |  train_setup = None\n\n\n\n\nclass Func(builtins.object)\n |  Func(name, *args, **kwargs)\n |  \n |  Basic wrapper around a `name` with `args` and `kwargs` to call on a given type\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(self, t)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  __init__(self, name, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass InplaceTransform(Transform)\n |  InplaceTransform(self, enc=None, dec=None, split_idx=None, order=None)\n |  \n |  A `Transform` that modifies in-place and just returns whatever it's passed\n |  \n |  Method resolution order:\n |      InplaceTransform\n |      Transform\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  decodes = \n |  encodes = \n |  setups = \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __signature__ = <Signature (self, enc=None, dec=None, split_idx=None, ...\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from Transform:\n |  \n |  \n\n\n |  \n |  __call__(self, x, **kwargs)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  __init__(self, enc=None, dec=None, split_idx=None, order=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  decode(self, x, **kwargs)\n |      Delegate to <code>decodes</code> to undo transform\n |  \n |  \n\n\n\n |  \n |  setup(self, items=None, train_setup=False)\n |      Delegate to <code>setups</code> to set up transform\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from Transform:\n |  \n |  name\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from Transform:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from Transform:\n |  \n |  init_enc = None\n |  \n |  order = 0\n |  \n |  split_idx = None\n |  \n |  train_setup = None\n\n\n\n\nclass ItemTransform(Transform)\n |  ItemTransform(self, enc=None, dec=None, split_idx=None, order=None)\n |  \n |  A transform that always take tuples as items\n |  \n |  Method resolution order:\n |      ItemTransform\n |      Transform\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(self, x, **kwargs)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  decode(self, x, **kwargs)\n |      Delegate to <code>decodes</code> to undo transform\n |  \n |  decodes = \n |  encodes = \n |  setups = \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __signature__ = <Signature (self, enc=None, dec=None, split_idx=None, ...\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from Transform:\n |  \n |  \n\n\n\n |  \n |  __init__(self, enc=None, dec=None, split_idx=None, order=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  setup(self, items=None, train_setup=False)\n |      Delegate to <code>setups</code> to set up transform\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from Transform:\n |  \n |  name\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from Transform:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from Transform:\n |  \n |  init_enc = None\n |  \n |  order = 0\n |  \n |  split_idx = None\n |  \n |  train_setup = None\n\n\n\n\nclass Pipeline(builtins.object)\n |  Pipeline(funcs=None, split_idx=None)\n |  \n |  A pipeline of composed (for encode/decode) transforms, setup with types\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(self, o)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  __dir__(self)\n |      Default dir() implementation.\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, k)\n |  \n |  \n\n\n\n |  \n |  __getitem__(self, i)\n |  \n |  \n\n\n\n |  \n |  __init__(self, funcs=None, split_idx=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __setstate__(self, data)\n |  \n |  \n\n\n\n |  \n |  add(self, ts, items=None, train_setup=False)\n |  \n |  \n\n\n\n |  \n |  decode(self, o, full=True)\n |  \n |  \n\n\n\n |  \n |  setup(self, items=None, train_setup=False)\n |  \n |  \n\n\n\n |  \n |  show(self, o, ctx=None, **kwargs)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass Transform(builtins.object)\n |  Transform(self, enc=None, dec=None, split_idx=None, order=None)\n |  \n |  Delegates (`__call__`,`decode`,`setup`) to (<code>encodes</code>,<code>decodes</code>,<code>setups</code>) if `split_idx` matches\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(self, x, **kwargs)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  __init__(self, enc=None, dec=None, split_idx=None, order=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  decode(self, x, **kwargs)\n |      Delegate to <code>decodes</code> to undo transform\n |  \n |  decodes = \n |  encodes = \n |  \n\n\n\n |  \n |  setup(self, items=None, train_setup=False)\n |      Delegate to <code>setups</code> to set up transform\n |  \n |  setups = \n |  ----------------------------------------------------------------------\n |  Readonly properties defined here:\n |  \n |  name\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __signature__ = <Signature (self, enc=None, dec=None, split_idx=None, ...\n |  \n |  init_enc = None\n |  \n |  order = 0\n |  \n |  split_idx = None\n |  \n |  train_setup = None"
  },
  {
    "objectID": "examples/fastcore/transform.html#functions",
    "href": "examples/fastcore/transform.html#functions",
    "title": "transform",
    "section": "Functions",
    "text": "Functions\n\ncompose_tfms\ncompose_tfms(x, tfms, is_enc=True, reverse=False, **kwargs)\n    Apply all `func_nm` attribute of `tfms` on `x`, maybe in `reverse` order\n\n\ngather_attr_names\ngather_attr_names(o, nm)\n    Used in __dir__ to collect all attrs `k` from `self.{nm}`\n\n\ngather_attrs\ngather_attrs(o, k, nm)\n    Used in __getattr__ to collect all attrs `k` from `self.{nm}`\n\n\nget_func\nget_func(t, name, *args, **kwargs)\n    Get the `t.name` (potentially partial-ized with `args` and `kwargs`) or `noop` if not defined\n\n\nmk_transform\nmk_transform(f)\n    Convert function `f` to `Transform` if it isn't already one"
  },
  {
    "objectID": "examples/fastcore/docments.html",
    "href": "examples/fastcore/docments.html",
    "title": "docments",
    "section": "",
    "text": "builtins.object\n    inspect._empty\n\n\nempty = class _empty(builtins.object)\n |  Marker object for Signature.empty and Parameter.empty.\n |  \n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"
  },
  {
    "objectID": "examples/fastcore/docments.html#functions",
    "href": "examples/fastcore/docments.html#functions",
    "title": "docments",
    "section": "Functions",
    "text": "Functions\n\ndocments\ndocments(elt, full=False, *, returns=True, eval_str=False)\n    Generates a `docment`\n\n\ndocstring\ndocstring(sym)\n    Get docstring for `sym` for functions ad classes\n\n\nget_dataclass_source\nget_dataclass_source(s)\n    Get source code for dataclass `s`\n\n\nget_name\nget_name(obj)\n    Get the name of `obj`\n\n\nget_source\nget_source(s)\n    Get source code for string, function object or dataclass `s`\n\n\nisdataclass\nisdataclass(s)\n    Check if `s` is a dataclass but not a dataclass' instance\n\n\nparse_docstring\nparse_docstring(sym)\n    Parse a numpy-style docstring in `sym`\n\n\nqual_name\nqual_name(obj)\n    Get the qualified name of `obj`"
  },
  {
    "objectID": "examples/fastcore/test.html",
    "href": "examples/fastcore/test.html",
    "title": "test",
    "section": "",
    "text": "builtins.object\n    ExceptionExpected\n\n\nclass ExceptionExpected(builtins.object)\n |  ExceptionExpected(ex=<class 'Exception'>, regex='')\n |  \n |  Context manager that tests if an exception is raised\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  \n\n\n\n |  \n |  __init__(self, ex=<class 'Exception'>, regex='')\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"
  },
  {
    "objectID": "examples/fastcore/test.html#functions",
    "href": "examples/fastcore/test.html#functions",
    "title": "test",
    "section": "Functions",
    "text": "Functions\n\nis_close\nis_close(a, b, eps=1e-05)\n    Is `a` within `eps` of `b`\n\n\nnequals\nnequals(a, b)\n    Compares `a` and `b` for `not equals`\n\n\ntest\ntest(a, b, cmp, cname=None)\n    `assert` that `cmp(a,b)`; display inputs and `cname or cmp.__name__` if it fails\n\n\ntest_close\ntest_close(a, b, eps=1e-05)\n    `test` that `a` is within `eps` of `b`\n\n\ntest_eq\ntest_eq(a, b)\n    `test` that `a==b`\n\n\ntest_eq_type\ntest_eq_type(a, b)\n    `test` that `a==b` and are same type\n\n\ntest_fail\ntest_fail(f, msg='', contains='', args=None, kwargs=None)\n    # %% ../nbs/00_test.ipynb 6\n\n\ntest_fig_exists\ntest_fig_exists(ax)\n    Test there is a figure displayed in `ax`\n\n\ntest_is\ntest_is(a, b)\n    `test` that `a is b`\n\n\ntest_ne\ntest_ne(a, b)\n    `test` that `a!=b`\n\n\ntest_shuffled\ntest_shuffled(a, b)\n    `test` that `a` and `b` are shuffled versions of the same sequence of items\n\n\ntest_stdout\ntest_stdout(f, exp, regex=False)\n    Test that `f` prints `exp` to stdout, optionally checking as `regex`\n\n\ntest_warns\ntest_warns(f, show=False)\n    # %% ../nbs/00_test.ipynb 40"
  },
  {
    "objectID": "examples/fastcore/style.html",
    "href": "examples/fastcore/style.html",
    "title": "style",
    "section": "",
    "text": "builtins.object\n    Style\n    StyleCode\n\n\nclass Style(builtins.object)\n |  Style(codes=None)\n |  \n |  A minimal terminal text styler.\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(self, obj)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  __dir__(self)\n |      Default dir() implementation.\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, k)\n |  \n |  \n\n\n\n |  \n |  __init__(self, codes=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass StyleCode(builtins.object)\n |  StyleCode(name, code, typ)\n |  \n |  An escape sequence for styling terminal text.\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __init__(self, name, code, typ)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"
  },
  {
    "objectID": "examples/fastcore/style.html#functions",
    "href": "examples/fastcore/style.html#functions",
    "title": "style",
    "section": "Functions",
    "text": "Functions\n\ndemo\ndemo()\n    Demonstrate all available styles and their codes."
  },
  {
    "objectID": "examples/fastcore/meta.html",
    "href": "examples/fastcore/meta.html",
    "title": "meta",
    "section": "",
    "text": "builtins.object\n    AutoInit\nbuiltins.type(builtins.object)\n    FixSigMeta\n        BypassNewMeta\n        NewChkMeta\n        PrePostInitMeta\n\n\nclass AutoInit(builtins.object)\n |  AutoInit(*args, **kwargs)\n |  \n |  Same as `object`, but no need for subclasses to call `super().__init__`\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __pre_init__(self, *args, **kwargs)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass BypassNewMeta(FixSigMeta)\n |  BypassNewMeta(name, bases, dict)\n |  \n |  Metaclass: casts `x` to this class if it's of type `cls._bypass_type`\n |  \n |  Method resolution order:\n |      BypassNewMeta\n |      FixSigMeta\n |      builtins.type\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(cls, x=None, *args, **kwargs)\n |      Call self as a function.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from FixSigMeta:\n |  \n |  \n\n\n\n |  \n |  __new__(cls, name, bases, dict)\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.type:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __dir__(self, /)\n |      Specialized __dir__ implementation for types.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __instancecheck__(self, instance, /)\n |      Check if an object is an instance.\n |  \n |  \n\n\n\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __sizeof__(self, /)\n |      Return memory consumption of the type object.\n |  \n |  \n\n\n\n |  \n |  __subclasscheck__(self, subclass, /)\n |      Check if a class is a subclass.\n |  \n |  \n\n\n\n |  \n |  __subclasses__(self, /)\n |      Return a list of immediate subclasses.\n |  \n |  \n\n\n\n |  \n |  mro(self, /)\n |      Return a type's method resolution order.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.type:\n |  \n |  \n\n\n\n |  \n |  __prepare__(...) from builtins.type\n |      __prepare__() -> dict\n |      used to create the namespace for the class statement\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.type:\n |  \n |  __abstractmethods__\n |  \n |  __dict__\n |  \n |  __text_signature__\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from builtins.type:\n |  \n |  __base__ = <class 'fastcore.meta.FixSigMeta'>\n |      A metaclass that fixes the signature on classes that override `__new__`\n |  \n |  \n |  __bases__ = (<class 'fastcore.meta.FixSigMeta'>,)\n |  \n |  __basicsize__ = 880\n |  \n |  __dictoffset__ = 264\n |  \n |  __flags__ = 2148292096\n |  \n |  __itemsize__ = 40\n |  \n |  __mro__ = (<class 'fastcore.meta.BypassNewMeta'>, <class 'fastcore.met...\n |  \n |  __weakrefoffset__ = 368\n\n\n\n\nclass FixSigMeta(builtins.type)\n |  FixSigMeta(name, bases, dict)\n |  \n |  A metaclass that fixes the signature on classes that override `__new__`\n |  \n |  Method resolution order:\n |      FixSigMeta\n |      builtins.type\n |      builtins.object\n |  \n |  Static methods defined here:\n |  \n |  \n\n\n |  \n |  __new__(cls, name, bases, dict)\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.type:\n |  \n |  \n\n\n\n |  \n |  __call__(self, /, *args, **kwargs)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __dir__(self, /)\n |      Specialized __dir__ implementation for types.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __instancecheck__(self, instance, /)\n |      Check if an object is an instance.\n |  \n |  \n\n\n\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __sizeof__(self, /)\n |      Return memory consumption of the type object.\n |  \n |  \n\n\n\n |  \n |  __subclasscheck__(self, subclass, /)\n |      Check if a class is a subclass.\n |  \n |  \n\n\n\n |  \n |  __subclasses__(self, /)\n |      Return a list of immediate subclasses.\n |  \n |  \n\n\n\n |  \n |  mro(self, /)\n |      Return a type's method resolution order.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.type:\n |  \n |  \n\n\n\n |  \n |  __prepare__(...) from builtins.type\n |      __prepare__() -> dict\n |      used to create the namespace for the class statement\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.type:\n |  \n |  __abstractmethods__\n |  \n |  __dict__\n |  \n |  __text_signature__\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from builtins.type:\n |  \n |  __base__ = <class 'type'>\n |      type(object) -> the object's type\n |      type(name, bases, dict, **kwds) -> a new type\n |  \n |  \n |  __bases__ = (<class 'type'>,)\n |  \n |  __basicsize__ = 880\n |  \n |  __dictoffset__ = 264\n |  \n |  __flags__ = 2148292096\n |  \n |  __itemsize__ = 40\n |  \n |  __mro__ = (<class 'fastcore.meta.FixSigMeta'>, <class 'type'>, <class ...\n |  \n |  __weakrefoffset__ = 368\n\n\n\n\nclass NewChkMeta(FixSigMeta)\n |  NewChkMeta(name, bases, dict)\n |  \n |  Metaclass to avoid recreating object passed to constructor\n |  \n |  Method resolution order:\n |      NewChkMeta\n |      FixSigMeta\n |      builtins.type\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(cls, x=None, *args, **kwargs)\n |      Call self as a function.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from FixSigMeta:\n |  \n |  \n\n\n\n |  \n |  __new__(cls, name, bases, dict)\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.type:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __dir__(self, /)\n |      Specialized __dir__ implementation for types.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __instancecheck__(self, instance, /)\n |      Check if an object is an instance.\n |  \n |  \n\n\n\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __sizeof__(self, /)\n |      Return memory consumption of the type object.\n |  \n |  \n\n\n\n |  \n |  __subclasscheck__(self, subclass, /)\n |      Check if a class is a subclass.\n |  \n |  \n\n\n\n |  \n |  __subclasses__(self, /)\n |      Return a list of immediate subclasses.\n |  \n |  \n\n\n\n |  \n |  mro(self, /)\n |      Return a type's method resolution order.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.type:\n |  \n |  \n\n\n\n |  \n |  __prepare__(...) from builtins.type\n |      __prepare__() -> dict\n |      used to create the namespace for the class statement\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.type:\n |  \n |  __abstractmethods__\n |  \n |  __dict__\n |  \n |  __text_signature__\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from builtins.type:\n |  \n |  __base__ = <class 'fastcore.meta.FixSigMeta'>\n |      A metaclass that fixes the signature on classes that override `__new__`\n |  \n |  \n |  __bases__ = (<class 'fastcore.meta.FixSigMeta'>,)\n |  \n |  __basicsize__ = 880\n |  \n |  __dictoffset__ = 264\n |  \n |  __flags__ = 2148292096\n |  \n |  __itemsize__ = 40\n |  \n |  __mro__ = (<class 'fastcore.meta.NewChkMeta'>, <class 'fastcore.meta.F...\n |  \n |  __weakrefoffset__ = 368\n\n\n\n\nclass PrePostInitMeta(FixSigMeta)\n |  PrePostInitMeta(name, bases, dict)\n |  \n |  A metaclass that calls optional `__pre_init__` and `__post_init__` methods\n |  \n |  Method resolution order:\n |      PrePostInitMeta\n |      FixSigMeta\n |      builtins.type\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(cls, *args, **kwargs)\n |      Call self as a function.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from FixSigMeta:\n |  \n |  \n\n\n\n |  \n |  __new__(cls, name, bases, dict)\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.type:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __dir__(self, /)\n |      Specialized __dir__ implementation for types.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __instancecheck__(self, instance, /)\n |      Check if an object is an instance.\n |  \n |  \n\n\n\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __sizeof__(self, /)\n |      Return memory consumption of the type object.\n |  \n |  \n\n\n\n |  \n |  __subclasscheck__(self, subclass, /)\n |      Check if a class is a subclass.\n |  \n |  \n\n\n\n |  \n |  __subclasses__(self, /)\n |      Return a list of immediate subclasses.\n |  \n |  \n\n\n\n |  \n |  mro(self, /)\n |      Return a type's method resolution order.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.type:\n |  \n |  \n\n\n\n |  \n |  __prepare__(...) from builtins.type\n |      __prepare__() -> dict\n |      used to create the namespace for the class statement\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.type:\n |  \n |  __abstractmethods__\n |  \n |  __dict__\n |  \n |  __text_signature__\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from builtins.type:\n |  \n |  __base__ = <class 'fastcore.meta.FixSigMeta'>\n |      A metaclass that fixes the signature on classes that override `__new__`\n |  \n |  \n |  __bases__ = (<class 'fastcore.meta.FixSigMeta'>,)\n |  \n |  __basicsize__ = 880\n |  \n |  __dictoffset__ = 264\n |  \n |  __flags__ = 2148292096\n |  \n |  __itemsize__ = 40\n |  \n |  __mro__ = (<class 'fastcore.meta.PrePostInitMeta'>, <class 'fastcore.m...\n |  \n |  __weakrefoffset__ = 368"
  },
  {
    "objectID": "examples/fastcore/meta.html#functions",
    "href": "examples/fastcore/meta.html#functions",
    "title": "meta",
    "section": "Functions",
    "text": "Functions\n\nanno_dict\nanno_dict(f)\n    `__annotation__ dictionary with `empty` cast to `None`, returning empty if doesn't exist\n\n\ndelegates\ndelegates(to: function = None, keep=False, but: list = None)\n    Decorator: replace `**kwargs` in signature with params from `to`\n\n\nempty2none\nempty2none(p)\n    Replace `Parameter.empty` with `None`\n\n\nfuncs_kwargs\nfuncs_kwargs(as_method=False)\n    Replace methods in `cls._methods` with those from `kwargs`\n\n\nmethod\nmethod(f)\n    Mark `f` as a method\n\n\ntest_sig\ntest_sig(f, b)\n    Test the signature of an object\n\n\nuse_kwargs\nuse_kwargs(names, keep=False)\n    Decorator: replace `**kwargs` in signature with `names` params\n\n\nuse_kwargs_dict\nuse_kwargs_dict(keep=False, **kwargs)\n    Decorator: replace `**kwargs` in signature with `names` params"
  },
  {
    "objectID": "examples/fastcore/net.html",
    "href": "examples/fastcore/net.html",
    "title": "net",
    "section": "",
    "text": "urllib.error.HTTPError(urllib.error.URLError, urllib.response.addinfourl)\n    HTTP4xxClientError\n        HTTP400BadRequestError\n        HTTP401UnauthorizedError\n        HTTP402PaymentRequiredError\n        HTTP403ForbiddenError\n        HTTP404NotFoundError\n        HTTP405MethodNotAllowedError\n        HTTP406NotAcceptableError\n        HTTP407ProxyAuthRequiredError\n        HTTP408RequestTimeoutError\n        HTTP409ConflictError\n        HTTP410GoneError\n        HTTP411LengthRequiredError\n        HTTP412PreconditionFailedError\n        HTTP413PayloadTooLargeError\n        HTTP414URITooLongError\n        HTTP415UnsupportedMediaTypeError\n        HTTP416RangeNotSatisfiableError\n        HTTP417ExpectationFailedError\n        HTTP418AmAteapotError\n        HTTP421MisdirectedRequestError\n        HTTP422UnprocessableEntityError\n        HTTP423LockedError\n        HTTP424FailedDependencyError\n        HTTP425TooEarlyError\n        HTTP426UpgradeRequiredError\n        HTTP428PreconditionRequiredError\n        HTTP429TooManyRequestsError\n        HTTP431HeaderFieldsTooLargeError\n        HTTP451LegalReasonsError\n    HTTP5xxServerError\n\n\nclass HTTP400BadRequestError(HTTP4xxClientError)\n |  HTTP400BadRequestError(url, hdrs, fp, msg='Bad Request', code=400)\n |  \n |  Method resolution order:\n |      HTTP400BadRequestError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Bad Request', code=400)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP401UnauthorizedError(HTTP4xxClientError)\n |  HTTP401UnauthorizedError(url, hdrs, fp, msg='Unauthorized', code=401)\n |  \n |  Method resolution order:\n |      HTTP401UnauthorizedError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Unauthorized', code=401)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP402PaymentRequiredError(HTTP4xxClientError)\n |  HTTP402PaymentRequiredError(url, hdrs, fp, msg='Payment Required', code=402)\n |  \n |  Method resolution order:\n |      HTTP402PaymentRequiredError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Payment Required', code=402)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP403ForbiddenError(HTTP4xxClientError)\n |  HTTP403ForbiddenError(url, hdrs, fp, msg='Forbidden', code=403)\n |  \n |  Method resolution order:\n |      HTTP403ForbiddenError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Forbidden', code=403)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP404NotFoundError(HTTP4xxClientError)\n |  HTTP404NotFoundError(url, hdrs, fp, msg='Not Found', code=404)\n |  \n |  Method resolution order:\n |      HTTP404NotFoundError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Not Found', code=404)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP405MethodNotAllowedError(HTTP4xxClientError)\n |  HTTP405MethodNotAllowedError(url, hdrs, fp, msg='Method Not Allowed', code=405)\n |  \n |  Method resolution order:\n |      HTTP405MethodNotAllowedError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Method Not Allowed', code=405)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\n\nclass HTTP406NotAcceptableError(HTTP4xxClientError)\n |  HTTP406NotAcceptableError(url, hdrs, fp, msg='Not Acceptable', code=406)\n |  \n |  Method resolution order:\n |      HTTP406NotAcceptableError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n\n__init__ = _init(self, url, hdrs, fp, msg='Not Acceptable', code=406)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP407ProxyAuthRequiredError(HTTP4xxClientError)\n |  HTTP407ProxyAuthRequiredError(url, hdrs, fp, msg='Proxy Auth Required', code=407)\n |  \n |  Method resolution order:\n |      HTTP407ProxyAuthRequiredError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Proxy Auth Required', code=407)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP408RequestTimeoutError(HTTP4xxClientError)\n |  HTTP408RequestTimeoutError(url, hdrs, fp, msg='Request Timeout', code=408)\n |  \n |  Method resolution order:\n |      HTTP408RequestTimeoutError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Request Timeout', code=408)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP409ConflictError(HTTP4xxClientError)\n |  HTTP409ConflictError(url, hdrs, fp, msg='Conflict', code=409)\n |  \n |  Method resolution order:\n |      HTTP409ConflictError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Conflict', code=409)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP410GoneError(HTTP4xxClientError)\n |  HTTP410GoneError(url, hdrs, fp, msg='Gone', code=410)\n |  \n |  Method resolution order:\n |      HTTP410GoneError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Gone', code=410)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP411LengthRequiredError(HTTP4xxClientError)\n |  HTTP411LengthRequiredError(url, hdrs, fp, msg='Length Required', code=411)\n |  \n |  Method resolution order:\n |      HTTP411LengthRequiredError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Length Required', code=411)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP412PreconditionFailedError(HTTP4xxClientError)\n |  HTTP412PreconditionFailedError(url, hdrs, fp, msg='Precondition Failed', code=412)\n |  \n |  Method resolution order:\n |      HTTP412PreconditionFailedError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Precondition Failed', code=412)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP413PayloadTooLargeError(HTTP4xxClientError)\n |  HTTP413PayloadTooLargeError(url, hdrs, fp, msg='Payload Too Large', code=413)\n |  \n |  Method resolution order:\n |      HTTP413PayloadTooLargeError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Payload Too Large', code=413)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP414URITooLongError(HTTP4xxClientError)\n |  HTTP414URITooLongError(url, hdrs, fp, msg='URI Too Long', code=414)\n |  \n |  Method resolution order:\n |      HTTP414URITooLongError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='URI Too Long', code=414)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP415UnsupportedMediaTypeError(HTTP4xxClientError)\n |  HTTP415UnsupportedMediaTypeError(url, hdrs, fp, msg='Unsupported Media Type', code=415)\n |  \n |  Method resolution order:\n |      HTTP415UnsupportedMediaTypeError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Unsupported Media Type', code=415)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP416RangeNotSatisfiableError(HTTP4xxClientError)\n |  HTTP416RangeNotSatisfiableError(url, hdrs, fp, msg='Range Not Satisfiable', code=416)\n |  \n |  Method resolution order:\n |      HTTP416RangeNotSatisfiableError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Range Not Satisfiable', code=416)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP417ExpectationFailedError(HTTP4xxClientError)\n |  HTTP417ExpectationFailedError(url, hdrs, fp, msg='Expectation Failed', code=417)\n |  \n |  Method resolution order:\n |      HTTP417ExpectationFailedError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Expectation Failed', code=417)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP418AmAteapotError(HTTP4xxClientError)\n |  HTTP418AmAteapotError(url, hdrs, fp, msg='Am A teapot', code=418)\n |  \n |  Method resolution order:\n |      HTTP418AmAteapotError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Am A teapot', code=418)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP421MisdirectedRequestError(HTTP4xxClientError)\n |  HTTP421MisdirectedRequestError(url, hdrs, fp, msg='Misdirected Request', code=421)\n |  \n |  Method resolution order:\n |      HTTP421MisdirectedRequestError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Misdirected Request', code=421)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP422UnprocessableEntityError(HTTP4xxClientError)\n |  HTTP422UnprocessableEntityError(url, hdrs, fp, msg='Unprocessable Entity', code=422)\n |  \n |  Method resolution order:\n |      HTTP422UnprocessableEntityError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Unprocessable Entity', code=422)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP423LockedError(HTTP4xxClientError)\n |  HTTP423LockedError(url, hdrs, fp, msg='Locked', code=423)\n |  \n |  Method resolution order:\n |      HTTP423LockedError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Locked', code=423)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP424FailedDependencyError(HTTP4xxClientError)\n |  HTTP424FailedDependencyError(url, hdrs, fp, msg='Failed Dependency', code=424)\n |  \n |  Method resolution order:\n |      HTTP424FailedDependencyError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Failed Dependency', code=424)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP425TooEarlyError(HTTP4xxClientError)\n |  HTTP425TooEarlyError(url, hdrs, fp, msg='Too Early', code=425)\n |  \n |  Method resolution order:\n |      HTTP425TooEarlyError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Too Early', code=425)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP426UpgradeRequiredError(HTTP4xxClientError)\n |  HTTP426UpgradeRequiredError(url, hdrs, fp, msg='Upgrade Required', code=426)\n |  \n |  Method resolution order:\n |      HTTP426UpgradeRequiredError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Upgrade Required', code=426)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP428PreconditionRequiredError(HTTP4xxClientError)\n |  HTTP428PreconditionRequiredError(url, hdrs, fp, msg='Precondition Required', code=428)\n |  \n |  Method resolution order:\n |      HTTP428PreconditionRequiredError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Precondition Required', code=428)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP429TooManyRequestsError(HTTP4xxClientError)\n |  HTTP429TooManyRequestsError(url, hdrs, fp, msg='Too Many Requests', code=429)\n |  \n |  Method resolution order:\n |      HTTP429TooManyRequestsError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Too Many Requests', code=429)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP431HeaderFieldsTooLargeError(HTTP4xxClientError)\n |  HTTP431HeaderFieldsTooLargeError(url, hdrs, fp, msg='Header Fields Too Large', code=431)\n |  \n |  Method resolution order:\n |      HTTP431HeaderFieldsTooLargeError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Header Fields Too Large', code=431)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP451LegalReasonsError(HTTP4xxClientError)\n |  HTTP451LegalReasonsError(url, hdrs, fp, msg='Legal Reasons', code=451)\n |  \n |  Method resolution order:\n |      HTTP451LegalReasonsError\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n\n |  \n__init__ = _init(self, url, hdrs, fp, msg='Legal Reasons', code=451)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP4xxClientError(urllib.error.HTTPError)\n |  HTTP4xxClientError(url, code, msg, hdrs, fp)\n |  \n |  Base class for client exceptions (code 4xx) from `url*` functions\n |  \n |  Method resolution order:\n |      HTTP4xxClientError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __init__(self, url, code, msg, hdrs, fp)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it.\n\n\n\n\nclass HTTP5xxServerError(urllib.error.HTTPError)\n |  HTTP5xxServerError(url, code, msg, hdrs, fp)\n |  \n |  Base class for server exceptions (code 5xx) from `url*` functions\n |  \n |  Method resolution order:\n |      HTTP5xxServerError\n |      urllib.error.HTTPError\n |      urllib.error.URLError\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      urllib.response.addinfourl\n |      urllib.response.addinfo\n |      urllib.response.addbase\n |      tempfile._TemporaryFileWrapper\n |      builtins.object\n |  \n |  Methods inherited from urllib.error.HTTPError:\n |  \n |  \n\n\n |  \n |  __init__(self, url, code, msg, hdrs, fp)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.error.HTTPError:\n |  \n |  reason\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.HTTPError:\n |  \n |  headers\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from urllib.error.URLError:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\n\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  __setstate__(...)\n |  \n |  \n\n\n\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfourl:\n |  \n |  \n\n\n\n |  \n |  getcode(self)\n |  \n |  \n\n\n\n |  \n |  geturl(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from urllib.response.addinfourl:\n |  \n |  status\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addinfo:\n |  \n |  \n\n\n\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from urllib.response.addbase:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, type, value, traceback)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from tempfile._TemporaryFileWrapper:\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, name)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |      # iter() doesn't use __getattr__ to find the __iter__ method\n |  \n |  \n\n\n\n |  \n |  close(self)\n |      Close the temporary file, possibly deleting it."
  },
  {
    "objectID": "examples/fastcore/net.html#functions",
    "href": "examples/fastcore/net.html#functions",
    "title": "net",
    "section": "Functions",
    "text": "Functions\n\ndo_request\ndo_request(url, post=False, headers=None, **data)\n    Call GET or json-encoded POST on `url`, depending on `post`\n\n\nstart_client\nstart_client(port, host=None, dgram=False)\n    Create a `socket` client on `port`, with optional `host`, of type `dgram`\n\n\nstart_server\nstart_server(port, host=None, dgram=False, reuse_addr=True, n_queue=None)\n    Create a `socket` server on `port`, with optional `host`, of type `dgram`\n\n\nurlcheck\nurlcheck(url, timeout=10)\n    # %% ../nbs/03b_net.ipynb 23\n\n\nurlclean\nurlclean(url)\n    Remove fragment, params, and querystring from `url` if present\n\n\nurldest\nurldest(url, dest=None)\n    # %% ../nbs/03b_net.ipynb 27\n\n\nurljson\nurljson(url, data=None, timeout=None)\n    Retrieve `url` and decode json\n\n\nurlopen\nurlopen(url, data=None, headers=None, timeout=None, **kwargs)\n    Like `urllib.request.urlopen`, but first `urlwrap` the `url`, and encode `data`\n\n\nurlopener\nurlopener()\n    # %% ../nbs/03b_net.ipynb 14\n\n\nurlquote\nurlquote(url)\n    Update url's path with `urllib.parse.quote`\n\n\nurlread\nurlread(url, data=None, headers=None, decode=True, return_json=False, return_headers=False, timeout=None, **kwargs)\n    Retrieve `url`, using `data` dict or `kwargs` to `POST` if present\n\n\nurlrequest\nurlrequest(url, verb, headers=None, route=None, query=None, data=None, json_data=True)\n    `Request` for `url` with optional route params replaced by `route`, plus `query` string, and post `data`\n\n\nurlretrieve\nurlretrieve(url, filename=None, reporthook=None, data=None, timeout=None)\n    Same as `urllib.request.urlretrieve` but also works with `Request` objects\n\n\nurlsave\nurlsave(url, dest=None, reporthook=None, timeout=None)\n    Retrieve `url` and save based on its name\n\n\nurlsend\nurlsend(url, verb, headers=None, route=None, query=None, data=None, json_data=True, return_json=True, return_headers=False, debug=None)\n    Send request with `urlrequest`, converting result to json if `return_json`\n\n\nurlvalid\nurlvalid(x)\n    Test if `x` is a valid URL\n\n\nurlwrap\nurlwrap(url, data=None, headers=None)\n    Wrap `url` in a urllib `Request` with `urlquote`"
  },
  {
    "objectID": "examples/fastcore/dispatch.html",
    "href": "examples/fastcore/dispatch.html",
    "title": "dispatch",
    "section": "",
    "text": "builtins.object\n    DispatchReg\n    TypeDispatch\n\n\nclass DispatchReg(builtins.object)\n |  A global registry for `TypeDispatch` objects keyed by function name\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(self, f)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass TypeDispatch(builtins.object)\n |  TypeDispatch(funcs=(), bases=())\n |  \n |  Dictionary-like object; `__getitem__` matches keys of types using `issubclass`\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(self, *args, **kwargs)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  __get__(self, inst, owner)\n |  \n |  \n\n\n\n |  \n |  __getitem__(self, k)\n |      Find first matching type that is a super-class of `k`\n |  \n |  \n\n\n\n |  \n |  __init__(self, funcs=(), bases=())\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  add(self, f)\n |      Add type `t` and function `f`\n |  \n |  \n\n\n\n |  \n |  first(self)\n |      Get first function in ordered dict of type:func.\n |  \n |  \n\n\n\n |  \n |  returns(self, x)\n |      Get the return type of annotation of `x`.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"
  },
  {
    "objectID": "examples/fastcore/dispatch.html#functions",
    "href": "examples/fastcore/dispatch.html#functions",
    "title": "dispatch",
    "section": "Functions",
    "text": "Functions\ncast = (object,object) -> cast\n\ndefault_set_meta\ndefault_set_meta(self, x, as_copy=False)\n    Copy over `_meta` from `x` to `res`, if it's missing\n\n\nexplode_types\nexplode_types(o)\n    Return the type of `o`, potentially in nested dictionaries for thing that are listy\n\n\nlenient_issubclass\nlenient_issubclass(cls, types)\n    If possible return whether `cls` is a subclass of `types`, otherwise return False.\n\n\nretain_meta\nretain_meta(x, res, as_copy=False)\n    Call `res.set_meta(x)`, if it exists\n\n\nretain_type\nretain_type(new, old=None, typ=None, as_copy=False)\n    Cast `new` to type of `old` or `typ` if it's a superclass\n\n\nretain_types\nretain_types(new, old=None, typs=None)\n    Cast each item of `new` to type of matching item in `old` if it's a superclass\n\n\nsorted_topologically\nsorted_topologically(iterable, *, cmp=, reverse=False)\n    Return a new list containing all items from the iterable sorted topologically"
  },
  {
    "objectID": "examples/fastcore/all.html",
    "href": "examples/fastcore/all.html",
    "title": "all",
    "section": "",
    "text": "reduce(...)\n    reduce(function, sequence[, initial]) -> value\n    \n    Apply a function of two arguments cumulatively to the items of a sequence,\n    from left to right, so as to reduce the sequence to a single value.\n    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n    of the sequence in the calculation, and serves as a default when the\n    sequence is empty.\n\n\n\nwarn(message, category=None, stacklevel=1, source=None)\n    Issue a warning, or maybe ignore it or raise an exception."
  },
  {
    "objectID": "examples/fastcore/imports.html",
    "href": "examples/fastcore/imports.html",
    "title": "imports",
    "section": "",
    "text": "all_equal(a, b)\n    Compares whether `a` and `b` are the same length and have the same contents\n\n\n\nany_is_instance(t, *args)\n\n\n\narray_equal(a, b)\n\n\n\ndf_equal(a, b)\n\n\n\nequals(a, b)\n    Compares `a` and `b` for equality; supports sublists, tensors and arrays too\n\n\n\nin_colab()\n    Check if the code is running in Google Colaboratory\n\n\n\nin_ipython()\n    Check if code is running in some kind of IPython environment\n\n\n\nin_jupyter()\n    Check if the code is running in a jupyter notebook\n\n\n\nin_notebook()\n    Check if the code is running in a jupyter notebook\n\n\n\nipython_shell()\n    Same as `get_ipython` but returns `False` if not in IPython\n\n\n\nis_coll(o)\n    Test whether `o` is a collection (i.e. has a usable `len`)\n\n\n\nis_iter(o)\n    Test whether `o` can be used in a `for` loop\n\n\n\nisinstance_str(x, cls_name)\n    Like `isinstance`, except takes a type name instead of a type\n\n\n\nnoop(x=None, *args, **kwargs)\n    Do nothing\n\n\n\nnoops(self, x=None, *args, **kwargs)\n    Do nothing (method)\n\n\n\nreduce(...)\n    reduce(function, sequence[, initial]) -> value\n    \n    Apply a function of two arguments cumulatively to the items of a sequence,\n    from left to right, so as to reduce the sequence to a single value.\n    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n    of the sequence in the calculation, and serves as a default when the\n    sequence is empty.\n\n\n\nremove_prefix(text, prefix)\n    Temporary until py39 is a prereq\n\n\n\nremove_suffix(text, suffix)\n    Temporary until py39 is a prereq\n\n\n\nwarn(message, category=None, stacklevel=1, source=None)\n    Issue a warning, or maybe ignore it or raise an exception."
  },
  {
    "objectID": "examples/fastcore/nb_imports.html",
    "href": "examples/fastcore/nb_imports.html",
    "title": "nb_imports",
    "section": "",
    "text": "array(...)\n    array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0,\n          like=None)\n    \n    Create an array.\n    \n    Parameters\n    ----------\n    object : array_like\n        An array, any object exposing the array interface, an object whose\n        __array__ method returns an array, or any (nested) sequence.\n    dtype : data-type, optional\n        The desired data-type for the array.  If not given, then the type will\n        be determined as the minimum type required to hold the objects in the\n        sequence.\n    copy : bool, optional\n        If true (default), then the object is copied.  Otherwise, a copy will\n        only be made if __array__ returns a copy, if obj is a nested sequence,\n        or if a copy is needed to satisfy any of the other requirements\n        (`dtype`, `order`, etc.).\n    order : {'K', 'A', 'C', 'F'}, optional\n        Specify the memory layout of the array. If object is not an array, the\n        newly created array will be in C order (row major) unless 'F' is\n        specified, in which case it will be in Fortran order (column major).\n        If object is an array the following holds.\n    \n        ===== ========= ===================================================\n        order  no copy                     copy=True\n        ===== ========= ===================================================\n        'K'   unchanged F & C order preserved, otherwise most similar order\n        'A'   unchanged F order if input is F and not C, otherwise C order\n        'C'   C order   C order\n        'F'   F order   F order\n        ===== ========= ===================================================\n    \n        When ``copy=False`` and a copy is made for other reasons, the result is\n        the same as if ``copy=True``, with some exceptions for 'A', see the\n        Notes section. The default order is 'K'.\n    subok : bool, optional\n        If True, then sub-classes will be passed-through, otherwise\n        the returned array will be forced to be a base-class array (default).\n    ndmin : int, optional\n        Specifies the minimum number of dimensions that the resulting\n        array should have.  Ones will be pre-pended to the shape as\n        needed to meet this requirement.\n    like : array_like\n        Reference object to allow the creation of arrays which are not\n        NumPy arrays. If an array-like passed in as ``like`` supports\n        the ``__array_function__`` protocol, the result will be defined\n        by it. In this case, it ensures the creation of an array object\n        compatible with that passed in via this argument.\n    \n        .. versionadded:: 1.20.0\n    \n    Returns\n    -------\n    out : ndarray\n        An array object satisfying the specified requirements.\n    \n    See Also\n    --------\n    empty_like : Return an empty array with shape and type of input.\n    ones_like : Return an array of ones with shape and type of input.\n    zeros_like : Return an array of zeros with shape and type of input.\n    full_like : Return a new array with shape of input filled with value.\n    empty : Return a new uninitialized array.\n    ones : Return a new array setting values to one.\n    zeros : Return a new array setting values to zero.\n    full : Return a new array of given shape filled with value.\n    \n    \n    Notes\n    -----\n    When order is 'A' and `object` is an array in neither 'C' nor 'F' order,\n    and a copy is forced by a change in dtype, then the order of the result is\n    not necessarily 'C' as expected. This is likely a bug.\n    \n    Examples\n    --------\n    >>> np.array([1, 2, 3])\n    array([1, 2, 3])\n    \n    Upcasting:\n    \n    >>> np.array([1, 2, 3.0])\n    array([ 1.,  2.,  3.])\n    \n    More than one dimension:\n    \n    >>> np.array([[1, 2], [3, 4]])\n    array([[1, 2],\n           [3, 4]])\n    \n    Minimum dimensions 2:\n    \n    >>> np.array([1, 2, 3], ndmin=2)\n    array([[1, 2, 3]])\n    \n    Type provided:\n    \n    >>> np.array([1, 2, 3], dtype=complex)\n    array([ 1.+0.j,  2.+0.j,  3.+0.j])\n    \n    Data-type consisting of more than one element:\n    \n    >>> x = np.array([(1,2),(3,4)],dtype=[('a','<i4'),('b','<i4')])\n    >>> x['a']\n    array([1, 3])\n    \n    Creating an array from sub-classes:\n    \n    >>> np.array(np.mat('1 2; 3 4'))\n    array([[1, 2],\n           [3, 4]])\n    \n    >>> np.array(np.mat('1 2; 3 4'), subok=True)\n    matrix([[1, 2],\n            [3, 4]])\n\n\n\nsleep(...)\n    sleep(seconds)\n    \n    Delay execution for a given number of seconds.  The argument may be\n    a floating point number for subsecond precision."
  },
  {
    "objectID": "examples/fastcore/docscrape.html",
    "href": "examples/fastcore/docscrape.html",
    "title": "docscrape",
    "section": "",
    "text": "builtins.tuple(builtins.object)\n    Parameter\ncollections.abc.Mapping(collections.abc.Collection)\n    NumpyDocString\n\n\nclass NumpyDocString(collections.abc.Mapping)\n |  NumpyDocString(docstring, config=None)\n |  \n |  Parses a numpydoc string to an abstract representation\n |  \n |  Method resolution order:\n |      NumpyDocString\n |      collections.abc.Mapping\n |      collections.abc.Collection\n |      collections.abc.Sized\n |      collections.abc.Iterable\n |      collections.abc.Container\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __getitem__(self, key)\n |  \n |  \n\n\n\n |  \n |  __init__(self, docstring, config=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |  \n |  \n\n\n\n |  \n |  __len__(self)\n |  \n |  \n\n\n\n |  \n |  __setitem__(self, key, val)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __abstractmethods__ = frozenset()\n |  \n |  sections = {'Extended': [], 'Parameters': [], 'Returns': [], 'Summary'...\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from collections.abc.Mapping:\n |  \n |  \n\n\n\n |  \n |  __contains__(self, key)\n |  \n |  \n\n\n\n |  \n |  __eq__(self, other)\n |      Return self==value.\n |  \n |  \n\n\n\n |  \n |  get(self, key, default=None)\n |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\n |  \n |  \n\n\n\n |  \n |  items(self)\n |      D.items() -> a set-like object providing a view on D's items\n |  \n |  \n\n\n\n |  \n |  keys(self)\n |      D.keys() -> a set-like object providing a view on D's keys\n |  \n |  \n\n\n\n |  \n |  values(self)\n |      D.values() -> an object providing a view on D's values\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from collections.abc.Mapping:\n |  \n |  __hash__ = None\n |  \n |  __reversed__ = None\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from collections.abc.Collection:\n |  \n |  \n\n\n\n |  \n |  __subclasshook__(C) from abc.ABCMeta\n |      Abstract classes can override this to customize issubclass().\n |      \n |      This is invoked early on by abc.ABCMeta.__subclasscheck__().\n |      It should return True, False or NotImplemented.  If it returns\n |      NotImplemented, the normal algorithm is used.  Otherwise, it\n |      overrides the normal algorithm (and the outcome is cached).\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from collections.abc.Iterable:\n |  \n |  \n\n\n\n |  \n |  __class_getitem__ = GenericAlias(...) from abc.ABCMeta\n |      Represent a PEP 585 generic type\n |      \n |      E.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,).\n\n\n\n\nclass Parameter(builtins.tuple)\n |  Parameter(name, type, desc)\n |  \n |  Parameter(name, type, desc)\n |  \n |  Method resolution order:\n |      Parameter\n |      builtins.tuple\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __getnewargs__(self)\n |      Return self as a plain tuple.  Used by copy and pickle.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return a nicely formatted representation string\n |  \n |  \n\n\n\n |  \n |  _asdict(self)\n |      Return a new dict which maps field names to their values.\n |  \n |  \n\n\n\n |  \n |  _replace(self, /, **kwds)\n |      Return a new Parameter object replacing specified fields with new values\n |  \n |  ----------------------------------------------------------------------\n |  Class methods defined here:\n |  \n |  \n\n\n\n |  \n |  _make(iterable) from builtins.type\n |      Make a new Parameter object from a sequence or iterable\n |  \n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |  \n |  \n\n\n\n |  \n |  __new__(_cls, name, type, desc)\n |      Create new instance of Parameter(name, type, desc)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  name\n |      Alias for field number 0\n |  \n |  type\n |      Alias for field number 1\n |  \n |  desc\n |      Alias for field number 2\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  _field_defaults = {}\n |  \n |  _fields = ('name', 'type', 'desc')\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.tuple:\n |  \n |  \n\n\n\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  \n\n\n\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  \n\n\n\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  \n\n\n\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getitem__(self, key, /)\n |      Return self[key].\n |  \n |  \n\n\n\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  \n\n\n\n |  \n |  __hash__(self, /)\n |      Return hash(self).\n |  \n |  \n\n\n\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  \n\n\n\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  \n\n\n\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  \n\n\n\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  \n\n\n\n |  \n |  __mul__(self, value, /)\n |      Return self*value.\n |  \n |  \n\n\n\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  \n\n\n\n |  \n |  __rmul__(self, value, /)\n |      Return value*self.\n |  \n |  \n\n\n\n |  \n |  count(self, value, /)\n |      Return number of occurrences of value.\n |  \n |  \n\n\n\n |  \n |  index(self, value, start=0, stop=9223372036854775807, /)\n |      Return first index of value.\n |      \n |      Raises ValueError if the value is not present.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.tuple:\n |  \n |  \n\n\n\n |  \n |  __class_getitem__(...) from builtins.type\n |      See PEP 585"
  },
  {
    "objectID": "examples/fastcore/docscrape.html#functions",
    "href": "examples/fastcore/docscrape.html#functions",
    "title": "docscrape",
    "section": "Functions",
    "text": "Functions\n\ndedent_lines\ndedent_lines(lines, split=True)\n    Deindent a list of lines maximally"
  },
  {
    "objectID": "examples/fastcore/utils.html",
    "href": "examples/fastcore/utils.html",
    "title": "utils",
    "section": "",
    "text": "reduce(...)\n    reduce(function, sequence[, initial]) -> value\n    \n    Apply a function of two arguments cumulatively to the items of a sequence,\n    from left to right, so as to reduce the sequence to a single value.\n    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n    of the sequence in the calculation, and serves as a default when the\n    sequence is empty.\n\n\n\nwarn(message, category=None, stacklevel=1, source=None)\n    Issue a warning, or maybe ignore it or raise an exception."
  },
  {
    "objectID": "examples/fastcore/xtras.html",
    "href": "examples/fastcore/xtras.html",
    "title": "xtras",
    "section": "",
    "text": "builtins.object\n    EventTimer\n    IterLen\n        ReindexCollection(fastcore.basics.GetAttr, IterLen)\nfastcore.basics.GetAttr(builtins.object)\n    ContextManagers\n    ReindexCollection(fastcore.basics.GetAttr, IterLen)\nstring.Formatter(builtins.object)\n    PartialFormatter\n\n\nclass ContextManagers(fastcore.basics.GetAttr)\n |  ContextManagers(mgrs)\n |  \n |  Wrapper for `contextlib.ExitStack` which enters a collection of context managers\n |  \n |  Method resolution order:\n |      ContextManagers\n |      fastcore.basics.GetAttr\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, *args, **kwargs)\n |  \n |  \n\n\n\n |  \n |  __init__(self, mgrs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from fastcore.basics.GetAttr:\n |  \n |  \n\n\n\n |  \n |  __dir__(self)\n |      Default dir() implementation.\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, k)\n |  \n |  \n\n\n\n |  \n |  __setstate__(self, data)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from fastcore.basics.GetAttr:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass EventTimer(builtins.object)\n |  EventTimer(store=5, span=60)\n |  \n |  An event timer with history of `store` items of time `span`\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __init__(self, store=5, span=60)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  add(self, n=1)\n |      Record `n` events\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties defined here:\n |  \n |  duration\n |  \n |  freq\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass IterLen(builtins.object)\n |  Base class to add iteration to anything supporting `__len__` and `__getitem__`\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __iter__(self)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass PartialFormatter(string.Formatter)\n |  A `string.Formatter` that doesn't error on missing fields, and tracks missing fields and unused args\n |  \n |  Method resolution order:\n |      PartialFormatter\n |      string.Formatter\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  check_unused_args(self, used, args, kwargs)\n |  \n |  \n\n\n\n |  \n |  get_field(self, nm, args, kwargs)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from string.Formatter:\n |  \n |  \n\n\n\n |  \n |  convert_field(self, value, conversion)\n |  \n |  \n\n\n\n |  \n |  format(self, format_string, /, *args, **kwargs)\n |  \n |  \n\n\n\n |  \n |  format_field(self, value, format_spec)\n |  \n |  \n\n\n\n |  \n |  get_value(self, key, args, kwargs)\n |  \n |  \n\n\n\n |  \n |  parse(self, format_string)\n |      # returns an iterable that contains tuples of the form:\n |      # (literal_text, field_name, format_spec, conversion)\n |      # literal_text can be zero length\n |      # field_name can be None, in which case there's no\n |      #  object to format and output\n |      # if field_name is not None, it is looked up, formatted\n |      #  with format_spec and conversion and then used\n |  \n |  \n\n\n\n |  \n |  vformat(self, format_string, args, kwargs)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from string.Formatter:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass ReindexCollection(fastcore.basics.GetAttr, IterLen)\n |  ReindexCollection(coll, idxs=None, cache=None, tfm=<function noop at 0x10c634ee0>)\n |  \n |  Reindexes collection `coll` with indices `idxs` and optional LRU cache of size `cache`\n |  \n |  Method resolution order:\n |      ReindexCollection\n |      fastcore.basics.GetAttr\n |      IterLen\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __getitem__(self, i)\n |  \n |  \n\n\n\n |  \n |  __getstate__(self)\n |  \n |  \n\n\n\n |  \n |  __init__(self, coll, idxs=None, cache=None, tfm=<function noop at 0x10c634ee0>)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __len__(self)\n |  \n |  \n\n\n\n |  \n |  __setstate__(self, s)\n |  \n |  \n\n\n\n |  \n |  cache_clear(self)\n |      Clear LRU cache\n |  \n |  \n\n\n\n |  \n |  reindex(self, idxs)\n |      Replace `self.idxs` with idxs\n |  \n |  \n\n\n\n |  \n |  shuffle(self)\n |      Randomly shuffle indices\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from fastcore.basics.GetAttr:\n |  \n |  \n\n\n\n |  \n |  __dir__(self)\n |      Default dir() implementation.\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, k)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from fastcore.basics.GetAttr:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from IterLen:\n |  \n |  \n\n\n\n |  \n |  __iter__(self)"
  },
  {
    "objectID": "examples/fastcore/xtras.html#functions",
    "href": "examples/fastcore/xtras.html#functions",
    "title": "xtras",
    "section": "Functions",
    "text": "Functions\n\nautostart\nautostart(g)\n    Decorator that automatically starts a generator\n\n\nbunzip\nbunzip(fn)\n    bunzip `fn`, raising exception if output already exists\n\n\nconsole_help\nconsole_help(libname: 'str')\n    Show help for all console scripts from `libname`\n\n\ndict2obj\ndict2obj(d, list_func=, dict_func=)\n    Convert (possibly nested) dicts (or lists of dicts) to `AttrDict`\n\n\ndumps\ndumps(obj, **kw)\n    Same as `json.dumps`, but uses `ujson` if available\n\n\nget_source_link\nget_source_link(func)\n    Return link to `func` in source code\n\n\nglobtastic\nglobtastic(path: 'Path | str', recursive: 'bool' = True, symlinks: 'bool' = True, file_glob: 'str' = None, file_re: 'str' = None, folder_re: 'str' = None, skip_file_glob: 'str' = None, skip_file_re: 'str' = None, skip_folder_re: 'str' = None, func: 'callable' = , ret_folders: 'bool' = False) -> 'L'\n    A more powerful `glob`, including regex matches, symlink handling, and skip parameters\n\n\nimage_size\nimage_size(fn)\n    Tuple of (w,h) for png, gif, or jpg; `None` otherwise\n\n\nis_listy\nis_listy(x)\n    `isinstance(x, (tuple,list,L,slice,Generator))`\n\n\njoin_path_file\njoin_path_file(file, path, ext='')\n    Return `path/file` if file is a string or a `Path`, file otherwise\n\n\nload_pickle\nload_pickle(fn)\n    Load a pickle file from a file name or opened file\n\n\nloads\nloads(s, **kw)\n    Same as `json.loads`, but handles `None`\n\n\nloads_multi\nloads_multi(s: 'str')\n    Generator of >=0 decoded json dicts, possibly with non-json ignored text at start and end\n\n\nlocal2utc\nlocal2utc(dt: 'datetime') -> 'datetime'\n    Convert `dt` from local to UTC time\n\n\nmapped\nmapped(f, it)\n    map `f` over `it`, unless it's not listy, in which case return `f(it)`\n\n\nmaybe_open\nmaybe_open(f, mode='r', **kwargs)\n    Context manager: open `f` if it is a path (and close on exit)\n\n\nmkdir\nmkdir(path, exist_ok=False, parents=False, overwrite=False, **kwargs)\n    Creates and returns a directory defined by `path`, optionally removing previous existing directory if `overwrite` is `True`\n\n\nmodified_env\nmodified_env(*delete, **replace)\n    Context manager temporarily modifying `os.environ` by deleting `delete` and replacing `replace`\n\n\nmodify_exception\nmodify_exception(e: 'Exception', msg: 'str' = None, replace: 'bool' = False) -> 'Exception'\n    Modifies `e` with a custom message attached\n\n\nobj2dict\nobj2dict(d)\n    Convert (possibly nested) AttrDicts (or lists of AttrDicts) to `dict`\n\n\nopen_file\nopen_file(fn, mode='r', **kwargs)\n    Open a file, with optional compression if gz or bz2 suffix\n\n\npartial_format\npartial_format(s: 'str', **kwargs)\n    string format `s`, ignoring missing field errors, returning missing and extra fields\n\n\nrepo_details\nrepo_details(url)\n    Tuple of `owner,name` from ssh or https git repo `url`\n\n\nrepr_dict\nrepr_dict(d)\n    Print nested dicts and lists, such as returned by `dict2obj`\n\n\nround_multiple\nround_multiple(x, mult, round_down=False)\n    Round `x` to nearest multiple of `mult`\n\n\nrun\nrun(cmd, *rest, same_in_win=False, ignore_ex=False, as_bytes=False, stderr=False)\n    Pass `cmd` (splitting with `shlex` if string) to `subprocess.run`; return `stdout`; raise `IOError` if fails\n\n\nsave_pickle\nsave_pickle(fn, o)\n    Save a pickle file, to a file name or opened file\n\n\nset_num_threads\nset_num_threads(nt)\n    Get numpy (and others) to use `nt` threads\n\n\nshufflish\nshufflish(x, pct=0.04)\n    Randomly relocate items of `x` up to `pct` of `len(x)` from their starting location\n\n\nsparkline\nsparkline(data, mn=None, mx=None, empty_zero=False)\n    Sparkline for `data`, with `None`s (and zero, if `empty_zero`) shown as empty column\n\n\nstringfmt_names\nstringfmt_names(s: 'str') -> 'list'\n    Unique brace-delimited names in `s`\n\n\ntrace\ntrace(f)\n    Add `set_trace` to an existing function `f`\n\n\ntruncstr\ntruncstr(s: 'str', maxlen: 'int', suf: 'str' = '…', space='') -> 'str'\n    Truncate `s` to length `maxlen`, adding suffix `suf` if truncated\n\n\nuntar_dir\nuntar_dir(fname, dest, rename=False, overwrite=False)\n    untar `file` into `dest`, creating a directory if the root contains more than one item\n\n\nutc2local\nutc2local(dt: 'datetime') -> 'datetime'\n    Convert `dt` from UTC to local time\n\n\nwalk\nwalk(path: 'Path | str', symlinks: 'bool' = True, keep_file: 'callable' = , keep_folder: 'callable' = , skip_folder: 'callable' = , func: 'callable' = , ret_folders: 'bool' = False)\n    Generator version of `os.walk`, using functions to filter files and folders"
  },
  {
    "objectID": "examples/fastcore/script.html",
    "href": "examples/fastcore/script.html",
    "title": "script",
    "section": "",
    "text": "builtins.object\n    Param\n\n\nclass Param(builtins.object)\n |  Param(help='', type=None, opt=True, action=None, nargs=None, const=None, choices=None, required=None, default=None)\n |  \n |  A parameter in a function used in `anno_parser` or `call_parse`\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __init__(self, help='', type=None, opt=True, action=None, nargs=None, const=None, choices=None, required=None, default=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  set_default(self, d)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties defined here:\n |  \n |  kwargs\n |  \n |  pre\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"
  },
  {
    "objectID": "examples/fastcore/script.html#functions",
    "href": "examples/fastcore/script.html#functions",
    "title": "script",
    "section": "Functions",
    "text": "Functions\n\nanno_parser\nanno_parser(func, prog: str = None)\n    Look at params (annotated with `Param`) in func and return an `ArgumentParser`\n\n\nargs_from_prog\nargs_from_prog(func, prog)\n    Extract args from `prog`\n\n\nbool_arg\nbool_arg(v)\n    Use as `type` for `Param` to get `bool` behavior\n\n\ncall_parse\ncall_parse(func=None, nested=False)\n    Decorator to create a simple CLI from `func` using `anno_parser`\n\n\nclean_type_str\nclean_type_str(x: str)\n    # %% ../nbs/08_script.ipynb 18\n\n\nstore_false\nstore_false()\n    Placeholder to pass to `Param` for `store_false` action\n\n\nstore_true\nstore_true()\n    Placeholder to pass to `Param` for `store_true` action"
  },
  {
    "objectID": "examples/fastcore/basics.html",
    "href": "examples/fastcore/basics.html",
    "title": "basics",
    "section": "",
    "text": "builtins.dict(builtins.object)\n    AttrDict\nbuiltins.float(builtins.object)\n    Float(builtins.float, ShowPrint)\nbuiltins.int(builtins.object)\n    Int(builtins.int, ShowPrint)\nbuiltins.object\n    GetAttr\n    GetAttrBase\n    Inf\n    ShowPrint\n        Float(builtins.float, ShowPrint)\n        Int(builtins.int, ShowPrint)\n        Str(builtins.str, ShowPrint)\n    Stateful\n    bind\n    ignore_exceptions\nbuiltins.str(builtins.object)\n    PrettyString\n    Str(builtins.str, ShowPrint)\n    StrEnum(builtins.str, ImportEnum)\nbuiltins.tuple(builtins.object)\n    fastuple\nenum.Enum(builtins.object)\n    ImportEnum\n        StrEnum(builtins.str, ImportEnum)\n\n\nclass AttrDict(builtins.dict)\n |  `dict` subclass that also provides access to keys as attrs\n |  \n |  Method resolution order:\n |      AttrDict\n |      builtins.dict\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __dir__(self)\n |      Default dir() implementation.\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, k)\n |  \n |  \n\n\n\n |  \n |  __setattr__(self, k, v)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\n\n |  \n |  copy(self)\n |      D.copy() -> a shallow copy of D\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.dict:\n |  \n |  \n\n\n\n |  \n |  __contains__(self, key, /)\n |      True if the dictionary has the specified key, else False.\n |  \n |  \n\n\n\n |  \n |  __delitem__(self, key, /)\n |      Delete self[key].\n |  \n |  \n\n\n\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  \n\n\n\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getitem__(...)\n |      x.__getitem__(y) <==> x[y]\n |  \n |  \n\n\n\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  \n\n\n\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __ior__(self, value, /)\n |      Return self|=value.\n |  \n |  \n\n\n\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  \n\n\n\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  \n\n\n\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  \n\n\n\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  \n\n\n\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  \n\n\n\n |  \n |  __or__(self, value, /)\n |      Return self|value.\n |  \n |  \n\n\n\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __reversed__(self, /)\n |      Return a reverse iterator over the dict keys.\n |  \n |  \n\n\n\n |  \n |  __ror__(self, value, /)\n |      Return value|self.\n |  \n |  \n\n\n\n |  \n |  __setitem__(self, key, value, /)\n |      Set self[key] to value.\n |  \n |  \n\n\n\n |  \n |  __sizeof__(...)\n |      D.__sizeof__() -> size of D in memory, in bytes\n |  \n |  \n\n\n\n |  \n |  clear(...)\n |      D.clear() -> None.  Remove all items from D.\n |  \n |  \n\n\n\n |  \n |  get(self, key, default=None, /)\n |      Return the value for key if key is in the dictionary, else default.\n |  \n |  \n\n\n\n |  \n |  items(...)\n |      D.items() -> a set-like object providing a view on D's items\n |  \n |  \n\n\n\n |  \n |  keys(...)\n |      D.keys() -> a set-like object providing a view on D's keys\n |  \n |  \n\n\n\n |  \n |  pop(...)\n |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n |      \n |      If key is not found, default is returned if given, otherwise KeyError is raised\n |  \n |  \n\n\n\n |  \n |  popitem(self, /)\n |      Remove and return a (key, value) pair as a 2-tuple.\n |      \n |      Pairs are returned in LIFO (last-in, first-out) order.\n |      Raises KeyError if the dict is empty.\n |  \n |  \n\n\n\n |  \n |  setdefault(self, key, default=None, /)\n |      Insert key with a value of default if key is not in the dictionary.\n |      \n |      Return the value for key if key is in the dictionary, else default.\n |  \n |  \n\n\n\n |  \n |  update(...)\n |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\n |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\n |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\n |      In either case, this is followed by: for k in F:  D[k] = F[k]\n |  \n |  \n\n\n\n |  \n |  values(...)\n |      D.values() -> an object providing a view on D's values\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.dict:\n |  \n |  \n\n\n\n |  \n |  __class_getitem__(...) from builtins.type\n |      See PEP 585\n |  \n |  \n\n\n\n |  \n |  fromkeys(iterable, value=None, /) from builtins.type\n |      Create a new dictionary with keys from iterable and values set to value.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.dict:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from builtins.dict:\n |  \n |  __hash__ = None\n\n\n\n\nclass Float(builtins.float, ShowPrint)\n |  Float(x=0, /)\n |  \n |  An extensible `float`\n |  \n |  Method resolution order:\n |      Float\n |      builtins.float\n |      ShowPrint\n |      builtins.object\n |  \n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.float:\n |  \n |  \n\n\n |  \n |  __abs__(self, /)\n |      abs(self)\n |  \n |  \n\n\n\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  \n\n\n\n |  \n |  __bool__(self, /)\n |      True if self else False\n |  \n |  \n\n\n\n |  \n |  __ceil__(self, /)\n |      Return the ceiling as an Integral.\n |  \n |  \n\n\n\n |  \n |  __divmod__(self, value, /)\n |      Return divmod(self, value).\n |  \n |  \n\n\n\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  \n\n\n\n |  \n |  __float__(self, /)\n |      float(self)\n |  \n |  \n\n\n\n |  \n |  __floor__(self, /)\n |      Return the floor as an Integral.\n |  \n |  \n\n\n\n |  \n |  __floordiv__(self, value, /)\n |      Return self//value.\n |  \n |  \n\n\n\n |  \n |  __format__(self, format_spec, /)\n |      Formats the float according to format_spec.\n |  \n |  \n\n\n\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getnewargs__(self, /)\n |  \n |  \n\n\n\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  \n\n\n\n |  \n |  __hash__(self, /)\n |      Return hash(self).\n |  \n |  \n\n\n\n |  \n |  __int__(self, /)\n |      int(self)\n |  \n |  \n\n\n\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  \n\n\n\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  \n\n\n\n |  \n |  __mod__(self, value, /)\n |      Return self%value.\n |  \n |  \n\n\n\n |  \n |  __mul__(self, value, /)\n |      Return self*value.\n |  \n |  \n\n\n\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  \n\n\n\n |  \n |  __neg__(self, /)\n |      -self\n |  \n |  \n\n\n\n |  \n |  __pos__(self, /)\n |      +self\n |  \n |  \n\n\n\n |  \n |  __pow__(self, value, mod=None, /)\n |      Return pow(self, value, mod).\n |  \n |  \n\n\n\n |  \n |  __radd__(self, value, /)\n |      Return value+self.\n |  \n |  \n\n\n\n |  \n |  __rdivmod__(self, value, /)\n |      Return divmod(value, self).\n |  \n |  \n\n\n\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __rfloordiv__(self, value, /)\n |      Return value//self.\n |  \n |  \n\n\n\n |  \n |  __rmod__(self, value, /)\n |      Return value%self.\n |  \n |  \n\n\n\n |  \n |  __rmul__(self, value, /)\n |      Return value*self.\n |  \n |  \n\n\n\n |  \n |  __round__(self, ndigits=None, /)\n |      Return the Integral closest to x, rounding half toward even.\n |      \n |      When an argument is passed, work like built-in round(x, ndigits).\n |  \n |  \n\n\n\n |  \n |  __rpow__(self, value, mod=None, /)\n |      Return pow(value, self, mod).\n |  \n |  \n\n\n\n |  \n |  __rsub__(self, value, /)\n |      Return value-self.\n |  \n |  \n\n\n\n |  \n |  __rtruediv__(self, value, /)\n |      Return value/self.\n |  \n |  \n\n\n\n |  \n |  __sub__(self, value, /)\n |      Return self-value.\n |  \n |  \n\n\n\n |  \n |  __truediv__(self, value, /)\n |      Return self/value.\n |  \n |  \n\n\n\n |  \n |  __trunc__(self, /)\n |      Return the Integral closest to x between 0 and x.\n |  \n |  \n\n\n\n |  \n |  as_integer_ratio(self, /)\n |      Return integer ratio.\n |      \n |      Return a pair of integers, whose ratio is exactly equal to the original float\n |      and with a positive denominator.\n |      \n |      Raise OverflowError on infinities and a ValueError on NaNs.\n |      \n |      >>> (10.0).as_integer_ratio()\n |      (10, 1)\n |      >>> (0.0).as_integer_ratio()\n |      (0, 1)\n |      >>> (-.25).as_integer_ratio()\n |      (-1, 4)\n |  \n |  \n\n\n\n |  \n |  conjugate(self, /)\n |      Return self, the complex conjugate of any float.\n |  \n |  \n\n\n\n |  \n |  hex(self, /)\n |      Return a hexadecimal representation of a floating-point number.\n |      \n |      >>> (-0.1).hex()\n |      '-0x1.999999999999ap-4'\n |      >>> 3.14159.hex()\n |      '0x1.921f9f01b866ep+1'\n |  \n |  \n\n\n\n |  \n |  is_integer(self, /)\n |      Return True if the float is an integer.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.float:\n |  \n |  \n\n\n\n |  \n |  __getformat__(typestr, /) from builtins.type\n |      You probably don't want to use this function.\n |      \n |        typestr\n |          Must be 'double' or 'float'.\n |      \n |      It exists mainly to be used in Python's test suite.\n |      \n |      This function returns whichever of 'unknown', 'IEEE, big-endian' or 'IEEE,\n |      little-endian' best describes the format of floating point numbers used by the\n |      C type named by typestr.\n |  \n |  \n\n\n\n |  \n |  __setformat__(typestr, fmt, /) from builtins.type\n |      You probably don't want to use this function.\n |      \n |        typestr\n |          Must be 'double' or 'float'.\n |        fmt\n |          Must be one of 'unknown', 'IEEE, big-endian' or 'IEEE, little-endian',\n |          and in addition can only be one of the latter two if it appears to\n |          match the underlying C reality.\n |      \n |      It exists mainly to be used in Python's test suite.\n |      \n |      Override the automatic determination of C-level floating point type.\n |      This affects how floats are converted to and from binary strings.\n |  \n |  \n\n\n\n |  \n |  fromhex(string, /) from builtins.type\n |      Create a floating-point number from a hexadecimal string.\n |      \n |      >>> float.fromhex('0x1.ffffp10')\n |      2047.984375\n |      >>> float.fromhex('-0x1p-1074')\n |      -5e-324\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.float:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.float:\n |  \n |  imag\n |      the imaginary part of a complex number\n |  \n |  real\n |      the real part of a complex number\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from ShowPrint:\n |  \n |  \n\n\n\n |  \n |  show(self, *args, **kwargs)\n\n\n\n\nclass GetAttr(builtins.object)\n |  Inherit from this to have all attr accesses in `self._xtra` passed down to `self.default`\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __dir__(self)\n |      Default dir() implementation.\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, k)\n |  \n |  \n\n\n\n |  \n |  __setstate__(self, data)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass GetAttrBase(builtins.object)\n |  Basic delegation of `__getattr__` and `__dir__`\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __dir__(self)\n |      Default dir() implementation.\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, k)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass ImportEnum(enum.Enum)\n |  ImportEnum(value, names=None, *, module=None, qualname=None, type=None, start=1)\n |  \n |  An `Enum` that can have its values imported\n |  \n |  Method resolution order:\n |      ImportEnum\n |      enum.Enum\n |      builtins.object\n |  \n |  Data descriptors inherited from enum.Enum:\n |  \n |  name\n |      The name of the Enum member.\n |  \n |  value\n |      The value of the Enum member.\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from enum.EnumMeta:\n |  \n |  __members__\n |      Returns a mapping of member name->value.\n |      \n |      This mapping lists all enum members, including aliases. Note that this\n |      is a read-only view of the internal mapping.\n\n\n\nclass Inf(builtins.object)\n |  Infinite lists\n |  \n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nclass Int(builtins.int, ShowPrint)\n |  An extensible `int`\n |  \n |  Method resolution order:\n |      Int\n |      builtins.int\n |      ShowPrint\n |      builtins.object\n |  \n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.int:\n |  \n |  \n\n\n |  \n |  __abs__(self, /)\n |      abs(self)\n |  \n |  \n\n\n\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  \n\n\n\n |  \n |  __and__(self, value, /)\n |      Return self&value.\n |  \n |  \n\n\n\n |  \n |  __bool__(self, /)\n |      True if self else False\n |  \n |  \n\n\n\n |  \n |  __ceil__(...)\n |      Ceiling of an Integral returns itself.\n |  \n |  \n\n\n\n |  \n |  __divmod__(self, value, /)\n |      Return divmod(self, value).\n |  \n |  \n\n\n\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  \n\n\n\n |  \n |  __float__(self, /)\n |      float(self)\n |  \n |  \n\n\n\n |  \n |  __floor__(...)\n |      Flooring an Integral returns itself.\n |  \n |  \n\n\n\n |  \n |  __floordiv__(self, value, /)\n |      Return self//value.\n |  \n |  \n\n\n\n |  \n |  __format__(self, format_spec, /)\n |      Default object formatter.\n |  \n |  \n\n\n\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getnewargs__(self, /)\n |  \n |  \n\n\n\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  \n\n\n\n |  \n |  __hash__(self, /)\n |      Return hash(self).\n |  \n |  \n\n\n\n |  \n |  __index__(self, /)\n |      Return self converted to an integer, if self is suitable for use as an index into a list.\n |  \n |  \n\n\n\n |  \n |  __int__(self, /)\n |      int(self)\n |  \n |  \n\n\n\n |  \n |  __invert__(self, /)\n |      ~self\n |  \n |  \n\n\n\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  \n\n\n\n |  \n |  __lshift__(self, value, /)\n |      Return self<<value.\n |  \n |  \n\n\n\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  \n\n\n\n |  \n |  __mod__(self, value, /)\n |      Return self%value.\n |  \n |  \n\n\n\n |  \n |  __mul__(self, value, /)\n |      Return self*value.\n |  \n |  \n\n\n\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  \n\n\n\n |  \n |  __neg__(self, /)\n |      -self\n |  \n |  \n\n\n\n |  \n |  __or__(self, value, /)\n |      Return self|value.\n |  \n |  \n\n\n\n |  \n |  __pos__(self, /)\n |      +self\n |  \n |  \n\n\n\n |  \n |  __pow__(self, value, mod=None, /)\n |      Return pow(self, value, mod).\n |  \n |  \n\n\n\n |  \n |  __radd__(self, value, /)\n |      Return value+self.\n |  \n |  \n\n\n\n |  \n |  __rand__(self, value, /)\n |      Return value&self.\n |  \n |  \n\n\n\n |  \n |  __rdivmod__(self, value, /)\n |      Return divmod(value, self).\n |  \n |  \n\n\n\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __rfloordiv__(self, value, /)\n |      Return value//self.\n |  \n |  \n\n\n\n |  \n |  __rlshift__(self, value, /)\n |      Return value<<self.\n |  \n |  \n\n\n\n |  \n |  __rmod__(self, value, /)\n |      Return value%self.\n |  \n |  \n\n\n\n |  \n |  __rmul__(self, value, /)\n |      Return value*self.\n |  \n |  \n\n\n\n |  \n |  __ror__(self, value, /)\n |      Return value|self.\n |  \n |  \n\n\n\n |  \n |  __round__(...)\n |      Rounding an Integral returns itself.\n |      Rounding with an ndigits argument also returns an integer.\n |  \n |  \n\n\n\n |  \n |  __rpow__(self, value, mod=None, /)\n |      Return pow(value, self, mod).\n |  \n |  \n\n\n\n |  \n |  __rrshift__(self, value, /)\n |      Return value>>self.\n |  \n |  \n\n\n\n |  \n |  __rshift__(self, value, /)\n |      Return self>>value.\n |  \n |  \n\n\n\n |  \n |  __rsub__(self, value, /)\n |      Return value-self.\n |  \n |  \n\n\n\n |  \n |  __rtruediv__(self, value, /)\n |      Return value/self.\n |  \n |  \n\n\n\n |  \n |  __rxor__(self, value, /)\n |      Return value^self.\n |  \n |  \n\n\n\n |  \n |  __sizeof__(self, /)\n |      Returns size in memory, in bytes.\n |  \n |  \n\n\n\n |  \n |  __sub__(self, value, /)\n |      Return self-value.\n |  \n |  \n\n\n\n |  \n |  __truediv__(self, value, /)\n |      Return self/value.\n |  \n |  \n\n\n\n |  \n |  __trunc__(...)\n |      Truncating an Integral returns itself.\n |  \n |  \n\n\n\n |  \n |  __xor__(self, value, /)\n |      Return self^value.\n |  \n |  \n\n\n\n |  \n |  as_integer_ratio(self, /)\n |      Return integer ratio.\n |      \n |      Return a pair of integers, whose ratio is exactly equal to the original int\n |      and with a positive denominator.\n |      \n |      >>> (10).as_integer_ratio()\n |      (10, 1)\n |      >>> (-10).as_integer_ratio()\n |      (-10, 1)\n |      >>> (0).as_integer_ratio()\n |      (0, 1)\n |  \n |  \n\n\n\n |  \n |  bit_length(self, /)\n |      Number of bits necessary to represent self in binary.\n |      \n |      >>> bin(37)\n |      '0b100101'\n |      >>> (37).bit_length()\n |      6\n |  \n |  \n\n\n\n |  \n |  conjugate(...)\n |      Returns self, the complex conjugate of any int.\n |  \n |  \n\n\n\n |  \n |  to_bytes(self, /, length, byteorder, *, signed=False)\n |      Return an array of bytes representing an integer.\n |      \n |      length\n |        Length of bytes object to use.  An OverflowError is raised if the\n |        integer is not representable with the given number of bytes.\n |      byteorder\n |        The byte order used to represent the integer.  If byteorder is 'big',\n |        the most significant byte is at the beginning of the byte array.  If\n |        byteorder is 'little', the most significant byte is at the end of the\n |        byte array.  To request the native byte order of the host system, use\n |        `sys.byteorder' as the byte order value.\n |      signed\n |        Determines whether two's complement is used to represent the integer.\n |        If signed is False and a negative integer is given, an OverflowError\n |        is raised.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.int:\n |  \n |  \n\n\n\n |  \n |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type\n |      Return the integer represented by the given array of bytes.\n |      \n |      bytes\n |        Holds the array of bytes to convert.  The argument must either\n |        support the buffer protocol or be an iterable object producing bytes.\n |        Bytes and bytearray are examples of built-in objects that support the\n |        buffer protocol.\n |      byteorder\n |        The byte order used to represent the integer.  If byteorder is 'big',\n |        the most significant byte is at the beginning of the byte array.  If\n |        byteorder is 'little', the most significant byte is at the end of the\n |        byte array.  To request the native byte order of the host system, use\n |        `sys.byteorder' as the byte order value.\n |      signed\n |        Indicates whether two's complement is used to represent the integer.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.int:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.int:\n |  \n |  denominator\n |      the denominator of a rational number in lowest terms\n |  \n |  imag\n |      the imaginary part of a complex number\n |  \n |  numerator\n |      the numerator of a rational number in lowest terms\n |  \n |  real\n |      the real part of a complex number\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from ShowPrint:\n |  \n |  \n\n\n\n |  \n |  show(self, *args, **kwargs)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from ShowPrint:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass PrettyString(builtins.str)\n |  Little hack to get strings to show properly in Jupyter.\n |  \n |  Method resolution order:\n |      PrettyString\n |      builtins.str\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.str:\n |  \n |  \n\n\n\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  \n\n\n\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  \n\n\n\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  \n\n\n\n |  \n |  __format__(self, format_spec, /)\n |      Return a formatted version of the string as described by format_spec.\n |  \n |  \n\n\n\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getitem__(self, key, /)\n |      Return self[key].\n |  \n |  \n\n\n\n |  \n |  __getnewargs__(...)\n |  \n |  \n\n\n\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  \n\n\n\n |  \n |  __hash__(self, /)\n |      Return hash(self).\n |  \n |  \n\n\n\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  \n\n\n\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  \n\n\n\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  \n\n\n\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  \n\n\n\n |  \n |  __mod__(self, value, /)\n |      Return self%value.\n |  \n |  \n\n\n\n |  \n |  __mul__(self, value, /)\n |      Return self*value.\n |  \n |  \n\n\n\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  \n\n\n\n |  \n |  __rmod__(self, value, /)\n |      Return value%self.\n |  \n |  \n\n\n\n |  \n |  __rmul__(self, value, /)\n |      Return value*self.\n |  \n |  \n\n\n\n |  \n |  __sizeof__(self, /)\n |      Return the size of the string in memory, in bytes.\n |  \n |  \n\n\n\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  \n\n\n\n |  \n |  capitalize(self, /)\n |      Return a capitalized version of the string.\n |      \n |      More specifically, make the first character have upper case and the rest lower\n |      case.\n |  \n |  \n\n\n\n |  \n |  casefold(self, /)\n |      Return a version of the string suitable for caseless comparisons.\n |  \n |  \n\n\n\n |  \n |  center(self, width, fillchar=' ', /)\n |      Return a centered string of length width.\n |      \n |      Padding is done using the specified fill character (default is a space).\n |  \n |  \n\n\n\n |  \n |  count(...)\n |      S.count(sub[, start[, end]]) -> int\n |      \n |      Return the number of non-overlapping occurrences of substring sub in\n |      string S[start:end].  Optional arguments start and end are\n |      interpreted as in slice notation.\n |  \n |  \n\n\n\n |  \n |  encode(self, /, encoding='utf-8', errors='strict')\n |      Encode the string using the codec registered for encoding.\n |      \n |      encoding\n |        The encoding in which to encode the string.\n |      errors\n |        The error handling scheme to use for encoding errors.\n |        The default is 'strict' meaning that encoding errors raise a\n |        UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and\n |        'xmlcharrefreplace' as well as any other name registered with\n |        codecs.register_error that can handle UnicodeEncodeErrors.\n |  \n |  \n\n\n\n |  \n |  endswith(...)\n |      S.endswith(suffix[, start[, end]]) -> bool\n |      \n |      Return True if S ends with the specified suffix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      suffix can also be a tuple of strings to try.\n |  \n |  \n\n\n\n |  \n |  expandtabs(self, /, tabsize=8)\n |      Return a copy where all tab characters are expanded using spaces.\n |      \n |      If tabsize is not given, a tab size of 8 characters is assumed.\n |  \n |  \n\n\n\n |  \n |  find(...)\n |      S.find(sub[, start[, end]]) -> int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  \n\n\n\n |  \n |  format(...)\n |      S.format(*args, **kwargs) -> str\n |      \n |      Return a formatted version of S, using substitutions from args and kwargs.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  \n\n\n\n |  \n |  format_map(...)\n |      S.format_map(mapping) -> str\n |      \n |      Return a formatted version of S, using substitutions from mapping.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  \n\n\n\n |  \n |  index(...)\n |      S.index(sub[, start[, end]]) -> int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Raises ValueError when the substring is not found.\n |  \n |  \n\n\n\n |  \n |  isalnum(self, /)\n |      Return True if the string is an alpha-numeric string, False otherwise.\n |      \n |      A string is alpha-numeric if all characters in the string are alpha-numeric and\n |      there is at least one character in the string.\n |  \n |  \n\n\n\n |  \n |  isalpha(self, /)\n |      Return True if the string is an alphabetic string, False otherwise.\n |      \n |      A string is alphabetic if all characters in the string are alphabetic and there\n |      is at least one character in the string.\n |  \n |  \n\n\n\n |  \n |  isascii(self, /)\n |      Return True if all characters in the string are ASCII, False otherwise.\n |      \n |      ASCII characters have code points in the range U+0000-U+007F.\n |      Empty string is ASCII too.\n |  \n |  \n\n\n\n |  \n |  isdecimal(self, /)\n |      Return True if the string is a decimal string, False otherwise.\n |      \n |      A string is a decimal string if all characters in the string are decimal and\n |      there is at least one character in the string.\n |  \n |  \n\n\n\n |  \n |  isdigit(self, /)\n |      Return True if the string is a digit string, False otherwise.\n |      \n |      A string is a digit string if all characters in the string are digits and there\n |      is at least one character in the string.\n |  \n |  \n\n\n\n |  \n |  isidentifier(self, /)\n |      Return True if the string is a valid Python identifier, False otherwise.\n |      \n |      Call keyword.iskeyword(s) to test whether string s is a reserved identifier,\n |      such as \"def\" or \"class\".\n |  \n |  \n\n\n\n |  \n |  islower(self, /)\n |      Return True if the string is a lowercase string, False otherwise.\n |      \n |      A string is lowercase if all cased characters in the string are lowercase and\n |      there is at least one cased character in the string.\n |  \n |  \n\n\n\n |  \n |  isnumeric(self, /)\n |      Return True if the string is a numeric string, False otherwise.\n |      \n |      A string is numeric if all characters in the string are numeric and there is at\n |      least one character in the string.\n |  \n |  \n\n\n\n |  \n |  isprintable(self, /)\n |      Return True if the string is printable, False otherwise.\n |      \n |      A string is printable if all of its characters are considered printable in\n |      repr() or if it is empty.\n |  \n |  \n\n\n\n |  \n |  isspace(self, /)\n |      Return True if the string is a whitespace string, False otherwise.\n |      \n |      A string is whitespace if all characters in the string are whitespace and there\n |      is at least one character in the string.\n |  \n |  \n\n\n\n |  \n |  istitle(self, /)\n |      Return True if the string is a title-cased string, False otherwise.\n |      \n |      In a title-cased string, upper- and title-case characters may only\n |      follow uncased characters and lowercase characters only cased ones.\n |  \n |  \n\n\n\n |  \n |  isupper(self, /)\n |      Return True if the string is an uppercase string, False otherwise.\n |      \n |      A string is uppercase if all cased characters in the string are uppercase and\n |      there is at least one cased character in the string.\n |  \n |  \n\n\n\n |  \n |  join(self, iterable, /)\n |      Concatenate any number of strings.\n |      \n |      The string whose method is called is inserted in between each given string.\n |      The result is returned as a new string.\n |      \n |      Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'\n |  \n |  \n\n\n\n |  \n |  ljust(self, width, fillchar=' ', /)\n |      Return a left-justified string of length width.\n |      \n |      Padding is done using the specified fill character (default is a space).\n |  \n |  \n\n\n\n |  \n |  lower(self, /)\n |      Return a copy of the string converted to lowercase.\n |  \n |  \n\n\n\n |  \n |  lstrip(self, chars=None, /)\n |      Return a copy of the string with leading whitespace removed.\n |      \n |      If chars is given and not None, remove characters in chars instead.\n |  \n |  \n\n\n\n |  \n |  partition(self, sep, /)\n |      Partition the string into three parts using the given separator.\n |      \n |      This will search for the separator in the string.  If the separator is found,\n |      returns a 3-tuple containing the part before the separator, the separator\n |      itself, and the part after it.\n |      \n |      If the separator is not found, returns a 3-tuple containing the original string\n |      and two empty strings.\n |  \n |  \n\n\n\n |  \n |  removeprefix(self, prefix, /)\n |      Return a str with the given prefix string removed if present.\n |      \n |      If the string starts with the prefix string, return string[len(prefix):].\n |      Otherwise, return a copy of the original string.\n |  \n |  \n\n\n\n |  \n |  removesuffix(self, suffix, /)\n |      Return a str with the given suffix string removed if present.\n |      \n |      If the string ends with the suffix string and that suffix is not empty,\n |      return string[:-len(suffix)]. Otherwise, return a copy of the original\n |      string.\n |  \n |  \n\n\n\n |  \n |  replace(self, old, new, count=-1, /)\n |      Return a copy with all occurrences of substring old replaced by new.\n |      \n |        count\n |          Maximum number of occurrences to replace.\n |          -1 (the default value) means replace all occurrences.\n |      \n |      If the optional argument count is given, only the first count occurrences are\n |      replaced.\n |  \n |  \n\n\n\n |  \n |  rfind(...)\n |      S.rfind(sub[, start[, end]]) -> int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  \n\n\n\n |  \n |  rindex(...)\n |      S.rindex(sub[, start[, end]]) -> int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Raises ValueError when the substring is not found.\n |  \n |  \n\n\n\n |  \n |  rjust(self, width, fillchar=' ', /)\n |      Return a right-justified string of length width.\n |      \n |      Padding is done using the specified fill character (default is a space).\n |  \n |  \n\n\n\n |  \n |  rpartition(self, sep, /)\n |      Partition the string into three parts using the given separator.\n |      \n |      This will search for the separator in the string, starting at the end. If\n |      the separator is found, returns a 3-tuple containing the part before the\n |      separator, the separator itself, and the part after it.\n |      \n |      If the separator is not found, returns a 3-tuple containing two empty strings\n |      and the original string.\n |  \n |  \n\n\n\n |  \n |  rsplit(self, /, sep=None, maxsplit=-1)\n |      Return a list of the words in the string, using sep as the delimiter string.\n |      \n |        sep\n |          The delimiter according which to split the string.\n |          None (the default value) means split according to any whitespace,\n |          and discard empty strings from the result.\n |        maxsplit\n |          Maximum number of splits to do.\n |          -1 (the default value) means no limit.\n |      \n |      Splits are done starting at the end of the string and working to the front.\n |  \n |  \n\n\n\n |  \n |  rstrip(self, chars=None, /)\n |      Return a copy of the string with trailing whitespace removed.\n |      \n |      If chars is given and not None, remove characters in chars instead.\n |  \n |  \n\n\n\n |  \n |  split(self, /, sep=None, maxsplit=-1)\n |      Return a list of the words in the string, using sep as the delimiter string.\n |      \n |      sep\n |        The delimiter according which to split the string.\n |        None (the default value) means split according to any whitespace,\n |        and discard empty strings from the result.\n |      maxsplit\n |        Maximum number of splits to do.\n |        -1 (the default value) means no limit.\n |  \n |  \n\n\n\n |  \n |  splitlines(self, /, keepends=False)\n |      Return a list of the lines in the string, breaking at line boundaries.\n |      \n |      Line breaks are not included in the resulting list unless keepends is given and\n |      true.\n |  \n |  \n\n\n\n |  \n |  startswith(...)\n |      S.startswith(prefix[, start[, end]]) -> bool\n |      \n |      Return True if S starts with the specified prefix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      prefix can also be a tuple of strings to try.\n |  \n |  \n\n\n\n |  \n |  strip(self, chars=None, /)\n |      Return a copy of the string with leading and trailing whitespace removed.\n |      \n |      If chars is given and not None, remove characters in chars instead.\n |  \n |  \n\n\n\n |  \n |  swapcase(self, /)\n |      Convert uppercase characters to lowercase and lowercase characters to uppercase.\n |  \n |  \n\n\n\n |  \n |  title(self, /)\n |      Return a version of the string where each word is titlecased.\n |      \n |      More specifically, words start with uppercased characters and all remaining\n |      cased characters have lower case.\n |  \n |  \n\n\n\n |  \n |  translate(self, table, /)\n |      Replace each character in the string using the given translation table.\n |      \n |        table\n |          Translation table, which must be a mapping of Unicode ordinals to\n |          Unicode ordinals, strings, or None.\n |      \n |      The table must implement lookup/indexing via __getitem__, for instance a\n |      dictionary or list.  If this operation raises LookupError, the character is\n |      left untouched.  Characters mapped to None are deleted.\n |  \n |  \n\n\n\n |  \n |  upper(self, /)\n |      Return a copy of the string converted to uppercase.\n |  \n |  \n\n\n\n |  \n |  zfill(self, width, /)\n |      Pad a numeric string with zeros on the left, to fill a field of the given width.\n |      \n |      The string is never truncated.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.str:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  maketrans(...)\n |      Return a translation table usable for str.translate().\n |      \n |      If there is only one argument, it must be a dictionary mapping Unicode\n |      ordinals (integers) or characters to Unicode ordinals, strings or None.\n |      Character keys will be then converted to ordinals.\n |      If there are two arguments, they must be strings of equal length, and\n |      in the resulting dictionary, each character in x will be mapped to the\n |      character at the same position in y. If there is a third argument, it\n |      must be a string, whose characters will be mapped to None in the result.\n\n\n\n\nclass ShowPrint(builtins.object)\n |  Base class that prints for `show`\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  show(self, *args, **kwargs)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass Stateful(builtins.object)\n |  Stateful(*args, **kwargs)\n |  \n |  A base class/mixin for objects that should not serialize all their state\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __getstate__(self)\n |  \n |  \n\n\n\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __setstate__(self, state)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass Str(builtins.str, ShowPrint)\n |  An extensible `str`\n |  \n |  Method resolution order:\n |      Str\n |      builtins.str\n |      ShowPrint\n |      builtins.object\n |  \n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.str:\n |  \n |  \n\n\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  \n\n\n\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  \n\n\n\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  \n\n\n\n |  \n |  __format__(self, format_spec, /)\n |      Return a formatted version of the string as described by format_spec.\n |  \n |  \n\n\n\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getitem__(self, key, /)\n |      Return self[key].\n |  \n |  \n\n\n\n |  \n |  __getnewargs__(...)\n |  \n |  \n\n\n\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  \n\n\n\n |  \n |  __hash__(self, /)\n |      Return hash(self).\n |  \n |  \n\n\n\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  \n\n\n\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  \n\n\n\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  \n\n\n\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  \n\n\n\n |  \n |  __mod__(self, value, /)\n |      Return self%value.\n |  \n |  \n\n\n\n |  \n |  __mul__(self, value, /)\n |      Return self*value.\n |  \n |  \n\n\n\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  \n\n\n\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __rmod__(self, value, /)\n |      Return value%self.\n |  \n |  \n\n\n\n |  \n |  __rmul__(self, value, /)\n |      Return value*self.\n |  \n |  \n\n\n\n |  \n |  __sizeof__(self, /)\n |      Return the size of the string in memory, in bytes.\n |  \n |  \n\n\n\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  \n\n\n\n |  \n |  capitalize(self, /)\n |      Return a capitalized version of the string.\n |      \n |      More specifically, make the first character have upper case and the rest lower\n |      case.\n |  \n |  \n\n\n\n |  \n |  casefold(self, /)\n |      Return a version of the string suitable for caseless comparisons.\n |  \n |  \n\n\n\n |  \n |  center(self, width, fillchar=' ', /)\n |      Return a centered string of length width.\n |      \n |      Padding is done using the specified fill character (default is a space).\n |  \n |  \n\n\n\n |  \n |  count(...)\n |      S.count(sub[, start[, end]]) -> int\n |      \n |      Return the number of non-overlapping occurrences of substring sub in\n |      string S[start:end].  Optional arguments start and end are\n |      interpreted as in slice notation.\n |  \n |  \n\n\n\n |  \n |  encode(self, /, encoding='utf-8', errors='strict')\n |      Encode the string using the codec registered for encoding.\n |      \n |      encoding\n |        The encoding in which to encode the string.\n |      errors\n |        The error handling scheme to use for encoding errors.\n |        The default is 'strict' meaning that encoding errors raise a\n |        UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and\n |        'xmlcharrefreplace' as well as any other name registered with\n |        codecs.register_error that can handle UnicodeEncodeErrors.\n |  \n |  \n\n\n\n |  \n |  endswith(...)\n |      S.endswith(suffix[, start[, end]]) -> bool\n |      \n |      Return True if S ends with the specified suffix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      suffix can also be a tuple of strings to try.\n |  \n |  \n\n\n\n |  \n |  expandtabs(self, /, tabsize=8)\n |      Return a copy where all tab characters are expanded using spaces.\n |      \n |      If tabsize is not given, a tab size of 8 characters is assumed.\n |  \n |  \n\n\n\n |  \n |  find(...)\n |      S.find(sub[, start[, end]]) -> int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  \n\n\n\n |  \n |  format(...)\n |      S.format(*args, **kwargs) -> str\n |      \n |      Return a formatted version of S, using substitutions from args and kwargs.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  \n\n\n\n |  \n |  format_map(...)\n |      S.format_map(mapping) -> str\n |      \n |      Return a formatted version of S, using substitutions from mapping.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  \n\n\n\n |  \n |  index(...)\n |      S.index(sub[, start[, end]]) -> int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Raises ValueError when the substring is not found.\n |  \n |  \n\n\n\n |  \n |  isalnum(self, /)\n |      Return True if the string is an alpha-numeric string, False otherwise.\n |      \n |      A string is alpha-numeric if all characters in the string are alpha-numeric and\n |      there is at least one character in the string.\n |  \n |  \n\n\n\n |  \n |  isalpha(self, /)\n |      Return True if the string is an alphabetic string, False otherwise.\n |      \n |      A string is alphabetic if all characters in the string are alphabetic and there\n |      is at least one character in the string.\n |  \n |  \n\n\n\n |  \n |  isascii(self, /)\n |      Return True if all characters in the string are ASCII, False otherwise.\n |      \n |      ASCII characters have code points in the range U+0000-U+007F.\n |      Empty string is ASCII too.\n |  \n |  \n\n\n\n |  \n |  isdecimal(self, /)\n |      Return True if the string is a decimal string, False otherwise.\n |      \n |      A string is a decimal string if all characters in the string are decimal and\n |      there is at least one character in the string.\n |  \n |  \n\n\n\n |  \n |  isdigit(self, /)\n |      Return True if the string is a digit string, False otherwise.\n |      \n |      A string is a digit string if all characters in the string are digits and there\n |      is at least one character in the string.\n |  \n |  \n\n\n\n |  \n |  isidentifier(self, /)\n |      Return True if the string is a valid Python identifier, False otherwise.\n |      \n |      Call keyword.iskeyword(s) to test whether string s is a reserved identifier,\n |      such as \"def\" or \"class\".\n |  \n |  \n\n\n\n |  \n |  islower(self, /)\n |      Return True if the string is a lowercase string, False otherwise.\n |      \n |      A string is lowercase if all cased characters in the string are lowercase and\n |      there is at least one cased character in the string.\n |  \n |  \n\n\n\n |  \n |  isnumeric(self, /)\n |      Return True if the string is a numeric string, False otherwise.\n |      \n |      A string is numeric if all characters in the string are numeric and there is at\n |      least one character in the string.\n |  \n |  \n\n\n\n |  \n |  isprintable(self, /)\n |      Return True if the string is printable, False otherwise.\n |      \n |      A string is printable if all of its characters are considered printable in\n |      repr() or if it is empty.\n |  \n |  \n\n\n\n |  \n |  isspace(self, /)\n |      Return True if the string is a whitespace string, False otherwise.\n |      \n |      A string is whitespace if all characters in the string are whitespace and there\n |      is at least one character in the string.\n |  \n |  \n\n\n\n |  \n |  istitle(self, /)\n |      Return True if the string is a title-cased string, False otherwise.\n |      \n |      In a title-cased string, upper- and title-case characters may only\n |      follow uncased characters and lowercase characters only cased ones.\n |  \n |  \n\n\n\n |  \n |  isupper(self, /)\n |      Return True if the string is an uppercase string, False otherwise.\n |      \n |      A string is uppercase if all cased characters in the string are uppercase and\n |      there is at least one cased character in the string.\n |  \n |  \n\n\n\n |  \n |  join(self, iterable, /)\n |      Concatenate any number of strings.\n |      \n |      The string whose method is called is inserted in between each given string.\n |      The result is returned as a new string.\n |      \n |      Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'\n |  \n |  \n\n\n\n |  \n |  ljust(self, width, fillchar=' ', /)\n |      Return a left-justified string of length width.\n |      \n |      Padding is done using the specified fill character (default is a space).\n |  \n |  \n\n\n\n |  \n |  lower(self, /)\n |      Return a copy of the string converted to lowercase.\n |  \n |  \n\n\n\n |  \n |  lstrip(self, chars=None, /)\n |      Return a copy of the string with leading whitespace removed.\n |      \n |      If chars is given and not None, remove characters in chars instead.\n |  \n |  \n\n\n\n |  \n |  partition(self, sep, /)\n |      Partition the string into three parts using the given separator.\n |      \n |      This will search for the separator in the string.  If the separator is found,\n |      returns a 3-tuple containing the part before the separator, the separator\n |      itself, and the part after it.\n |      \n |      If the separator is not found, returns a 3-tuple containing the original string\n |      and two empty strings.\n |  \n |  \n\n\n\n |  \n |  removeprefix(self, prefix, /)\n |      Return a str with the given prefix string removed if present.\n |      \n |      If the string starts with the prefix string, return string[len(prefix):].\n |      Otherwise, return a copy of the original string.\n |  \n |  \n\n\n\n |  \n |  removesuffix(self, suffix, /)\n |      Return a str with the given suffix string removed if present.\n |      \n |      If the string ends with the suffix string and that suffix is not empty,\n |      return string[:-len(suffix)]. Otherwise, return a copy of the original\n |      string.\n |  \n |  \n\n\n\n |  \n |  replace(self, old, new, count=-1, /)\n |      Return a copy with all occurrences of substring old replaced by new.\n |      \n |        count\n |          Maximum number of occurrences to replace.\n |          -1 (the default value) means replace all occurrences.\n |      \n |      If the optional argument count is given, only the first count occurrences are\n |      replaced.\n |  \n |  \n\n\n\n |  \n |  rfind(...)\n |      S.rfind(sub[, start[, end]]) -> int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  \n\n\n\n |  \n |  rindex(...)\n |      S.rindex(sub[, start[, end]]) -> int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within S[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Raises ValueError when the substring is not found.\n |  \n |  \n\n\n\n |  \n |  rjust(self, width, fillchar=' ', /)\n |      Return a right-justified string of length width.\n |      \n |      Padding is done using the specified fill character (default is a space).\n |  \n |  \n\n\n\n |  \n |  rpartition(self, sep, /)\n |      Partition the string into three parts using the given separator.\n |      \n |      This will search for the separator in the string, starting at the end. If\n |      the separator is found, returns a 3-tuple containing the part before the\n |      separator, the separator itself, and the part after it.\n |      \n |      If the separator is not found, returns a 3-tuple containing two empty strings\n |      and the original string.\n |  \n |  \n\n\n\n |  \n |  rsplit(self, /, sep=None, maxsplit=-1)\n |      Return a list of the words in the string, using sep as the delimiter string.\n |      \n |        sep\n |          The delimiter according which to split the string.\n |          None (the default value) means split according to any whitespace,\n |          and discard empty strings from the result.\n |        maxsplit\n |          Maximum number of splits to do.\n |          -1 (the default value) means no limit.\n |      \n |      Splits are done starting at the end of the string and working to the front.\n |  \n |  \n\n\n\n |  \n |  rstrip(self, chars=None, /)\n |      Return a copy of the string with trailing whitespace removed.\n |      \n |      If chars is given and not None, remove characters in chars instead.\n |  \n |  \n\n\n\n |  \n |  split(self, /, sep=None, maxsplit=-1)\n |      Return a list of the words in the string, using sep as the delimiter string.\n |      \n |      sep\n |        The delimiter according which to split the string.\n |        None (the default value) means split according to any whitespace,\n |        and discard empty strings from the result.\n |      maxsplit\n |        Maximum number of splits to do.\n |        -1 (the default value) means no limit.\n |  \n |  \n\n\n\n |  \n |  splitlines(self, /, keepends=False)\n |      Return a list of the lines in the string, breaking at line boundaries.\n |      \n |      Line breaks are not included in the resulting list unless keepends is given and\n |      true.\n |  \n |  \n\n\n\n |  \n |  startswith(...)\n |      S.startswith(prefix[, start[, end]]) -> bool\n |      \n |      Return True if S starts with the specified prefix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      prefix can also be a tuple of strings to try.\n |  \n |  \n\n\n\n |  \n |  strip(self, chars=None, /)\n |      Return a copy of the string with leading and trailing whitespace removed.\n |      \n |      If chars is given and not None, remove characters in chars instead.\n |  \n |  \n\n\n\n |  \n |  swapcase(self, /)\n |      Convert uppercase characters to lowercase and lowercase characters to uppercase.\n |  \n |  \n\n\n\n |  \n |  title(self, /)\n |      Return a version of the string where each word is titlecased.\n |      \n |      More specifically, words start with uppercased characters and all remaining\n |      cased characters have lower case.\n |  \n |  \n\n\n\n |  \n |  translate(self, table, /)\n |      Replace each character in the string using the given translation table.\n |      \n |        table\n |          Translation table, which must be a mapping of Unicode ordinals to\n |          Unicode ordinals, strings, or None.\n |      \n |      The table must implement lookup/indexing via __getitem__, for instance a\n |      dictionary or list.  If this operation raises LookupError, the character is\n |      left untouched.  Characters mapped to None are deleted.\n |  \n |  \n\n\n\n |  \n |  upper(self, /)\n |      Return a copy of the string converted to uppercase.\n |  \n |  \n\n\n\n |  \n |  zfill(self, width, /)\n |      Pad a numeric string with zeros on the left, to fill a field of the given width.\n |      \n |      The string is never truncated.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.str:\n |  \n |  \n\n\n\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  maketrans(...)\n |      Return a translation table usable for str.translate().\n |      \n |      If there is only one argument, it must be a dictionary mapping Unicode\n |      ordinals (integers) or characters to Unicode ordinals, strings or None.\n |      Character keys will be then converted to ordinals.\n |      If there are two arguments, they must be strings of equal length, and\n |      in the resulting dictionary, each character in x will be mapped to the\n |      character at the same position in y. If there is a third argument, it\n |      must be a string, whose characters will be mapped to None in the result.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from ShowPrint:\n |  \n |  \n\n\n\n |  \n |  show(self, *args, **kwargs)\n\n\n\n\nclass StrEnum(builtins.str, ImportEnum)\n |  StrEnum(value, names=None, *, module=None, qualname=None, type=None, start=1)\n |  \n |  An `ImportEnum` that behaves like a `str`\n |  \n |  Method resolution order:\n |      StrEnum\n |      builtins.str\n |      ImportEnum\n |      enum.Enum\n |      builtins.object\n |  \n |  Data descriptors inherited from enum.Enum:\n |  \n |  name\n |      The name of the Enum member.\n |  \n |  value\n |      The value of the Enum member.\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from enum.EnumMeta:\n |  \n |  __members__\n |      Returns a mapping of member name->value.\n |      \n |      This mapping lists all enum members, including aliases. Note that this\n |      is a read-only view of the internal mapping.\n\n\n\nclass bind(builtins.object)\n |  bind(func, *pargs, **pkwargs)\n |  \n |  Same as `partial`, except you can use `arg0` `arg1` etc param placeholders\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __call__(self, *args, **kwargs)\n |      Call self as a function.\n |  \n |  \n\n\n\n |  \n |  __init__(self, func, *pargs, **pkwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass fastuple(builtins.tuple)\n |  fastuple(x=None, *rest)\n |  \n |  A `tuple` with elementwise ops and more friendly __init__ behavior\n |  \n |  Method resolution order:\n |      fastuple\n |      builtins.tuple\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __abs__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __and__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __floordiv__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __invert__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __lshift__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __matmul__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __mod__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __neg__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __or__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __pos__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __pow__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __rshift__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __sub__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __truediv__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  __xor__ = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  add(self, *args)\n |      `+` is already defined in `tuple` for concat, so use `add` instead\n |  \n |  \n\n\n\n |  \n |  eq = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  ge = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  gt = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  le = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  lt = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  max = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  min = _f(self, *args)\n |  \n |  \n\n\n\n |  \n |  mul(self, *args)\n |      `*` is already defined in `tuple` for replicating, so use `mul` instead\n |  \n |  \n\n\n\n |  \n |  ne = _f(self, *args)\n |  \n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |  \n |  \n\n\n\n |  \n |  __new__(cls, x=None, *rest)\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.tuple:\n |  \n |  \n\n\n\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  \n\n\n\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  \n\n\n\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  \n\n\n\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  \n\n\n\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\n\n |  \n |  __getitem__(self, key, /)\n |      Return self[key].\n |  \n |  \n\n\n\n |  \n |  __getnewargs__(self, /)\n |  \n |  \n\n\n\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  \n\n\n\n |  \n |  __hash__(self, /)\n |      Return hash(self).\n |  \n |  \n\n\n\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  \n\n\n\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  \n\n\n\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  \n\n\n\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  \n\n\n\n |  \n |  __mul__(self, value, /)\n |      Return self*value.\n |  \n |  \n\n\n\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  \n\n\n\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __rmul__(self, value, /)\n |      Return value*self.\n |  \n |  \n\n\n\n |  \n |  count(self, value, /)\n |      Return number of occurrences of value.\n |  \n |  \n\n\n\n |  \n |  index(self, value, start=0, stop=9223372036854775807, /)\n |      Return first index of value.\n |      \n |      Raises ValueError if the value is not present.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.tuple:\n |  \n |  \n\n\n\n |  \n |  __class_getitem__(...) from builtins.type\n |      See PEP 585\n\n\n\n\nclass ignore_exceptions(builtins.object)\n |  Context manager to ignore exceptions\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, *args)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"
  },
  {
    "objectID": "examples/fastcore/basics.html#functions",
    "href": "examples/fastcore/basics.html#functions",
    "title": "basics",
    "section": "Functions",
    "text": "Functions\n\nadd\nadd(a, b=)\n    Same as `operator.add`, or returns partial if 1 arg\n\n\nadd_props\nadd_props(f, g=None, n=2)\n    Create properties passing each of `range(n)` to f\n\n\nanno_ret\nanno_ret(func)\n    Get the return annotation of `func`\n\n\nannotations\nannotations(o)\n    Annotations for `o`, or `type(o)`\n\n\nargnames\nargnames(f, frame=False)\n    Names of arguments to function or frame `f`\n\n\nargwhere\nargwhere(iterable, f, negate=False, **kwargs)\n    Like `filter_ex`, but return indices for matching items\n\n\nattrdict\nattrdict(o, *ks, default=None)\n    Dict from each `k` in `ks` to `getattr(o,k)`\n\n\nbasic_repr\nbasic_repr(flds=None)\n    Minimal `__repr__`\n\n\ncamel2snake\ncamel2snake(name)\n    Convert CamelCase to snake_case\n\n\ncamel2words\ncamel2words(s, space=' ')\n    Convert CamelCase to 'spaced words'\n\n\nchunked\nchunked(it, chunk_sz=None, drop_last=False, n_chunks=None)\n    Return batches from iterator `it` of size `chunk_sz` (or return `n_chunks` total)\n\n\nclass2attr\nclass2attr(self, cls_name)\n    Return the snake-cased name of the class; strip ending `cls_name` if it exists.\n\n\ncompile_re\ncompile_re(pat)\n    Compile `pat` if it's not None\n\n\ncompose\ncompose(*funcs, order=None)\n    Create a function that composes all functions in `funcs`, passing along remaining `*args` and `**kwargs` to all\n\n\nconcat\nconcat(colls) -> list\n    Concatenate all collections and items as a list\n\n\ncopy_func\ncopy_func(f)\n    Copy a non-builtin function (NB `copy.copy` does not work for this)\n\n\ncustom_dir\ncustom_dir(c, add)\n    Implement custom `__dir__`, adding `add` to `cls`\n\n\ncycle\ncycle(o)\n    Like `itertools.cycle` except creates list of `None`s if `o` is empty\n\n\ndelegate_attr\ndelegate_attr(self, k, to)\n    Use in `__getattr__` to delegate to attr `to` without inheriting from `GetAttr`\n\n\ndetuplify\ndetuplify(x)\n    If `x` is a tuple with one thing, extract it\n\n\neq\neq(a, b=)\n    Same as `operator.eq`, or returns partial if 1 arg\n\n\neval_type\neval_type(t, glb, loc)\n    `eval` a type or collection of types, if needed, for annotations in py3.10+\n\n\neven_mults\neven_mults(start, stop, n)\n    Build log-stepped array from `start` to `stop` in `n` steps.\n\n\nexec_import\nexec_import(mod, sym)\n    Import `sym` from `mod` in a new environment\n\n\nexec_local\nexec_local(code, var_name)\n    Call `exec` on `code` and return the var `var_name\n\n\nexec_new\nexec_new(code)\n    Execute `code` in a new environment and return it\n\n\nfilter_dict\nfilter_dict(d, func)\n    Filter a `dict` using `func`, applied to keys and values\n\n\nfilter_ex\nfilter_ex(iterable, f=, negate=False, gen=False, **kwargs)\n    Like `filter`, but passing `kwargs` to `f`, defaulting `f` to `noop`, and adding `negate` and `gen`\n\n\nfilter_keys\nfilter_keys(d, func)\n    Filter a `dict` using `func`, applied to keys\n\n\nfilter_values\nfilter_values(d, func)\n    Filter a `dict` using `func`, applied to values\n\n\nfirst\nfirst(x, f=None, negate=False, **kwargs)\n    First element of `x`, optionally filtered by `f`, or None if missing\n\n\nflatten\nflatten(o)\n    Concatenate all collections and items as a generator\n\n\nge\nge(a, b=)\n    Same as `operator.ge`, or returns partial if 1 arg\n\n\ngen\ngen(func, seq, cond=)\n    Like `(func(o) for o in seq if cond(func(o)))` but handles `StopIteration`\n\n\nget_annotations_ex\nget_annotations_ex(obj, *, globals=None, locals=None)\n    Backport of py3.10 `get_annotations` that returns globals/locals\n\n\nget_class\nget_class(nm, *fld_names, sup=None, doc=None, funcs=None, **flds)\n    Dynamically create a class, optionally inheriting from `sup`, containing `fld_names`\n\n\ngetattrs\ngetattrs(o, *attrs, default=None)\n    List of all `attrs` in `o`\n\n\ngetcallable\ngetcallable(o, attr)\n    Calls `getattr` with a default of `noop`\n\n\ngroupby\ngroupby(x, key, val=)\n    Like `itertools.groupby` but doesn't need to be sorted, and isn't lazy, plus some extensions\n\n\ngt\ngt(a, b=)\n    Same as `operator.gt`, or returns partial if 1 arg\n\n\nhasattrs\nhasattrs(o, attrs)\n    Test whether `o` contains all `attrs`\n\n\nifnone\nifnone(a, b)\n    `b` if `a` is None else `a`\n\n\nin_\nin_(a, b=)\n    Same as `operator.in_`, or returns partial if 1 arg\n\n\ninstantiate\ninstantiate(t)\n    Instantiate `t` if it's a type, otherwise do nothing\n\n\nis_\nis_(a, b=)\n    Same as `operator.is_`, or returns partial if 1 arg\n\n\nis_array\nis_array(x)\n    `True` if `x` supports `__array__` or `iloc`\n\n\nis_not\nis_not(a, b=)\n    Same as `operator.is_not`, or returns partial if 1 arg\n\n\nlast_index\nlast_index(x, o)\n    Finds the last index of occurence of `x` in `o` (returns -1 if no occurence)\n\n\nle\nle(a, b=)\n    Same as `operator.le`, or returns partial if 1 arg\n\n\nlistify\nlistify(o=None, *rest, use_list=False, match=None)\n    Convert `o` to a `list`\n\n\nloop_first\nloop_first(values)\n    Iterate and generate a tuple with a flag for first value.\n\n\nloop_first_last\nloop_first_last(values)\n    Iterate and generate a tuple with a flag for first and last value.\n\n\nloop_last\nloop_last(values)\n    Iterate and generate a tuple with a flag for last value.\n\n\nlt\nlt(a, b=)\n    Same as `operator.lt`, or returns partial if 1 arg\n\n\nmap_ex\nmap_ex(iterable, f, *args, gen=False, **kwargs)\n    Like `map`, but use `bind`, and supports `str` and indexing\n\n\nmaps\nmaps(*args, retain=)\n    Like `map`, except funcs are composed first\n\n\nmapt\nmapt(func, *iterables)\n    Tuplified `map`\n\n\nmaybe_attr\nmaybe_attr(o, attr)\n    `getattr(o,attr,o)`\n\n\nmerge\nmerge(*ds)\n    Merge all dictionaries in `ds`\n\n\nmk_class\nmk_class(nm, *fld_names, sup=None, doc=None, funcs=None, mod=None, **flds)\n    Create a class using `get_class` and add to the caller's module\n\n\nmul\nmul(a, b=)\n    Same as `operator.mul`, or returns partial if 1 arg\n\n\nne\nne(a, b=)\n    Same as `operator.ne`, or returns partial if 1 arg\n\n\nnested_attr\nnested_attr(o, attr, default=None)\n    Same as `getattr`, but if `attr` includes a `.`, then looks inside nested objects\n\n\nnested_callable\nnested_callable(o, attr)\n    Same as `nested_attr` but if not found will return `noop`\n\n\nnested_idx\nnested_idx(coll, *idxs)\n    Index into nested collections, dicts, etc, with `idxs`\n\n\nnested_setdefault\nnested_setdefault(o, attr, default)\n    Same as `setdefault`, but if `attr` includes a `.`, then looks inside nested objects\n\n\nnot_\nnot_(f)\n    Create new function that negates result of `f`\n\n\nnum_cpus\nnum_cpus()\n    Get number of cpus\n\n\nonly\nonly(o)\n    Return the only item of `o`, raise if `o` doesn't have exactly one item\n\n\notherwise\notherwise(x, tst, y)\n    `y if tst(x) else x`\n\n\npartialler\npartialler(f, *args, order=None, **kwargs)\n    Like `functools.partial` but also copies over docstring\n\n\npatch\npatch(f=None, *, as_prop=False, cls_method=False)\n    Decorator: add `f` to the first parameter's class (based on f's type annotations)\n\n\npatch_property\npatch_property(f)\n    Deprecated; use `patch(as_prop=True)` instead\n\n\npatch_to\npatch_to(cls, as_prop=False, cls_method=False)\n    Decorator: add `f` to `cls`\n\n\nproperties\nproperties(cls, *ps)\n    Change attrs in `cls` with names in `ps` to properties\n\n\nrange_of\nrange_of(a, b=None, step=None)\n    All indices of collection `a`, if `a` is a collection, otherwise `range`\n\n\nrenumerate\nrenumerate(iterable, start=0)\n    Same as `enumerate`, but returns index as 2nd element instead of 1st\n\n\nreplicate\nreplicate(item, match)\n    Create tuple of `item` copied `len(match)` times\n\n\nret_false\nret_false(*args, **kwargs)\n    Predicate: always `False`\n\n\nret_true\nret_true(*args, **kwargs)\n    Predicate: always `True`\n\n\nrisinstance\nrisinstance(types, obj=None)\n    Curried `isinstance` but with args reversed\n\n\nset_nested_idx\nset_nested_idx(coll, value, *idxs)\n    Set value indexed like `nested_idx\n\n\nsetattrs\nsetattrs(dest, flds, src)\n    # %% ../nbs/01_basics.ipynb 180\n\n\nsetify\nsetify(o)\n    Turn any list like-object into a set.\n\n\nsignature_ex\nsignature_ex(obj, eval_str: bool = False)\n    Backport of `inspect.signature(..., eval_str=True` to <py310\n\n\nsnake2camel\nsnake2camel(s)\n    Convert snake_case to CamelCase\n\n\nsorted_ex\nsorted_ex(iterable, key=None, reverse=False)\n    Like `sorted`, but if key is str use `attrgetter`; if int use `itemgetter`\n\n\nstop\nstop(e=)\n    Raises exception `e` (by default `StopException`)\n\n\nstore_attr\nstore_attr(names=None, self=None, but='', cast=False, store_args=None, **attrs)\n    Store params named in comma-separated `names` from calling context into attrs in `self`\n\n\nstr2bool\nstr2bool(s)\n    Case-insensitive convert string `s` too a bool (`y`,`yes`,`t`,`true`,`on`,`1`->`True`)\n\n\nstr_enum\nstr_enum(name, *vals)\n    Simplified creation of `StrEnum` types\n\n\nstrcat\nstrcat(its, sep: str = '') -> str\n    Concatenate stringified items `its`\n\n\nsub\nsub(a, b=)\n    Same as `operator.sub`, or returns partial if 1 arg\n\n\ntrue\ntrue(x)\n    Test whether `x` is truthy; collections with >0 elements are considered `True`\n\n\ntruediv\ntruediv(a, b=)\n    Same as `operator.truediv`, or returns partial if 1 arg\n\n\ntry_attrs\ntry_attrs(obj, *attrs)\n    Return first attr that exists in `obj`\n\n\ntuplify\ntuplify(o, use_list=False, match=None)\n    Make `o` a tuple\n\n\ntype_hints\ntype_hints(f)\n    Like `typing.get_type_hints` but returns `{}` if not allowed type\n\n\ntyped\ntyped(f)\n    Decorator to check param and return types at runtime\n\n\nunion2tuple\nunion2tuple(t)\n    # %% ../nbs/01_basics.ipynb 124\n\n\nuniqueify\nuniqueify(x, sort=False, bidir=False, start=None)\n    Unique elements in `x`, optional `sort`, optional return reverse correspondence, optional prepend with elements.\n\n\nusing_attr\nusing_attr(f, attr)\n    Construct a function which applies `f` to the argument's attribute `attr`\n\n\nval2idx\nval2idx(x)\n    Dict from value to index\n\n\nwith_cast\nwith_cast(f)\n    Decorator which uses any parameter annotations as preprocessing functions\n\n\nwrap_class\nwrap_class(nm, *fld_names, sup=None, doc=None, funcs=None, **flds)\n    Decorator: makes function a method of a new class `nm` passing parameters to `mk_class`\n\n\nzip_cycle\nzip_cycle(x, *args)\n    Like `itertools.zip_longest` but `cycle`s through elements of all but first argument"
  },
  {
    "objectID": "examples/fastcore/parallel.html",
    "href": "examples/fastcore/parallel.html",
    "title": "parallel",
    "section": "",
    "text": "concurrent.futures.process.ProcessPoolExecutor(concurrent.futures._base.Executor)\n    ProcessPoolExecutor\nconcurrent.futures.thread.ThreadPoolExecutor(concurrent.futures._base.Executor)\n    ThreadPoolExecutor\n\n\nclass ProcessPoolExecutor(concurrent.futures.process.ProcessPoolExecutor)\n |  ProcessPoolExecutor(max_workers=8, on_exc=<built-in function print>, pause=0, *, mp_context=None, initializer=None, initargs=())\n |  \n |  Same as Python's ProcessPoolExecutor, except can pass `max_workers==0` for serial execution\n |  \n |  Method resolution order:\n |      ProcessPoolExecutor\n |      concurrent.futures.process.ProcessPoolExecutor\n |      concurrent.futures._base.Executor\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __init__(self, max_workers=8, on_exc=<built-in function print>, pause=0, *, mp_context=None, initializer=None, initargs=())\n |      Initializes a new ProcessPoolExecutor instance.\n |      \n |      Args:\n |          max_workers: The maximum number of processes that can be used to\n |              execute the given calls. If None or not given then as many\n |              worker processes will be created as the machine has processors.\n |          mp_context: A multiprocessing context to launch the workers. This\n |              object should provide SimpleQueue, Queue and Process.\n |          initializer: A callable used to initialize worker processes.\n |          initargs: A tuple of arguments to pass to the initializer.\n |  \n |  \n\n\n\n |  \n |  map(self, f, items, *args, timeout=None, chunksize=1, **kwargs)\n |      Returns an iterator equivalent to map(fn, iter).\n |      \n |      Args:\n |          fn: A callable that will take as many arguments as there are\n |              passed iterables.\n |          timeout: The maximum number of seconds to wait. If None, then there\n |              is no limit on the wait time.\n |          chunksize: If greater than one, the iterables will be chopped into\n |              chunks of size chunksize and submitted to the process pool.\n |              If set to one, the items in the list will be sent one at a time.\n |      \n |      Returns:\n |          An iterator equivalent to: map(func, *iterables) but the calls may\n |          be evaluated out-of-order.\n |      \n |      Raises:\n |          TimeoutError: If the entire result iterator could not be generated\n |              before the given timeout.\n |          Exception: If fn(*args) raises for any values.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from concurrent.futures.process.ProcessPoolExecutor:\n |  \n |  \n\n\n\n |  \n |  shutdown(self, wait=True, *, cancel_futures=False)\n |      Clean-up the resources associated with the Executor.\n |      \n |      It is safe to call this method several times. Otherwise, no other\n |      methods can be called after this one.\n |      \n |      Args:\n |          wait: If True then shutdown will not return until all running\n |              futures have finished executing and the resources used by the\n |              executor have been reclaimed.\n |          cancel_futures: If True then shutdown will cancel all pending\n |              futures. Futures that are completed or running will not be\n |              cancelled.\n |  \n |  \n\n\n\n |  \n |  submit(self, fn, /, *args, **kwargs)\n |      Submits a callable to be executed with the given arguments.\n |      \n |      Schedules the callable to be executed as fn(*args, **kwargs) and returns\n |      a Future instance representing the execution of the callable.\n |      \n |      Returns:\n |          A Future representing the given call.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from concurrent.futures._base.Executor:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, exc_type, exc_val, exc_tb)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from concurrent.futures._base.Executor:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass ThreadPoolExecutor(concurrent.futures.thread.ThreadPoolExecutor)\n |  ThreadPoolExecutor(max_workers=8, on_exc=<built-in function print>, pause=0, **kwargs)\n |  \n |  Same as Python's ThreadPoolExecutor, except can pass `max_workers==0` for serial execution\n |  \n |  Method resolution order:\n |      ThreadPoolExecutor\n |      concurrent.futures.thread.ThreadPoolExecutor\n |      concurrent.futures._base.Executor\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __init__(self, max_workers=8, on_exc=<built-in function print>, pause=0, **kwargs)\n |      Initializes a new ThreadPoolExecutor instance.\n |      \n |      Args:\n |          max_workers: The maximum number of threads that can be used to\n |              execute the given calls.\n |          thread_name_prefix: An optional name prefix to give our threads.\n |          initializer: A callable used to initialize worker threads.\n |          initargs: A tuple of arguments to pass to the initializer.\n |  \n |  \n\n\n\n |  \n |  map(self, f, items, *args, timeout=None, chunksize=1, **kwargs)\n |      Returns an iterator equivalent to map(fn, iter).\n |      \n |      Args:\n |          fn: A callable that will take as many arguments as there are\n |              passed iterables.\n |          timeout: The maximum number of seconds to wait. If None, then there\n |              is no limit on the wait time.\n |          chunksize: The size of the chunks the iterable will be broken into\n |              before being passed to a child process. This argument is only\n |              used by ProcessPoolExecutor; it is ignored by\n |              ThreadPoolExecutor.\n |      \n |      Returns:\n |          An iterator equivalent to: map(func, *iterables) but the calls may\n |          be evaluated out-of-order.\n |      \n |      Raises:\n |          TimeoutError: If the entire result iterator could not be generated\n |              before the given timeout.\n |          Exception: If fn(*args) raises for any values.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from concurrent.futures.thread.ThreadPoolExecutor:\n |  \n |  \n\n\n\n |  \n |  shutdown(self, wait=True, *, cancel_futures=False)\n |      Clean-up the resources associated with the Executor.\n |      \n |      It is safe to call this method several times. Otherwise, no other\n |      methods can be called after this one.\n |      \n |      Args:\n |          wait: If True then shutdown will not return until all running\n |              futures have finished executing and the resources used by the\n |              executor have been reclaimed.\n |          cancel_futures: If True then shutdown will cancel all pending\n |              futures. Futures that are completed or running will not be\n |              cancelled.\n |  \n |  \n\n\n\n |  \n |  submit(self, fn, /, *args, **kwargs)\n |      Submits a callable to be executed with the given arguments.\n |      \n |      Schedules the callable to be executed as fn(*args, **kwargs) and returns\n |      a Future instance representing the execution of the callable.\n |      \n |      Returns:\n |          A Future representing the given call.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from concurrent.futures._base.Executor:\n |  \n |  \n\n\n\n |  \n |  __enter__(self)\n |  \n |  \n\n\n\n |  \n |  __exit__(self, exc_type, exc_val, exc_tb)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from concurrent.futures._base.Executor:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"
  },
  {
    "objectID": "examples/fastcore/parallel.html#functions",
    "href": "examples/fastcore/parallel.html#functions",
    "title": "parallel",
    "section": "Functions",
    "text": "Functions\n\nadd_one\nadd_one(x, a=1)\n    # %% ../nbs/03a_parallel.ipynb 16\n\n\nparallel\nparallel(f, items, *args, n_workers=8, total=None, progress=None, pause=0, method=None, threadpool=False, timeout=None, chunksize=1, **kwargs)\n    Applies `func` in parallel to `items`, using `n_workers`\n\n\nparallel_gen\nparallel_gen(cls, items, n_workers=8, **kwargs)\n    Instantiate `cls` in `n_workers` procs & call each on a subset of `items` in parallel.\n\n\nparallelable\nparallelable(param_name, num_workers, f=None)\n    # %% ../nbs/03a_parallel.ipynb 9\n\n\nrun_procs\nrun_procs(f, f_done, args)\n    Call `f` for each item in `args` in parallel, yielding `f_done`\n\n\nstartthread\nstartthread(f)\n    Like `threaded`, but start thread immediately\n\n\nthreaded\nthreaded(f)\n    Run `f` in a thread, and returns the thread"
  },
  {
    "objectID": "examples/fastcore/foundation.html",
    "href": "examples/fastcore/foundation.html",
    "title": "foundation",
    "section": "",
    "text": "builtins.object\n    CollBase\n        L(fastcore.basics.GetAttr, CollBase)\n    Config\nfastcore.basics.GetAttr(builtins.object)\n    L(fastcore.basics.GetAttr, CollBase)\n\n\nclass CollBase(builtins.object)\n |  CollBase(items)\n |  \n |  Base class for composing a list of `items`\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __delitem__(self, i)\n |  \n |  \n\n\n\n |  \n |  __getitem__(self, k)\n |  \n |  \n\n\n\n |  \n |  __init__(self, items)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |  \n |  \n\n\n\n |  \n |  __len__(self)\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __setitem__(self, k, v)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass Config(builtins.object)\n |  Config(cfg_path, cfg_name, create=None, save=True, extra_files=None, types=None)\n |  \n |  Reading and writing `ConfigParser` ini files\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __contains__(self, k)\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, k)\n |  \n |  \n\n\n\n |  \n |  __getitem__(self, k)\n |  \n |  \n\n\n\n |  \n |  __init__(self, cfg_path, cfg_name, create=None, save=True, extra_files=None, types=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __setitem__(self, k, v)\n |  \n |  \n\n\n\n |  \n |  get(self, k, default=None)\n |  \n |  \n\n\n\n |  \n |  path(self, k, default=None)\n |  \n |  \n\n\n\n |  \n |  save(self)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\n\nclass L(fastcore.basics.GetAttr, CollBase)\n |  L(items=None, *rest, use_list=False, match=None)\n |  \n |  Behaves like a list of `items` but can also index with list of indices or masks\n |  \n |  Method resolution order:\n |      L\n |      fastcore.basics.GetAttr\n |      CollBase\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\n\n |  \n |  __add__(a, b)\n |  \n |  \n\n\n\n |  \n |  __addi__(a, b)\n |  \n |  \n\n\n\n |  \n |  __contains__(self, b)\n |  \n |  \n\n\n\n |  \n |  __eq__(self, b)\n |      Return self==value.\n |  \n |  \n\n\n\n |  \n |  __getitem__(self, idx)\n |      Retrieve `idx` (can be list of indices, or mask, or int) items\n |  \n |  \n\n\n\n |  \n |  __init__(self, items=None, *rest, use_list=False, match=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\n\n |  \n |  __invert__(self)\n |  \n |  \n\n\n\n |  \n |  __iter__(self)\n |  \n |  \n\n\n\n |  \n |  __mul__(a, b)\n |  \n |  \n\n\n\n |  \n |  __radd__(a, b)\n |  \n |  \n\n\n\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\n\n |  \n |  __reversed__(self)\n |  \n |  \n\n\n\n |  \n |  __setitem__(self, idx, o)\n |      Set `idx` (can be list of indices, or mask, or int) items to `o` (which is broadcast if not iterable)\n |  \n |  \n\n\n\n |  \n |  argfirst(self, f, negate=False)\n |      Return index of first matching item\n |  \n |  \n\n\n\n |  \n |  argwhere(self, f, negate=False, **kwargs)\n |      Like `filter`, but return indices for matching items\n |  \n |  \n\n\n\n |  \n |  attrgot(self, k, default=None)\n |      Create new `L` with attr `k` (or value `k` for dicts) of all `items`.\n |  \n |  \n\n\n\n |  \n |  concat(self)\n |      Concatenate all elements of list\n |  \n |  \n\n\n\n |  \n |  copy(self)\n |      Same as `list.copy`, but returns an `L`\n |  \n |  \n\n\n\n |  \n |  cycle(self)\n |      Same as `itertools.cycle`\n |  \n |  \n\n\n\n |  \n |  enumerate(self)\n |      Same as `enumerate`\n |  \n |  \n\n\n\n |  \n |  filter(self, f=<function noop at 0x10c634ee0>, negate=False, gen=False, **kwargs)\n |      Create new `L` filtered by predicate `f`, passing `args` and `kwargs` to `f`\n |  \n |  \n\n\n\n |  \n |  itemgot(self, *idxs)\n |      Create new `L` with item `idx` of all `items`\n |  \n |  \n\n\n\n |  \n |  map(self, f, *args, gen=False, **kwargs)\n |      Create new `L` with `f` applied to all `items`, passing `args` and `kwargs` to `f`\n |  \n |  \n\n\n\n |  \n |  map_dict(self, f=<function noop at 0x10c634ee0>, *args, gen=False, **kwargs)\n |      Like `map`, but creates a dict from `items` to function results\n |  \n |  \n\n\n\n |  \n |  map_first(self, f=<function noop at 0x10c634ee0>, g=<function noop at 0x10c634ee0>, *args, **kwargs)\n |      First element of `map_filter`\n |  \n |  \n\n\n\n |  \n |  map_zip(self, f, *args, cycled=False, **kwargs)\n |      Combine `zip` and `starmap`\n |  \n |  \n\n\n\n |  \n |  map_zipwith(self, f, *rest, cycled=False, **kwargs)\n |      Combine `zipwith` and `starmap`\n |  \n |  \n\n\n\n |  \n |  product(self)\n |      Product of the items\n |  \n |  \n\n\n\n |  \n |  reduce(self, f, initial=None)\n |      Wrapper for `functools.reduce`\n |  \n |  \n\n\n\n |  \n |  renumerate(self)\n |      Same as `renumerate`\n |  \n |  \n\n\n\n |  \n |  setattrs(self, attr, val)\n |      Call `setattr` on all items\n |  \n |  \n\n\n\n |  \n |  shuffle(self)\n |      Same as `random.shuffle`, but not inplace\n |  \n |  \n\n\n\n |  \n |  sorted(self, key=None, reverse=False)\n |      New `L` sorted by `key`. If key is str use `attrgetter`; if int use `itemgetter`\n |  \n |  \n\n\n\n |  \n |  starmap(self, f, *args, **kwargs)\n |      Like `map`, but use `itertools.starmap`\n |  \n |  \n\n\n\n |  \n |  sum(self)\n |      Sum of the items\n |  \n |  \n\n\n\n |  \n |  unique(self, sort=False, bidir=False, start=None)\n |      Unique items, in stable order\n |  \n |  \n\n\n\n |  \n |  val2idx(self)\n |      Dict from value to index\n |  \n |  \n\n\n\n |  \n |  zip(self, cycled=False)\n |      Create new `L` with `zip(*items)`\n |  \n |  \n\n\n\n |  \n |  zipwith(self, *rest, cycled=False)\n |      Create new `L` with `self` zip with each of `*rest`\n |  \n |  ----------------------------------------------------------------------\n |  Class methods defined here:\n |  \n |  \n\n\n\n |  \n |  range(a, b=None, step=None) from _L_Meta\n |      Class Method: Same as `range`, but returns `L`. Can pass collection for `a`, to use `len(a)`\n |  \n |  \n\n\n\n |  \n |  split(s, sep=None, maxsplit=-1) from _L_Meta\n |      Class Method: Same as `str.split`, but returns an `L`\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n |  \n |  __signature__ = <Signature (items=None, *rest, use_list=False, match=N...\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from fastcore.basics.GetAttr:\n |  \n |  \n\n\n\n |  \n |  __dir__(self)\n |      Default dir() implementation.\n |  \n |  \n\n\n\n |  \n |  __getattr__(self, k)\n |  \n |  \n\n\n\n |  \n |  __setstate__(self, data)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from fastcore.basics.GetAttr:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from CollBase:\n |  \n |  \n\n\n\n |  \n |  __delitem__(self, i)\n |  \n |  \n\n\n\n |  \n |  __len__(self)"
  },
  {
    "objectID": "examples/fastcore/foundation.html#functions",
    "href": "examples/fastcore/foundation.html#functions",
    "title": "foundation",
    "section": "Functions",
    "text": "Functions\n\nadd_docs\nadd_docs(cls, cls_doc=None, **docs)\n    Copy values from `docs` to `cls` docstrings, and confirm all public methods are documented\n\n\ncoll_repr\ncoll_repr(c, max_n=10)\n    String repr of up to `max_n` items of (possibly lazy) collection `c`\n\n\ncycle\ncycle(o)\n    Like `itertools.cycle` except creates list of `None`s if `o` is empty\n\n\ndocs\ndocs(cls)\n    Decorator version of `add_docs`, using `_docs` dict\n\n\nis_bool\nis_bool(x)\n    Check whether `x` is a bool or None\n\n\nis_indexer\nis_indexer(idx)\n    Test whether `idx` will index a single item in a list\n\n\nmask2idxs\nmask2idxs(mask)\n    Convert bool mask or index list to index `L`\n\n\nread_config_file\nread_config_file(file, **kwargs)\n    # %% ../nbs/02_foundation.ipynb 130\n\n\nsave_config_file\nsave_config_file(file, d, **kwargs)\n    Write settings dict to a new config file, or overwrite the existing one.\n\n\nworking_directory\nworking_directory(path)\n    Change working directory to `path` and return to previous on exit.\n\n\nzip_cycle\nzip_cycle(x, *args)\n    Like `itertools.zip_longest` but `cycle`s through elements of all but first argument"
  },
  {
    "objectID": "examples/requests/api.html",
    "href": "examples/requests/api.html",
    "title": "api",
    "section": "",
    "text": "requests.api\n~~~~~~~~~~~~\n\nThis module implements the Requests API.\n\n:copyright: (c) 2012 by Kenneth Reitz.\n:license: Apache2, see LICENSE for more details."
  },
  {
    "objectID": "examples/requests/api.html#functions",
    "href": "examples/requests/api.html#functions",
    "title": "api",
    "section": "Functions",
    "text": "Functions\n\ndelete\ndelete(url, **kwargs)\n    Sends a DELETE request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\nget\nget(url, params=None, **kwargs)\n    Sends a GET request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param params: (optional) Dictionary, list of tuples or bytes to send\n        in the query string for the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\nhead\nhead(url, **kwargs)\n    Sends a HEAD request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes. If\n        `allow_redirects` is not provided, it will be set to `False` (as\n        opposed to the default :meth:`request` behavior).\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\noptions\noptions(url, **kwargs)\n    Sends an OPTIONS request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\npatch\npatch(url, data=None, **kwargs)\n    Sends a PATCH request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) json data to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\npost\npost(url, data=None, json=None, **kwargs)\n    Sends a POST request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) json data to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\nput\nput(url, data=None, **kwargs)\n    Sends a PUT request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) json data to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\nrequest\nrequest(method, url, **kwargs)\n    Constructs and sends a :class:`Request <Request>`.\n    \n    :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n    :param url: URL for the new :class:`Request` object.\n    :param params: (optional) Dictionary, list of tuples or bytes to send\n        in the query string for the :class:`Request`.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n    :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n        ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n        or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n        defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n        to add for the file.\n    :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n    :param timeout: (optional) How many seconds to wait for the server to send data\n        before giving up, as a float, or a :ref:`(connect timeout, read\n        timeout) <timeouts>` tuple.\n    :type timeout: float or tuple\n    :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n    :type allow_redirects: bool\n    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n    :param verify: (optional) Either a boolean, in which case it controls whether we verify\n            the server's TLS certificate, or a string, in which case it must be a path\n            to a CA bundle to use. Defaults to ``True``.\n    :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n    :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    \n    Usage::\n    \n      >>> import requests\n      >>> req = requests.request('GET', 'https://httpbin.org/get')\n      >>> req\n      <Response [200]>"
  },
  {
    "objectID": "examples/requests/compat.html",
    "href": "examples/requests/compat.html",
    "title": "compat",
    "section": "",
    "text": "requests.compat\n~~~~~~~~~~~~~~~\n\nThis module previously handled import compatibility issues\nbetween Python 2 and Python 3. It remains for backwards\ncompatibility until the next major version."
  },
  {
    "objectID": "examples/requests/certs.html",
    "href": "examples/requests/certs.html",
    "title": "certs",
    "section": "",
    "text": "requests.certs\n~~~~~~~~~~~~~~\n\nThis module returns the preferred default CA certificate bundle. There is\nonly one — the one from the certifi package.\n\nIf you are packaging Requests, e.g., for a Linux distribution or a managed\nenvironment, you can change the definition of where() to return a separately\npackaged CA bundle."
  },
  {
    "objectID": "examples/requests/cookies.html",
    "href": "examples/requests/cookies.html",
    "title": "cookies",
    "section": "",
    "text": "requests.cookies\n~~~~~~~~~~~~~~~~\n\nCompatibility code to be able to use `cookielib.CookieJar` with requests.\n\nrequests.utils imports from here, so be careful with imports."
  },
  {
    "objectID": "examples/requests/cookies.html#classes",
    "href": "examples/requests/cookies.html#classes",
    "title": "cookies",
    "section": "Classes",
    "text": "Classes\nbuiltins.RuntimeError(builtins.Exception)\n    CookieConflictError\nbuiltins.object\n    MockRequest\n    MockResponse\ncollections.abc.MutableMapping(collections.abc.Mapping)\n    RequestsCookieJar(http.cookiejar.CookieJar, collections.abc.MutableMapping)\nhttp.cookiejar.CookieJar(builtins.object)\n    RequestsCookieJar(http.cookiejar.CookieJar, collections.abc.MutableMapping)\n\nCookieConflictError\nclass CookieConflictError(builtins.RuntimeError)\n |  There are two cookies that meet the criteria specified in the cookie jar.\n |  Use .get and .set and include domain and path args in order to be more specific.\n |  \n |  Method resolution order:\n |      CookieConflictError\n |      builtins.RuntimeError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Data descriptors defined here:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.RuntimeError:\n |  \n |  \n\nRuntimeError.__init__\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.RuntimeError:\n |  \n |  \n\n\nRuntimeError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nMockRequest\nclass MockRequest(builtins.object)\n |  MockRequest(request)\n |  \n |  Wraps a `requests.Request` to mimic a `urllib2.Request`.\n |  \n |  The code in `cookielib.CookieJar` expects this interface in order to correctly\n |  manage cookie policies, i.e., determine whether a cookie can be set, given the\n |  domains of the request and the cookie.\n |  \n |  The original request object is read-only. The client is responsible for collecting\n |  the new headers via `get_new_headers()` and interpreting them appropriately. You\n |  probably want `get_cookie_header`, defined below.\n |  \n |  Methods defined here:\n |  \n |  \n\nMockRequest.__init__\n |  \n |  __init__(self, request)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nMockRequest.add_header\n |  \n |  add_header(self, key, val)\n |      cookielib has no legitimate use for this method; add it back if you find one.\n |  \n |  \n\n\nMockRequest.add_unredirected_header\n |  \n |  add_unredirected_header(self, name, value)\n |  \n |  \n\n\nMockRequest.get_full_url\n |  \n |  get_full_url(self)\n |  \n |  \n\n\nMockRequest.get_header\n |  \n |  get_header(self, name, default=None)\n |  \n |  \n\n\nMockRequest.get_host\n |  \n |  get_host(self)\n |  \n |  \n\n\nMockRequest.get_new_headers\n |  \n |  get_new_headers(self)\n |  \n |  \n\n\nMockRequest.get_origin_req_host\n |  \n |  get_origin_req_host(self)\n |  \n |  \n\n\nMockRequest.get_type\n |  \n |  get_type(self)\n |  \n |  \n\n\nMockRequest.has_header\n |  \n |  has_header(self, name)\n |  \n |  \n\n\nMockRequest.is_unverifiable\n |  \n |  is_unverifiable(self)\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties defined here:\n |  \n |  host\n |  \n |  origin_req_host\n |  \n |  unverifiable\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nMockResponse\nclass MockResponse(builtins.object)\n |  MockResponse(headers)\n |  \n |  Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.\n |  \n |  ...what? Basically, expose the parsed HTTP headers from the server response\n |  the way `cookielib` expects to see them.\n |  \n |  Methods defined here:\n |  \n |  \n\nMockResponse.__init__\n |  \n |  __init__(self, headers)\n |      Make a MockResponse for `cookielib` to read.\n |      \n |      :param headers: a httplib.HTTPMessage or analogous carrying the headers\n |  \n |  \n\n\nMockResponse.getheaders\n |  \n |  getheaders(self, name)\n |  \n |  \n\n\nMockResponse.info\n |  \n |  info(self)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nRequestsCookieJar\n\nclass RequestsCookieJar(http.cookiejar.CookieJar, collections.abc.MutableMapping)\n |  RequestsCookieJar(policy=None)\n |  \n |  Compatibility class; is a cookielib.CookieJar, but exposes a dict\n |  interface.\n |  \n |  This is the CookieJar we create by default for requests and sessions that\n |  don't specify one, since some clients may expect response.cookies and\n |  session.cookies to support dict operations.\n |  \n |  Requests does not use the dict interface internally; it's just for\n |  compatibility with external client code. All requests code should work\n |  out of the box with externally provided instances of ``CookieJar``, e.g.\n |  ``LWPCookieJar`` and ``FileCookieJar``.\n |  \n |  Unlike a regular CookieJar, this class is pickleable.\n |  \n |  .. warning:: dictionary operations that are normally O(1) may be O(n).\n |  \n |  Method resolution order:\n |      RequestsCookieJar\n |      http.cookiejar.CookieJar\n |      collections.abc.MutableMapping\n |      collections.abc.Mapping\n |      collections.abc.Collection\n |      collections.abc.Sized\n |      collections.abc.Iterable\n |      collections.abc.Container\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nRequestsCookieJar.__contains__\n |  \n |  __contains__(self, name)\n |  \n |  \n\n\nRequestsCookieJar.__delitem__\n |  \n |  __delitem__(self, name)\n |      Deletes a cookie given a name. Wraps ``cookielib.CookieJar``'s\n |      ``remove_cookie_by_name()``.\n |  \n |  \n\n\nRequestsCookieJar.__getitem__\n |  \n |  __getitem__(self, name)\n |      Dict-like __getitem__() for compatibility with client code. Throws\n |      exception if there are more than one cookie with name. In that case,\n |      use the more explicit get() method instead.\n |      \n |      .. warning:: operation is O(n), not O(1).\n |  \n |  \n\n\nRequestsCookieJar.__getstate__\n |  \n |  __getstate__(self)\n |      Unlike a normal CookieJar, this class is pickleable.\n |  \n |  \n\n\nRequestsCookieJar.__setitem__\n |  \n |  __setitem__(self, name, value)\n |      Dict-like __setitem__ for compatibility with client code. Throws\n |      exception if there is already a cookie of that name in the jar. In that\n |      case, use the more explicit set() method instead.\n |  \n |  \n\n\nRequestsCookieJar.__setstate__\n |  \n |  __setstate__(self, state)\n |      Unlike a normal CookieJar, this class is pickleable.\n |  \n |  \n\n\nRequestsCookieJar.copy\n |  \n |  copy(self)\n |      Return a copy of this RequestsCookieJar.\n |  \n |  \n\n\nRequestsCookieJar.get\n |  \n |  get(self, name, default=None, domain=None, path=None)\n |      Dict-like get() that also supports optional domain and path args in\n |      order to resolve naming collisions from using one cookie jar over\n |      multiple domains.\n |      \n |      .. warning:: operation is O(n), not O(1).\n |  \n |  \n\n\nRequestsCookieJar.get_dict\n |  \n |  get_dict(self, domain=None, path=None)\n |      Takes as an argument an optional domain and path and returns a plain\n |      old Python dict of name-value pairs of cookies that meet the\n |      requirements.\n |      \n |      :rtype: dict\n |  \n |  \n\n\nRequestsCookieJar.get_policy\n |  \n |  get_policy(self)\n |      Return the CookiePolicy instance used.\n |  \n |  \n\n\nRequestsCookieJar.items\n |  \n |  items(self)\n |      Dict-like items() that returns a list of name-value tuples from the\n |      jar. Allows client-code to call ``dict(RequestsCookieJar)`` and get a\n |      vanilla python dict of key value pairs.\n |      \n |      .. seealso:: keys() and values().\n |  \n |  \n\n\nRequestsCookieJar.iteritems\n |  \n |  iteritems(self)\n |      Dict-like iteritems() that returns an iterator of name-value tuples\n |      from the jar.\n |      \n |      .. seealso:: iterkeys() and itervalues().\n |  \n |  \n\n\nRequestsCookieJar.iterkeys\n |  \n |  iterkeys(self)\n |      Dict-like iterkeys() that returns an iterator of names of cookies\n |      from the jar.\n |      \n |      .. seealso:: itervalues() and iteritems().\n |  \n |  \n\n\nRequestsCookieJar.itervalues\n |  \n |  itervalues(self)\n |      Dict-like itervalues() that returns an iterator of values of cookies\n |      from the jar.\n |      \n |      .. seealso:: iterkeys() and iteritems().\n |  \n |  \n\n\nRequestsCookieJar.keys\n |  \n |  keys(self)\n |      Dict-like keys() that returns a list of names of cookies from the\n |      jar.\n |      \n |      .. seealso:: values() and items().\n |  \n |  \n\n\nRequestsCookieJar.list_domains\n |  \n |  list_domains(self)\n |      Utility method to list all the domains in the jar.\n |  \n |  \n\n\nRequestsCookieJar.list_paths\n |  \n |  list_paths(self)\n |      Utility method to list all the paths in the jar.\n |  \n |  \n\n\nRequestsCookieJar.multiple_domains\n |  \n |  multiple_domains(self)\n |      Returns True if there are multiple domains in the jar.\n |      Returns False otherwise.\n |      \n |      :rtype: bool\n |  \n |  \n\n\nRequestsCookieJar.set\n |  \n |  set(self, name, value, **kwargs)\n |      Dict-like set() that also supports optional domain and path args in\n |      order to resolve naming collisions from using one cookie jar over\n |      multiple domains.\n |  \n |  \n\n\nRequestsCookieJar.set_cookie\n |  \n |  set_cookie(self, cookie, *args, **kwargs)\n |      Set a cookie, without checking whether or not it should be set.\n |  \n |  \n\n\nRequestsCookieJar.update\n |  \n |  update(self, other)\n |      Updates this jar with cookies from another CookieJar or dict-like\n |  \n |  \n\n\nRequestsCookieJar.values\n |  \n |  values(self)\n |      Dict-like values() that returns a list of values of cookies from the\n |      jar.\n |      \n |      .. seealso:: keys() and items().\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __abstractmethods__ = frozenset()\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from http.cookiejar.CookieJar:\n |  \n |  \n\n\nCookieJar.__init__\n |  \n |  __init__(self, policy=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nCookieJar.__iter__\n |  \n |  __iter__(self)\n |  \n |  \n\n\nCookieJar.__len__\n |  \n |  __len__(self)\n |      Return number of contained cookies.\n |  \n |  \n\n\nCookieJar.__repr__\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\nCookieJar.__str__\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  \n\n\nCookieJar.add_cookie_header\n |  \n |  add_cookie_header(self, request)\n |      Add correct Cookie: header to request (urllib.request.Request object).\n |      \n |      The Cookie2 header is also added unless policy.hide_cookie2 is true.\n |  \n |  \n\n\nCookieJar.clear\n |  \n |  clear(self, domain=None, path=None, name=None)\n |      Clear some cookies.\n |      \n |      Invoking this method without arguments will clear all cookies.  If\n |      given a single argument, only cookies belonging to that domain will be\n |      removed.  If given two arguments, cookies belonging to the specified\n |      path within that domain are removed.  If given three arguments, then\n |      the cookie with the specified name, path and domain is removed.\n |      \n |      Raises KeyError if no matching cookie exists.\n |  \n |  \n\n\nCookieJar.clear_expired_cookies\n |  \n |  clear_expired_cookies(self)\n |      Discard all expired cookies.\n |      \n |      You probably don't need to call this method: expired cookies are never\n |      sent back to the server (provided you're using DefaultCookiePolicy),\n |      this method is called by CookieJar itself every so often, and the\n |      .save() method won't save expired cookies anyway (unless you ask\n |      otherwise by passing a true ignore_expires argument).\n |  \n |  \n\n\nCookieJar.clear_session_cookies\n |  \n |  clear_session_cookies(self)\n |      Discard all session cookies.\n |      \n |      Note that the .save() method won't save session cookies anyway, unless\n |      you ask otherwise by passing a true ignore_discard argument.\n |  \n |  \n\n\nCookieJar.extract_cookies\n |  \n |  extract_cookies(self, response, request)\n |      Extract cookies from response, where allowable given the request.\n |  \n |  \n\n\nCookieJar.make_cookies\n |  \n |  make_cookies(self, response, request)\n |      Return sequence of Cookie objects extracted from response object.\n |  \n |  \n\n\nCookieJar.set_cookie_if_ok\n |  \n |  set_cookie_if_ok(self, cookie, request)\n |      Set a cookie if policy says it's OK to do so.\n |  \n |  \n\n\nCookieJar.set_policy\n |  \n |  set_policy(self, policy)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from http.cookiejar.CookieJar:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from http.cookiejar.CookieJar:\n |  \n |  domain_re = re.compile('[^.]*')\n |  \n |  dots_re = re.compile('^\\\\.+')\n |  \n |  magic_re = re.compile('^\\\\#LWP-Cookies-(\\\\d+\\\\.\\\\d+)', re.ASCII)\n |  \n |  non_word_re = re.compile('\\\\W')\n |  \n |  quote_re = re.compile('([\\\\\"\\\\\\\\])')\n |  \n |  strict_domain_re = re.compile('\\\\.?[^.]*')\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from collections.abc.MutableMapping:\n |  \n |  \n\n\nMutableMapping.pop\n |  \n |  pop(self, key, default=<object object at 0x10df02160>)\n |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n |      If key is not found, d is returned if given, otherwise KeyError is raised.\n |  \n |  \n\n\nMutableMapping.popitem\n |  \n |  popitem(self)\n |      D.popitem() -> (k, v), remove and return some (key, value) pair\n |      as a 2-tuple; but raise KeyError if D is empty.\n |  \n |  \n\n\nMutableMapping.setdefault\n |  \n |  setdefault(self, key, default=None)\n |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from collections.abc.Mapping:\n |  \n |  \n\n\nMapping.__eq__\n |  \n |  __eq__(self, other)\n |      Return self==value.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from collections.abc.Mapping:\n |  \n |  __hash__ = None\n |  \n |  __reversed__ = None\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from collections.abc.Collection:\n |  \n |  \n\n\nCollection.__subclasshook__\n |  \n |  __subclasshook__(C) from abc.ABCMeta\n |      Abstract classes can override this to customize issubclass().\n |      \n |      This is invoked early on by abc.ABCMeta.__subclasscheck__().\n |      It should return True, False or NotImplemented.  If it returns\n |      NotImplemented, the normal algorithm is used.  Otherwise, it\n |      overrides the normal algorithm (and the outcome is cached).\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from collections.abc.Iterable:\n |  \n |  \n\n\nGenericAlias\n |  \n |  __class_getitem__ = GenericAlias(...) from abc.ABCMeta\n |      Represent a PEP 585 generic type\n |      \n |      E.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,)."
  },
  {
    "objectID": "examples/requests/cookies.html#functions",
    "href": "examples/requests/cookies.html#functions",
    "title": "cookies",
    "section": "Functions",
    "text": "Functions\n\ncookiejar_from_dict\ncookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True)\n    Returns a CookieJar from a key/value dictionary.\n    \n    :param cookie_dict: Dict of key/values to insert into CookieJar.\n    :param cookiejar: (optional) A cookiejar to add the cookies to.\n    :param overwrite: (optional) If False, will not replace cookies\n        already in the jar with new ones.\n    :rtype: CookieJar\n\n\ncreate_cookie\ncreate_cookie(name, value, **kwargs)\n    Make a cookie from underspecified parameters.\n    \n    By default, the pair of `name` and `value` will be set for the domain ''\n    and sent on every request (this is sometimes called a \"supercookie\").\n\n\nextract_cookies_to_jar\nextract_cookies_to_jar(jar, request, response)\n    Extract the cookies from the response into a CookieJar.\n    \n    :param jar: cookielib.CookieJar (not necessarily a RequestsCookieJar)\n    :param request: our own requests.Request object\n    :param response: urllib3.HTTPResponse object\n\n\nget_cookie_header\nget_cookie_header(jar, request)\n    Produce an appropriate Cookie header string to be sent with `request`, or None.\n    \n    :rtype: str\n\n\nmerge_cookies\nmerge_cookies(cookiejar, cookies)\n    Add cookies to cookiejar and returns a merged CookieJar.\n    \n    :param cookiejar: CookieJar object to add the cookies to.\n    :param cookies: Dictionary or CookieJar object to be added.\n    :rtype: CookieJar\n\n\nmorsel_to_cookie\nmorsel_to_cookie(morsel)\n    Convert a Morsel object into a Cookie containing the one k/v pair.\n\n\nremove_cookie_by_name\nremove_cookie_by_name(cookiejar, name, domain=None, path=None)\n    Unsets a cookie by name, by default over all domains and paths.\n    \n    Wraps CookieJar.clear(), is O(n)."
  },
  {
    "objectID": "examples/requests/models.html",
    "href": "examples/requests/models.html",
    "title": "models",
    "section": "",
    "text": "requests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests."
  },
  {
    "objectID": "examples/requests/models.html#classes",
    "href": "examples/requests/models.html#classes",
    "title": "models",
    "section": "Classes",
    "text": "Classes\nbuiltins.object\n    RequestEncodingMixin\n        PreparedRequest(RequestEncodingMixin, RequestHooksMixin)\n    RequestHooksMixin\n        Request\n    Response\n\nPreparedRequest\nclass PreparedRequest(RequestEncodingMixin, RequestHooksMixin)\n |  The fully mutable :class:`PreparedRequest <PreparedRequest>` object,\n |  containing the exact bytes that will be sent to the server.\n |  \n |  Instances are generated from a :class:`Request <Request>` object, and\n |  should not be instantiated manually; doing so may produce undesirable\n |  effects.\n |  \n |  Usage::\n |  \n |    >>> import requests\n |    >>> req = requests.Request('GET', 'https://httpbin.org/get')\n |    >>> r = req.prepare()\n |    >>> r\n |    <PreparedRequest [GET]>\n |  \n |    >>> s = requests.Session()\n |    >>> s.send(r)\n |    <Response [200]>\n |  \n |  Method resolution order:\n |      PreparedRequest\n |      RequestEncodingMixin\n |      RequestHooksMixin\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nPreparedRequest.__init__\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nPreparedRequest.__repr__\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\nPreparedRequest.copy\n |  \n |  copy(self)\n |  \n |  \n\n\nPreparedRequest.prepare\n |  \n |  prepare(self, method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)\n |      Prepares the entire request with the given parameters.\n |  \n |  \n\n\nPreparedRequest.prepare_auth\n |  \n |  prepare_auth(self, auth, url='')\n |      Prepares the given HTTP auth data.\n |  \n |  \n\n\nPreparedRequest.prepare_body\n |  \n |  prepare_body(self, data, files, json=None)\n |      Prepares the given HTTP body data.\n |  \n |  \n\n\nPreparedRequest.prepare_content_length\n |  \n |  prepare_content_length(self, body)\n |      Prepare Content-Length header based on request method and body\n |  \n |  \n\n\nPreparedRequest.prepare_cookies\n |  \n |  prepare_cookies(self, cookies)\n |      Prepares the given HTTP cookie data.\n |      \n |      This function eventually generates a ``Cookie`` header from the\n |      given cookies using cookielib. Due to cookielib's design, the header\n |      will not be regenerated if it already exists, meaning this function\n |      can only be called once for the life of the\n |      :class:`PreparedRequest <PreparedRequest>` object. Any subsequent calls\n |      to ``prepare_cookies`` will have no actual effect, unless the \"Cookie\"\n |      header is removed beforehand.\n |  \n |  \n\n\nPreparedRequest.prepare_headers\n |  \n |  prepare_headers(self, headers)\n |      Prepares the given HTTP headers.\n |  \n |  \n\n\nPreparedRequest.prepare_hooks\n |  \n |  prepare_hooks(self, hooks)\n |      Prepares the given hooks.\n |  \n |  \n\n\nPreparedRequest.prepare_method\n |  \n |  prepare_method(self, method)\n |      Prepares the given HTTP method.\n |  \n |  \n\n\nPreparedRequest.prepare_url\n |  \n |  prepare_url(self, url, params)\n |      Prepares the given HTTP URL.\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from RequestEncodingMixin:\n |  \n |  path_url\n |      Build the path URL to use.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestEncodingMixin:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from RequestHooksMixin:\n |  \n |  \n\n\nRequestHooksMixin.deregister_hook\n |  \n |  deregister_hook(self, event, hook)\n |      Deregister a previously registered hook.\n |      Returns True if the hook existed, False if not.\n |  \n |  \n\n\nRequestHooksMixin.register_hook\n |  \n |  register_hook(self, event, hook)\n |      Properly register a hook.\n\n\n\nRequest\nclass Request(RequestHooksMixin)\n |  Request(method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)\n |  \n |  A user-created :class:`Request <Request>` object.\n |  \n |  Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.\n |  \n |  :param method: HTTP method to use.\n |  :param url: URL to send.\n |  :param headers: dictionary of headers to send.\n |  :param files: dictionary of {filename: fileobject} files to multipart upload.\n |  :param data: the body to attach to the request. If a dictionary or\n |      list of tuples ``[(key, value)]`` is provided, form-encoding will\n |      take place.\n |  :param json: json for the body to attach to the request (if files or data is not specified).\n |  :param params: URL parameters to append to the URL. If a dictionary or\n |      list of tuples ``[(key, value)]`` is provided, form-encoding will\n |      take place.\n |  :param auth: Auth handler or (user, pass) tuple.\n |  :param cookies: dictionary or CookieJar of cookies to attach to this request.\n |  :param hooks: dictionary of callback hooks, for internal usage.\n |  \n |  Usage::\n |  \n |    >>> import requests\n |    >>> req = requests.Request('GET', 'https://httpbin.org/get')\n |    >>> req.prepare()\n |    <PreparedRequest [GET]>\n |  \n |  Method resolution order:\n |      Request\n |      RequestHooksMixin\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nRequest.__init__\n |  \n |  __init__(self, method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nRequest.__repr__\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\nRequest.prepare\n |  \n |  prepare(self)\n |      Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from RequestHooksMixin:\n |  \n |  \n\n\nRequestHooksMixin.deregister_hook\n |  \n |  deregister_hook(self, event, hook)\n |      Deregister a previously registered hook.\n |      Returns True if the hook existed, False if not.\n |  \n |  \n\n\nRequestHooksMixin.register_hook\n |  \n |  register_hook(self, event, hook)\n |      Properly register a hook.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestHooksMixin:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nRequestEncodingMixin\nclass RequestEncodingMixin(builtins.object)\n |  Readonly properties defined here:\n |  \n |  path_url\n |      Build the path URL to use.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\nRequestHooksMixin\nclass RequestHooksMixin(builtins.object)\n |  Methods defined here:\n |  \n |  \n\nRequestHooksMixin.deregister_hook\n |  \n |  deregister_hook(self, event, hook)\n |      Deregister a previously registered hook.\n |      Returns True if the hook existed, False if not.\n |  \n |  \n\n\nRequestHooksMixin.register_hook\n |  \n |  register_hook(self, event, hook)\n |      Properly register a hook.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nResponse\nclass Response(builtins.object)\n |  The :class:`Response <Response>` object, which contains a\n |  server's response to an HTTP request.\n |  \n |  Methods defined here:\n |  \n |  \n\nResponse.__bool__\n |  \n |  __bool__(self)\n |      Returns True if :attr:`status_code` is less than 400.\n |      \n |      This attribute checks if the status code of the response is between\n |      400 and 600 to see if there was a client error or a server error. If\n |      the status code, is between 200 and 400, this will return True. This\n |      is **not** a check to see if the response code is ``200 OK``.\n |  \n |  \n\n\nResponse.__enter__\n |  \n |  __enter__(self)\n |  \n |  \n\n\nResponse.__exit__\n |  \n |  __exit__(self, *args)\n |  \n |  \n\n\nResponse.__getstate__\n |  \n |  __getstate__(self)\n |  \n |  \n\n\nResponse.__init__\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nResponse.__iter__\n |  \n |  __iter__(self)\n |      Allows you to use a response as an iterator.\n |  \n |  \n\n\nResponse.__nonzero__\n |  \n |  __nonzero__(self)\n |      Returns True if :attr:`status_code` is less than 400.\n |      \n |      This attribute checks if the status code of the response is between\n |      400 and 600 to see if there was a client error or a server error. If\n |      the status code, is between 200 and 400, this will return True. This\n |      is **not** a check to see if the response code is ``200 OK``.\n |  \n |  \n\n\nResponse.__repr__\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\nResponse.__setstate__\n |  \n |  __setstate__(self, state)\n |  \n |  \n\n\nResponse.close\n |  \n |  close(self)\n |      Releases the connection back to the pool. Once this method has been\n |      called the underlying ``raw`` object must not be accessed again.\n |      \n |      *Note: Should not normally need to be called explicitly.*\n |  \n |  \n\n\nResponse.iter_content\n |  \n |  iter_content(self, chunk_size=1, decode_unicode=False)\n |      Iterates over the response data.  When stream=True is set on the\n |      request, this avoids reading the content at once into memory for\n |      large responses.  The chunk size is the number of bytes it should\n |      read into memory.  This is not necessarily the length of each item\n |      returned as decoding can take place.\n |      \n |      chunk_size must be of type int or None. A value of None will\n |      function differently depending on the value of `stream`.\n |      stream=True will read data as it arrives in whatever size the\n |      chunks are received. If stream=False, data is returned as\n |      a single chunk.\n |      \n |      If decode_unicode is True, content will be decoded using the best\n |      available encoding based on the response.\n |  \n |  \n\n\nResponse.iter_lines\n |  \n |  iter_lines(self, chunk_size=512, decode_unicode=False, delimiter=None)\n |      Iterates over the response data, one line at a time.  When\n |      stream=True is set on the request, this avoids reading the\n |      content at once into memory for large responses.\n |      \n |      .. note:: This method is not reentrant safe.\n |  \n |  \n\n\nResponse.json\n |  \n |  json(self, **kwargs)\n |      Returns the json-encoded content of a response, if any.\n |      \n |      :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n |      :raises requests.exceptions.JSONDecodeError: If the response body does not\n |          contain valid json.\n |  \n |  \n\n\nResponse.raise_for_status\n |  \n |  raise_for_status(self)\n |      Raises :class:`HTTPError`, if one occurred.\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties defined here:\n |  \n |  apparent_encoding\n |      The apparent encoding, provided by the charset_normalizer or chardet libraries.\n |  \n |  content\n |      Content of the response, in bytes.\n |  \n |  is_permanent_redirect\n |      True if this Response one of the permanent versions of redirect.\n |  \n |  is_redirect\n |      True if this Response is a well-formed HTTP redirect that could have\n |      been processed automatically (by :meth:`Session.resolve_redirects`).\n |  \n |  links\n |      Returns the parsed header links of the response, if any.\n |  \n |  next\n |      Returns a PreparedRequest for the next request in a redirect chain, if there is one.\n |  \n |  ok\n |      Returns True if :attr:`status_code` is less than 400, False if not.\n |      \n |      This attribute checks if the status code of the response is between\n |      400 and 600 to see if there was a client error or a server error. If\n |      the status code is between 200 and 400, this will return True. This\n |      is **not** a check to see if the response code is ``200 OK``.\n |  \n |  text\n |      Content of the response, in unicode.\n |      \n |      If Response.encoding is None, encoding will be guessed using\n |      ``charset_normalizer`` or ``chardet``.\n |      \n |      The encoding of the response content is determined based solely on HTTP\n |      headers, following RFC 2616 to the letter. If you can take advantage of\n |      non-HTTP knowledge to make a better guess at the encoding, you should\n |      set ``r.encoding`` appropriately before accessing this property.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __attrs__ = ['_content', 'status_code', 'headers', 'url', 'history', '..."
  },
  {
    "objectID": "examples/requests/structures.html",
    "href": "examples/requests/structures.html",
    "title": "structures",
    "section": "",
    "text": "requests.structures\n~~~~~~~~~~~~~~~~~~~\n\nData structures that power Requests."
  },
  {
    "objectID": "examples/requests/structures.html#classes",
    "href": "examples/requests/structures.html#classes",
    "title": "structures",
    "section": "Classes",
    "text": "Classes\nbuiltins.dict(builtins.object)\n    LookupDict\ncollections.abc.MutableMapping(collections.abc.Mapping)\n    CaseInsensitiveDict\n\nCaseInsensitiveDict\n\nclass CaseInsensitiveDict(collections.abc.MutableMapping)\n |  CaseInsensitiveDict(data=None, **kwargs)\n |  \n |  A case-insensitive ``dict``-like object.\n |  \n |  Implements all methods and operations of\n |  ``MutableMapping`` as well as dict's ``copy``. Also\n |  provides ``lower_items``.\n |  \n |  All keys are expected to be strings. The structure remembers the\n |  case of the last key to be set, and ``iter(instance)``,\n |  ``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``\n |  will contain case-sensitive keys. However, querying and contains\n |  testing is case insensitive::\n |  \n |      cid = CaseInsensitiveDict()\n |      cid['Accept'] = 'application/json'\n |      cid['aCCEPT'] == 'application/json'  # True\n |      list(cid) == ['Accept']  # True\n |  \n |  For example, ``headers['content-encoding']`` will return the\n |  value of a ``'Content-Encoding'`` response header, regardless\n |  of how the header name was originally stored.\n |  \n |  If the constructor, ``.update``, or equality comparison\n |  operations are given keys that have equal ``.lower()``s, the\n |  behavior is undefined.\n |  \n |  Method resolution order:\n |      CaseInsensitiveDict\n |      collections.abc.MutableMapping\n |      collections.abc.Mapping\n |      collections.abc.Collection\n |      collections.abc.Sized\n |      collections.abc.Iterable\n |      collections.abc.Container\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nCaseInsensitiveDict.__delitem__\n |  \n |  __delitem__(self, key)\n |  \n |  \n\n\nCaseInsensitiveDict.__eq__\n |  \n |  __eq__(self, other)\n |      Return self==value.\n |  \n |  \n\n\nCaseInsensitiveDict.__getitem__\n |  \n |  __getitem__(self, key)\n |  \n |  \n\n\nCaseInsensitiveDict.__init__\n |  \n |  __init__(self, data=None, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nCaseInsensitiveDict.__iter__\n |  \n |  __iter__(self)\n |  \n |  \n\n\nCaseInsensitiveDict.__len__\n |  \n |  __len__(self)\n |  \n |  \n\n\nCaseInsensitiveDict.__repr__\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\nCaseInsensitiveDict.__setitem__\n |  \n |  __setitem__(self, key, value)\n |  \n |  \n\n\nCaseInsensitiveDict.copy\n |  \n |  copy(self)\n |      # Copy is required\n |  \n |  \n\n\nCaseInsensitiveDict.lower_items\n |  \n |  lower_items(self)\n |      Like iteritems(), but with all lowercase keys.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __abstractmethods__ = frozenset()\n |  \n |  __hash__ = None\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from collections.abc.MutableMapping:\n |  \n |  \n\n\nMutableMapping.clear\n |  \n |  clear(self)\n |      D.clear() -> None.  Remove all items from D.\n |  \n |  \n\n\nMutableMapping.pop\n |  \n |  pop(self, key, default=<object object at 0x10df02160>)\n |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n |      If key is not found, d is returned if given, otherwise KeyError is raised.\n |  \n |  \n\n\nMutableMapping.popitem\n |  \n |  popitem(self)\n |      D.popitem() -> (k, v), remove and return some (key, value) pair\n |      as a 2-tuple; but raise KeyError if D is empty.\n |  \n |  \n\n\nMutableMapping.setdefault\n |  \n |  setdefault(self, key, default=None)\n |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\n |  \n |  \n\n\nMutableMapping.update\n |  \n |  update(self, other=(), /, **kwds)\n |      D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.\n |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]\n |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\n |      In either case, this is followed by: for k, v in F.items(): D[k] = v\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from collections.abc.Mapping:\n |  \n |  \n\n\nMapping.__contains__\n |  \n |  __contains__(self, key)\n |  \n |  \n\n\nMapping.get\n |  \n |  get(self, key, default=None)\n |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\n |  \n |  \n\n\nMapping.items\n |  \n |  items(self)\n |      D.items() -> a set-like object providing a view on D's items\n |  \n |  \n\n\nMapping.keys\n |  \n |  keys(self)\n |      D.keys() -> a set-like object providing a view on D's keys\n |  \n |  \n\n\nMapping.values\n |  \n |  values(self)\n |      D.values() -> an object providing a view on D's values\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from collections.abc.Mapping:\n |  \n |  __reversed__ = None\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from collections.abc.Collection:\n |  \n |  \n\n\nCollection.__subclasshook__\n |  \n |  __subclasshook__(C) from abc.ABCMeta\n |      Abstract classes can override this to customize issubclass().\n |      \n |      This is invoked early on by abc.ABCMeta.__subclasscheck__().\n |      It should return True, False or NotImplemented.  If it returns\n |      NotImplemented, the normal algorithm is used.  Otherwise, it\n |      overrides the normal algorithm (and the outcome is cached).\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from collections.abc.Iterable:\n |  \n |  \n\n\nGenericAlias\n |  \n |  __class_getitem__ = GenericAlias(...) from abc.ABCMeta\n |      Represent a PEP 585 generic type\n |      \n |      E.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,).\n\n\n\nLookupDict\nclass LookupDict(builtins.dict)\n |  LookupDict(name=None)\n |  \n |  Dictionary lookup object.\n |  \n |  Method resolution order:\n |      LookupDict\n |      builtins.dict\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nLookupDict.__getitem__\n |  \n |  __getitem__(self, key)\n |      x.__getitem__(y) <==> x[y]\n |  \n |  \n\n\nLookupDict.__init__\n |  \n |  __init__(self, name=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nLookupDict.__repr__\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\nLookupDict.get\n |  \n |  get(self, key, default=None)\n |      Return the value for key if key is in the dictionary, else default.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.dict:\n |  \n |  \n\n\ndict.__contains__\n |  \n |  __contains__(self, key, /)\n |      True if the dictionary has the specified key, else False.\n |  \n |  \n\n\ndict.__delitem__\n |  \n |  __delitem__(self, key, /)\n |      Delete self[key].\n |  \n |  \n\n\ndict.__eq__\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  \n\n\ndict.__ge__\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  \n\n\ndict.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\ndict.__gt__\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  \n\n\ndict.__ior__\n |  \n |  __ior__(self, value, /)\n |      Return self|=value.\n |  \n |  \n\n\ndict.__iter__\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  \n\n\ndict.__le__\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  \n\n\ndict.__len__\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  \n\n\ndict.__lt__\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  \n\n\ndict.__ne__\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  \n\n\ndict.__or__\n |  \n |  __or__(self, value, /)\n |      Return self|value.\n |  \n |  \n\n\ndict.__reversed__\n |  \n |  __reversed__(self, /)\n |      Return a reverse iterator over the dict keys.\n |  \n |  \n\n\ndict.__ror__\n |  \n |  __ror__(self, value, /)\n |      Return value|self.\n |  \n |  \n\n\ndict.__setitem__\n |  \n |  __setitem__(self, key, value, /)\n |      Set self[key] to value.\n |  \n |  \n\n\ndict.__sizeof__\n |  \n |  __sizeof__(...)\n |      D.__sizeof__() -> size of D in memory, in bytes\n |  \n |  \n\n\ndict.clear\n |  \n |  clear(...)\n |      D.clear() -> None.  Remove all items from D.\n |  \n |  \n\n\ndict.copy\n |  \n |  copy(...)\n |      D.copy() -> a shallow copy of D\n |  \n |  \n\n\ndict.items\n |  \n |  items(...)\n |      D.items() -> a set-like object providing a view on D's items\n |  \n |  \n\n\ndict.keys\n |  \n |  keys(...)\n |      D.keys() -> a set-like object providing a view on D's keys\n |  \n |  \n\n\ndict.pop\n |  \n |  pop(...)\n |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n |      \n |      If key is not found, default is returned if given, otherwise KeyError is raised\n |  \n |  \n\n\ndict.popitem\n |  \n |  popitem(self, /)\n |      Remove and return a (key, value) pair as a 2-tuple.\n |      \n |      Pairs are returned in LIFO (last-in, first-out) order.\n |      Raises KeyError if the dict is empty.\n |  \n |  \n\n\ndict.setdefault\n |  \n |  setdefault(self, key, default=None, /)\n |      Insert key with a value of default if key is not in the dictionary.\n |      \n |      Return the value for key if key is in the dictionary, else default.\n |  \n |  \n\n\ndict.update\n |  \n |  update(...)\n |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\n |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\n |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\n |      In either case, this is followed by: for k in F:  D[k] = F[k]\n |  \n |  \n\n\ndict.values\n |  \n |  values(...)\n |      D.values() -> an object providing a view on D's values\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from builtins.dict:\n |  \n |  \n\n\nLookupDict.__class_getitem__\n |  \n |  __class_getitem__(...) from builtins.type\n |      See PEP 585\n |  \n |  \n\n\nLookupDict.fromkeys\n |  \n |  fromkeys(iterable, value=None, /) from builtins.type\n |      Create a new dictionary with keys from iterable and values set to value.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.dict:\n |  \n |  \n\n\ndict.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from builtins.dict:\n |  \n |  __hash__ = None"
  },
  {
    "objectID": "examples/requests/help.html",
    "href": "examples/requests/help.html",
    "title": "help",
    "section": "",
    "text": "info()\n    Generate information for a bug report.\n\n\n\nmain()\n    Pretty-print the bug information as JSON."
  },
  {
    "objectID": "examples/requests/exceptions.html",
    "href": "examples/requests/exceptions.html",
    "title": "exceptions",
    "section": "",
    "text": "requests.exceptions\n~~~~~~~~~~~~~~~~~~~\n\nThis module contains the set of Requests' exceptions."
  },
  {
    "objectID": "examples/requests/exceptions.html#classes",
    "href": "examples/requests/exceptions.html#classes",
    "title": "exceptions",
    "section": "Classes",
    "text": "Classes\nbuiltins.OSError(builtins.Exception)\n    RequestException\n        ChunkedEncodingError\n        ConnectionError\n            ConnectTimeout(ConnectionError, Timeout)\n            ProxyError\n            SSLError\n        ContentDecodingError(RequestException, urllib3.exceptions.HTTPError)\n        HTTPError\n        InvalidHeader(RequestException, builtins.ValueError)\n        InvalidJSONError\n            JSONDecodeError(InvalidJSONError, simplejson.errors.JSONDecodeError)\n        InvalidSchema(RequestException, builtins.ValueError)\n        InvalidURL(RequestException, builtins.ValueError)\n            InvalidProxyURL\n        MissingSchema(RequestException, builtins.ValueError)\n        RetryError\n        StreamConsumedError(RequestException, builtins.TypeError)\n        Timeout\n            ReadTimeout\n        TooManyRedirects\n        URLRequired\n        UnrewindableBodyError\nbuiltins.Warning(builtins.Exception)\n    RequestsWarning\n        FileModeWarning(RequestsWarning, builtins.DeprecationWarning)\n        RequestsDependencyWarning\n\nChunkedEncodingError\nclass ChunkedEncodingError(RequestException)\n |  ChunkedEncodingError(*args, **kwargs)\n |  \n |  The server declared chunked encoding but sent an invalid chunk.\n |  \n |  Method resolution order:\n |      ChunkedEncodingError\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nConnectTimeout\nclass ConnectTimeout(ConnectionError, Timeout)\n |  ConnectTimeout(*args, **kwargs)\n |  \n |  The request timed out while trying to connect to the remote server.\n |  \n |  Requests that produced this error are safe to retry.\n |  \n |  Method resolution order:\n |      ConnectTimeout\n |      ConnectionError\n |      Timeout\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nConnectionError\nclass ConnectionError(RequestException)\n |  ConnectionError(*args, **kwargs)\n |  \n |  A Connection error occurred.\n |  \n |  Method resolution order:\n |      ConnectionError\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nContentDecodingError\nclass ContentDecodingError(RequestException, urllib3.exceptions.HTTPError)\n |  ContentDecodingError(*args, **kwargs)\n |  \n |  Failed to decode response content.\n |  \n |  Method resolution order:\n |      ContentDecodingError\n |      RequestException\n |      builtins.OSError\n |      urllib3.exceptions.HTTPError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nFileModeWarning\nclass FileModeWarning(RequestsWarning, builtins.DeprecationWarning)\n |  A file was opened in text mode, but Requests determined its binary length.\n |  \n |  Method resolution order:\n |      FileModeWarning\n |      RequestsWarning\n |      builtins.DeprecationWarning\n |      builtins.Warning\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Data descriptors inherited from RequestsWarning:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.DeprecationWarning:\n |  \n |  \n\nDeprecationWarning.__init__\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.DeprecationWarning:\n |  \n |  \n\n\nDeprecationWarning.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nHTTPError\nclass HTTPError(RequestException)\n |  HTTPError(*args, **kwargs)\n |  \n |  An HTTP error occurred.\n |  \n |  Method resolution order:\n |      HTTPError\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nInvalidHeader\nclass InvalidHeader(RequestException, builtins.ValueError)\n |  InvalidHeader(*args, **kwargs)\n |  \n |  The header value provided was somehow invalid.\n |  \n |  Method resolution order:\n |      InvalidHeader\n |      RequestException\n |      builtins.OSError\n |      builtins.ValueError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nInvalidJSONError\nclass InvalidJSONError(RequestException)\n |  InvalidJSONError(*args, **kwargs)\n |  \n |  A JSON error occurred.\n |  \n |  Method resolution order:\n |      InvalidJSONError\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nInvalidProxyURL\nclass InvalidProxyURL(InvalidURL)\n |  InvalidProxyURL(*args, **kwargs)\n |  \n |  The proxy URL provided is invalid.\n |  \n |  Method resolution order:\n |      InvalidProxyURL\n |      InvalidURL\n |      RequestException\n |      builtins.OSError\n |      builtins.ValueError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nInvalidSchema\nclass InvalidSchema(RequestException, builtins.ValueError)\n |  InvalidSchema(*args, **kwargs)\n |  \n |  The URL scheme provided is either invalid or unsupported.\n |  \n |  Method resolution order:\n |      InvalidSchema\n |      RequestException\n |      builtins.OSError\n |      builtins.ValueError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nInvalidURL\nclass InvalidURL(RequestException, builtins.ValueError)\n |  InvalidURL(*args, **kwargs)\n |  \n |  The URL provided was somehow invalid.\n |  \n |  Method resolution order:\n |      InvalidURL\n |      RequestException\n |      builtins.OSError\n |      builtins.ValueError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nJSONDecodeError\nclass JSONDecodeError(InvalidJSONError, simplejson.errors.JSONDecodeError)\n |  JSONDecodeError(*args, **kwargs)\n |  \n |  Couldn't decode the text into json\n |  \n |  Method resolution order:\n |      JSONDecodeError\n |      InvalidJSONError\n |      RequestException\n |      builtins.OSError\n |      simplejson.errors.JSONDecodeError\n |      builtins.ValueError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nJSONDecodeError.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Construct the JSONDecodeError instance first with all\n |      args. Then use it's args to construct the IOError so that\n |      the json specific args aren't used as IOError specific args\n |      and the error message from JSONDecodeError is preserved.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nMissingSchema\nclass MissingSchema(RequestException, builtins.ValueError)\n |  MissingSchema(*args, **kwargs)\n |  \n |  The URL scheme (e.g. http or https) is missing.\n |  \n |  Method resolution order:\n |      MissingSchema\n |      RequestException\n |      builtins.OSError\n |      builtins.ValueError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nProxyError\nclass ProxyError(ConnectionError)\n |  ProxyError(*args, **kwargs)\n |  \n |  A proxy error occurred.\n |  \n |  Method resolution order:\n |      ProxyError\n |      ConnectionError\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nReadTimeout\nclass ReadTimeout(Timeout)\n |  ReadTimeout(*args, **kwargs)\n |  \n |  The server did not send any data in the allotted amount of time.\n |  \n |  Method resolution order:\n |      ReadTimeout\n |      Timeout\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nRequestException\nclass RequestException(builtins.OSError)\n |  RequestException(*args, **kwargs)\n |  \n |  There was an ambiguous exception that occurred while handling your\n |  request.\n |  \n |  Method resolution order:\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nRequestsDependencyWarning\nclass RequestsDependencyWarning(RequestsWarning)\n |  An imported dependency doesn't match the expected version range.\n |  \n |  Method resolution order:\n |      RequestsDependencyWarning\n |      RequestsWarning\n |      builtins.Warning\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Data descriptors inherited from RequestsWarning:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.Warning:\n |  \n |  \n\nWarning.__init__\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.Warning:\n |  \n |  \n\n\nWarning.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nRequestsWarning\nclass RequestsWarning(builtins.Warning)\n |  Base warning for Requests.\n |  \n |  Method resolution order:\n |      RequestsWarning\n |      builtins.Warning\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Data descriptors defined here:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.Warning:\n |  \n |  \n\nWarning.__init__\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.Warning:\n |  \n |  \n\n\nWarning.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nRetryError\nclass RetryError(RequestException)\n |  RetryError(*args, **kwargs)\n |  \n |  Custom retries logic failed\n |  \n |  Method resolution order:\n |      RetryError\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nSSLError\nclass SSLError(ConnectionError)\n |  SSLError(*args, **kwargs)\n |  \n |  An SSL error occurred.\n |  \n |  Method resolution order:\n |      SSLError\n |      ConnectionError\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nStreamConsumedError\nclass StreamConsumedError(RequestException, builtins.TypeError)\n |  StreamConsumedError(*args, **kwargs)\n |  \n |  The content for this response was already consumed.\n |  \n |  Method resolution order:\n |      StreamConsumedError\n |      RequestException\n |      builtins.OSError\n |      builtins.TypeError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nTimeout\nclass Timeout(RequestException)\n |  Timeout(*args, **kwargs)\n |  \n |  The request timed out.\n |  \n |  Catching this error will catch both\n |  :exc:`~requests.exceptions.ConnectTimeout` and\n |  :exc:`~requests.exceptions.ReadTimeout` errors.\n |  \n |  Method resolution order:\n |      Timeout\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nTooManyRedirects\nclass TooManyRedirects(RequestException)\n |  TooManyRedirects(*args, **kwargs)\n |  \n |  Too many redirects.\n |  \n |  Method resolution order:\n |      TooManyRedirects\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nURLRequired\nclass URLRequired(RequestException)\n |  URLRequired(*args, **kwargs)\n |  \n |  A valid URL is required to make a request.\n |  \n |  Method resolution order:\n |      URLRequired\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args\n\n\n\nUnrewindableBodyError\nclass UnrewindableBodyError(RequestException)\n |  UnrewindableBodyError(*args, **kwargs)\n |  \n |  Requests encountered an error when trying to rewind a body.\n |  \n |  Method resolution order:\n |      UnrewindableBodyError\n |      RequestException\n |      builtins.OSError\n |      builtins.Exception\n |      builtins.BaseException\n |      builtins.object\n |  \n |  Methods inherited from RequestException:\n |  \n |  \n\nRequestException.__init__\n |  \n |  __init__(self, *args, **kwargs)\n |      Initialize RequestException with `request` and `response` objects.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestException:\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__reduce__\n |  \n |  __reduce__(...)\n |      Helper for pickle.\n |  \n |  \n\n\nOSError.__str__\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods inherited from builtins.OSError:\n |  \n |  \n\n\nOSError.__new__\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.OSError:\n |  \n |  characters_written\n |  \n |  errno\n |      POSIX exception code\n |  \n |  filename\n |      exception filename\n |  \n |  filename2\n |      second exception filename\n |  \n |  strerror\n |      exception strerror\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from builtins.BaseException:\n |  \n |  \n\n\nBaseException.__delattr__\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  \n\n\nBaseException.__getattribute__\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  \n\n\nBaseException.__repr__\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  \n\n\nBaseException.__setattr__\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  \n\n\nBaseException.__setstate__\n |  \n |  __setstate__(...)\n |  \n |  \n\n\nBaseException.with_traceback\n |  \n |  with_traceback(...)\n |      Exception.with_traceback(tb) --\n |      set self.__traceback__ to tb and return self.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from builtins.BaseException:\n |  \n |  __cause__\n |      exception cause\n |  \n |  __context__\n |      exception context\n |  \n |  __dict__\n |  \n |  __suppress_context__\n |  \n |  __traceback__\n |  \n |  args"
  },
  {
    "objectID": "examples/requests/utils.html",
    "href": "examples/requests/utils.html",
    "title": "utils",
    "section": "",
    "text": "requests.utils\n~~~~~~~~~~~~~~\n\nThis module provides utility functions that are used within Requests\nthat are also useful for external consumption."
  },
  {
    "objectID": "examples/requests/utils.html#functions",
    "href": "examples/requests/utils.html#functions",
    "title": "utils",
    "section": "Functions",
    "text": "Functions\n\nadd_dict_to_cookiejar\nadd_dict_to_cookiejar(cj, cookie_dict)\n    Returns a CookieJar from a key/value dictionary.\n    \n    :param cj: CookieJar to insert cookies into.\n    :param cookie_dict: Dict of key/values to insert into CookieJar.\n    :rtype: CookieJar\n\n\naddress_in_network\naddress_in_network(ip, net)\n    This function allows you to check if an IP belongs to a network subnet\n    \n    Example: returns True if ip = 192.168.1.1 and net = 192.168.1.0/24\n             returns False if ip = 192.168.1.1 and net = 192.168.100.0/24\n    \n    :rtype: bool\n\n\natomic_open\natomic_open(filename)\n    Write a file to the disk in an atomic fashion\n\n\ncheck_header_validity\ncheck_header_validity(header)\n    Verifies that header parts don't contain leading whitespace\n    reserved characters, or return characters.\n    \n    :param header: tuple, in the format (name, value).\n\n\ndefault_headers\ndefault_headers()\n    :rtype: requests.structures.CaseInsensitiveDict\n\n\ndefault_user_agent\ndefault_user_agent(name='python-requests')\n    Return a string representing the default user agent.\n    \n    :rtype: str\n\n\ndict_from_cookiejar\ndict_from_cookiejar(cj)\n    Returns a key/value dictionary from a CookieJar.\n    \n    :param cj: CookieJar object to extract cookies from.\n    :rtype: dict\n\n\ndict_to_sequence\ndict_to_sequence(d)\n    Returns an internal sequence dictionary update.\n\n\ndotted_netmask\ndotted_netmask(mask)\n    Converts mask from /xx format to xxx.xxx.xxx.xxx\n    \n    Example: if mask is 24 function returns 255.255.255.0\n    \n    :rtype: str\n\n\nextract_zipped_paths\nextract_zipped_paths(path)\n    Replace nonexistent paths that look like they refer to a member of a zip\n    archive with the location of an extracted copy of the target, or else\n    just return the provided path unchanged.\n\n\nfrom_key_val_list\nfrom_key_val_list(value)\n    Take an object and test to see if it can be represented as a\n    dictionary. Unless it can not be represented as such, return an\n    OrderedDict, e.g.,\n    \n    ::\n    \n        >>> from_key_val_list([('key', 'val')])\n        OrderedDict([('key', 'val')])\n        >>> from_key_val_list('string')\n        Traceback (most recent call last):\n        ...\n        ValueError: cannot encode objects that are not 2-tuples\n        >>> from_key_val_list({'key': 'val'})\n        OrderedDict([('key', 'val')])\n    \n    :rtype: OrderedDict\n\n\nget_auth_from_url\nget_auth_from_url(url)\n    Given a url with authentication components, extract them into a tuple of\n    username,password.\n    \n    :rtype: (str,str)\n\n\nget_encoding_from_headers\nget_encoding_from_headers(headers)\n    Returns encodings from given HTTP Header Dict.\n    \n    :param headers: dictionary to extract encoding from.\n    :rtype: str\n\n\nget_encodings_from_content\nget_encodings_from_content(content)\n    Returns encodings from given content string.\n    \n    :param content: bytestring to extract encodings from.\n\n\nget_environ_proxies\nget_environ_proxies(url, no_proxy=None)\n    Return a dict of environment proxies.\n    \n    :rtype: dict\n\n\nget_netrc_auth\nget_netrc_auth(url, raise_errors=False)\n    Returns the Requests tuple auth for a given url from netrc.\n\n\nget_unicode_from_response\nget_unicode_from_response(r)\n    Returns the requested content back in unicode.\n    \n    :param r: Response object to get unicode content from.\n    \n    Tried:\n    \n    1. charset from content-type\n    2. fall back and replace all unicode characters\n    \n    :rtype: str\n\n\nguess_filename\nguess_filename(obj)\n    Tries to guess the filename of the given object.\n\n\nguess_json_utf\nguess_json_utf(data)\n    :rtype: str\n\n\nis_ipv4_address\nis_ipv4_address(string_ip)\n    :rtype: bool\n\n\nis_valid_cidr\nis_valid_cidr(string_network)\n    Very simple check of the cidr format in no_proxy variable.\n    \n    :rtype: bool\n\n\niter_slices\niter_slices(string, slice_length)\n    Iterate over slices of a string.\n\n\nparse_dict_header\nparse_dict_header(value)\n    Parse lists of key, value pairs as described by RFC 2068 Section 2 and\n    convert them into a python dict:\n    \n    >>> d = parse_dict_header('foo=\"is a fish\", bar=\"as well\"')\n    >>> type(d) is dict\n    True\n    >>> sorted(d.items())\n    [('bar', 'as well'), ('foo', 'is a fish')]\n    \n    If there is no value for a key it will be `None`:\n    \n    >>> parse_dict_header('key_without_value')\n    {'key_without_value': None}\n    \n    To create a header from the :class:`dict` again, use the\n    :func:`dump_header` function.\n    \n    :param value: a string with a dict header.\n    :return: :class:`dict`\n    :rtype: dict\n\n\nparse_header_links\nparse_header_links(value)\n    Return a list of parsed link headers proxies.\n    \n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n    \n    :rtype: list\n\n\nparse_list_header\nparse_list_header(value)\n    Parse lists as described by RFC 2068 Section 2.\n    \n    In particular, parse comma-separated lists where the elements of\n    the list may include quoted-strings.  A quoted-string could\n    contain a comma.  A non-quoted string could have quotes in the\n    middle.  Quotes are removed automatically after parsing.\n    \n    It basically works like :func:`parse_set_header` just that items\n    may appear multiple times and case sensitivity is preserved.\n    \n    The return value is a standard :class:`list`:\n    \n    >>> parse_list_header('token, \"quoted value\"')\n    ['token', 'quoted value']\n    \n    To create a header from the :class:`list` again, use the\n    :func:`dump_header` function.\n    \n    :param value: a string with a list header.\n    :return: :class:`list`\n    :rtype: list\n\n\nprepend_scheme_if_needed\nprepend_scheme_if_needed(url, new_scheme)\n    Given a URL that may or may not have a scheme, prepend the given scheme.\n    Does not replace a present scheme with the one provided as an argument.\n    \n    :rtype: str\n\n\nrequote_uri\nrequote_uri(uri)\n    Re-quote the given URI.\n    \n    This function passes the given URI through an unquote/quote cycle to\n    ensure that it is fully and consistently quoted.\n    \n    :rtype: str\n\n\nresolve_proxies\nresolve_proxies(request, proxies, trust_env=True)\n    This method takes proxy information from a request and configuration\n    input to resolve a mapping of target proxies. This will consider settings\n    such a NO_PROXY to strip proxy configurations.\n    \n    :param request: Request or PreparedRequest\n    :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs\n    :param trust_env: Boolean declaring whether to trust environment configs\n    \n    :rtype: dict\n\n\nrewind_body\nrewind_body(prepared_request)\n    Move file pointer back to its recorded starting position\n    so it can be read again on redirect.\n\n\nselect_proxy\nselect_proxy(url, proxies)\n    Select a proxy for the url, if applicable.\n    \n    :param url: The url being for the request\n    :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs\n\n\nset_environ\nset_environ(env_name, value)\n    Set the environment variable 'env_name' to 'value'\n    \n    Save previous value, yield, and then restore the previous value stored in\n    the environment variable 'env_name'.\n    \n    If 'value' is None, do nothing\n\n\nshould_bypass_proxies\nshould_bypass_proxies(url, no_proxy)\n    Returns whether we should bypass proxies or not.\n    \n    :rtype: bool\n\n\nstream_decode_response_unicode\nstream_decode_response_unicode(iterator, r)\n    Stream decodes an iterator.\n\n\nsuper_len\nsuper_len(o)\n\n\nto_key_val_list\nto_key_val_list(value)\n    Take an object and test to see if it can be represented as a\n    dictionary. If it can be, return a list of tuples, e.g.,\n    \n    ::\n    \n        >>> to_key_val_list([('key', 'val')])\n        [('key', 'val')]\n        >>> to_key_val_list({'key': 'val'})\n        [('key', 'val')]\n        >>> to_key_val_list('string')\n        Traceback (most recent call last):\n        ...\n        ValueError: cannot encode objects that are not 2-tuples\n    \n    :rtype: list\n\n\nunquote_header_value\nunquote_header_value(value, is_filename=False)\n    Unquotes a header value.  (Reversal of :func:`quote_header_value`).\n    This does not use the real unquoting but what browsers are actually\n    using for quoting.\n    \n    :param value: the header value to unquote.\n    :rtype: str\n\n\nunquote_unreserved\nunquote_unreserved(uri)\n    Un-escape any percent-escape sequences in a URI that are unreserved\n    characters. This leaves all reserved, illegal and non-ASCII bytes encoded.\n    \n    :rtype: str\n\n\nurldefragauth\nurldefragauth(url)\n    Given a url remove the fragment and the authentication part.\n    \n    :rtype: str"
  },
  {
    "objectID": "examples/requests/hooks.html",
    "href": "examples/requests/hooks.html",
    "title": "hooks",
    "section": "",
    "text": "requests.hooks\n~~~~~~~~~~~~~~\n\nThis module provides the capabilities for the Requests hooks system.\n\nAvailable hooks:\n\n``response``:\n    The response generated from a Request."
  },
  {
    "objectID": "examples/requests/hooks.html#functions",
    "href": "examples/requests/hooks.html#functions",
    "title": "hooks",
    "section": "Functions",
    "text": "Functions\n\ndefault_hooks\ndefault_hooks()\n\n\ndispatch_hook\ndispatch_hook(key, hooks, hook_data, **kwargs)\n    Dispatches a hook dictionary on a given piece of data."
  },
  {
    "objectID": "examples/requests/sessions.html",
    "href": "examples/requests/sessions.html",
    "title": "sessions",
    "section": "",
    "text": "requests.sessions\n~~~~~~~~~~~~~~~~~\n\nThis module provides a Session object to manage and persist settings across\nrequests (cookies, auth, proxies)."
  },
  {
    "objectID": "examples/requests/sessions.html#classes",
    "href": "examples/requests/sessions.html#classes",
    "title": "sessions",
    "section": "Classes",
    "text": "Classes\nbuiltins.object\n    SessionRedirectMixin\n        Session\n\nSession\nclass Session(SessionRedirectMixin)\n |  A Requests session.\n |  \n |  Provides cookie persistence, connection-pooling, and configuration.\n |  \n |  Basic Usage::\n |  \n |    >>> import requests\n |    >>> s = requests.Session()\n |    >>> s.get('https://httpbin.org/get')\n |    <Response [200]>\n |  \n |  Or as a context manager::\n |  \n |    >>> with requests.Session() as s:\n |    ...     s.get('https://httpbin.org/get')\n |    <Response [200]>\n |  \n |  Method resolution order:\n |      Session\n |      SessionRedirectMixin\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nSession.__enter__\n |  \n |  __enter__(self)\n |  \n |  \n\n\nSession.__exit__\n |  \n |  __exit__(self, *args)\n |  \n |  \n\n\nSession.__getstate__\n |  \n |  __getstate__(self)\n |  \n |  \n\n\nSession.__init__\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nSession.__setstate__\n |  \n |  __setstate__(self, state)\n |  \n |  \n\n\nSession.close\n |  \n |  close(self)\n |      Closes all adapters and as such the session\n |  \n |  \n\n\nSession.delete\n |  \n |  delete(self, url, **kwargs)\n |      Sends a DELETE request. Returns :class:`Response` object.\n |      \n |      :param url: URL for the new :class:`Request` object.\n |      :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n |      :rtype: requests.Response\n |  \n |  \n\n\nSession.get\n |  \n |  get(self, url, **kwargs)\n |      Sends a GET request. Returns :class:`Response` object.\n |      \n |      :param url: URL for the new :class:`Request` object.\n |      :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n |      :rtype: requests.Response\n |  \n |  \n\n\nSession.get_adapter\n |  \n |  get_adapter(self, url)\n |      Returns the appropriate connection adapter for the given URL.\n |      \n |      :rtype: requests.adapters.BaseAdapter\n |  \n |  \n\n\nSession.head\n |  \n |  head(self, url, **kwargs)\n |      Sends a HEAD request. Returns :class:`Response` object.\n |      \n |      :param url: URL for the new :class:`Request` object.\n |      :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n |      :rtype: requests.Response\n |  \n |  \n\n\nSession.merge_environment_settings\n |  \n |  merge_environment_settings(self, url, proxies, stream, verify, cert)\n |      Check the environment and merge it with some settings.\n |      \n |      :rtype: dict\n |  \n |  \n\n\nSession.mount\n |  \n |  mount(self, prefix, adapter)\n |      Registers a connection adapter to a prefix.\n |      \n |      Adapters are sorted in descending order by prefix length.\n |  \n |  \n\n\nSession.options\n |  \n |  options(self, url, **kwargs)\n |      Sends a OPTIONS request. Returns :class:`Response` object.\n |      \n |      :param url: URL for the new :class:`Request` object.\n |      :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n |      :rtype: requests.Response\n |  \n |  \n\n\nSession.patch\n |  \n |  patch(self, url, data=None, **kwargs)\n |      Sends a PATCH request. Returns :class:`Response` object.\n |      \n |      :param url: URL for the new :class:`Request` object.\n |      :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n |          object to send in the body of the :class:`Request`.\n |      :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n |      :rtype: requests.Response\n |  \n |  \n\n\nSession.post\n |  \n |  post(self, url, data=None, json=None, **kwargs)\n |      Sends a POST request. Returns :class:`Response` object.\n |      \n |      :param url: URL for the new :class:`Request` object.\n |      :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n |          object to send in the body of the :class:`Request`.\n |      :param json: (optional) json to send in the body of the :class:`Request`.\n |      :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n |      :rtype: requests.Response\n |  \n |  \n\n\nSession.prepare_request\n |  \n |  prepare_request(self, request)\n |      Constructs a :class:`PreparedRequest <PreparedRequest>` for\n |      transmission and returns it. The :class:`PreparedRequest` has settings\n |      merged from the :class:`Request <Request>` instance and those of the\n |      :class:`Session`.\n |      \n |      :param request: :class:`Request` instance to prepare with this\n |          session's settings.\n |      :rtype: requests.PreparedRequest\n |  \n |  \n\n\nSession.put\n |  \n |  put(self, url, data=None, **kwargs)\n |      Sends a PUT request. Returns :class:`Response` object.\n |      \n |      :param url: URL for the new :class:`Request` object.\n |      :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n |          object to send in the body of the :class:`Request`.\n |      :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n |      :rtype: requests.Response\n |  \n |  \n\n\nSession.request\n |  \n |  request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None, json=None)\n |      Constructs a :class:`Request <Request>`, prepares it and sends it.\n |      Returns :class:`Response <Response>` object.\n |      \n |      :param method: method for the new :class:`Request` object.\n |      :param url: URL for the new :class:`Request` object.\n |      :param params: (optional) Dictionary or bytes to be sent in the query\n |          string for the :class:`Request`.\n |      :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n |          object to send in the body of the :class:`Request`.\n |      :param json: (optional) json to send in the body of the\n |          :class:`Request`.\n |      :param headers: (optional) Dictionary of HTTP Headers to send with the\n |          :class:`Request`.\n |      :param cookies: (optional) Dict or CookieJar object to send with the\n |          :class:`Request`.\n |      :param files: (optional) Dictionary of ``'filename': file-like-objects``\n |          for multipart encoding upload.\n |      :param auth: (optional) Auth tuple or callable to enable\n |          Basic/Digest/Custom HTTP Auth.\n |      :param timeout: (optional) How long to wait for the server to send\n |          data before giving up, as a float, or a :ref:`(connect timeout,\n |          read timeout) <timeouts>` tuple.\n |      :type timeout: float or tuple\n |      :param allow_redirects: (optional) Set to True by default.\n |      :type allow_redirects: bool\n |      :param proxies: (optional) Dictionary mapping protocol or protocol and\n |          hostname to the URL of the proxy.\n |      :param stream: (optional) whether to immediately download the response\n |          content. Defaults to ``False``.\n |      :param verify: (optional) Either a boolean, in which case it controls whether we verify\n |          the server's TLS certificate, or a string, in which case it must be a path\n |          to a CA bundle to use. Defaults to ``True``. When set to\n |          ``False``, requests will accept any TLS certificate presented by\n |          the server, and will ignore hostname mismatches and/or expired\n |          certificates, which will make your application vulnerable to\n |          man-in-the-middle (MitM) attacks. Setting verify to ``False``\n |          may be useful during local development or testing.\n |      :param cert: (optional) if String, path to ssl client cert file (.pem).\n |          If Tuple, ('cert', 'key') pair.\n |      :rtype: requests.Response\n |  \n |  \n\n\nSession.send\n |  \n |  send(self, request, **kwargs)\n |      Send a given PreparedRequest.\n |      \n |      :rtype: requests.Response\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __attrs__ = ['headers', 'cookies', 'auth', 'proxies', 'hooks', 'params...\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from SessionRedirectMixin:\n |  \n |  \n\n\nSessionRedirectMixin.get_redirect_target\n |  \n |  get_redirect_target(self, resp)\n |      Receives a Response. Returns a redirect URI or ``None``\n |  \n |  \n\n\nSessionRedirectMixin.rebuild_auth\n |  \n |  rebuild_auth(self, prepared_request, response)\n |      When being redirected we may want to strip authentication from the\n |      request to avoid leaking credentials. This method intelligently removes\n |      and reapplies authentication where possible to avoid credential loss.\n |  \n |  \n\n\nSessionRedirectMixin.rebuild_method\n |  \n |  rebuild_method(self, prepared_request, response)\n |      When being redirected we may want to change the method of the request\n |      based on certain specs or browser behavior.\n |  \n |  \n\n\nSessionRedirectMixin.rebuild_proxies\n |  \n |  rebuild_proxies(self, prepared_request, proxies)\n |      This method re-evaluates the proxy configuration by considering the\n |      environment variables. If we are redirected to a URL covered by\n |      NO_PROXY, we strip the proxy configuration. Otherwise, we set missing\n |      proxy keys for this URL (in case they were stripped by a previous\n |      redirect).\n |      \n |      This method also replaces the Proxy-Authorization header where\n |      necessary.\n |      \n |      :rtype: dict\n |  \n |  \n\n\nSessionRedirectMixin.resolve_redirects\n |  \n |  resolve_redirects(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs)\n |      Receives a Response. Returns a generator of Responses or Requests.\n |  \n |  \n\n\nSessionRedirectMixin.should_strip_auth\n |  \n |  should_strip_auth(self, old_url, new_url)\n |      Decide whether Authorization header should be removed when redirecting\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from SessionRedirectMixin:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nSessionRedirectMixin\nclass SessionRedirectMixin(builtins.object)\n |  Methods defined here:\n |  \n |  \n\nSessionRedirectMixin.get_redirect_target\n |  \n |  get_redirect_target(self, resp)\n |      Receives a Response. Returns a redirect URI or ``None``\n |  \n |  \n\n\nSessionRedirectMixin.rebuild_auth\n |  \n |  rebuild_auth(self, prepared_request, response)\n |      When being redirected we may want to strip authentication from the\n |      request to avoid leaking credentials. This method intelligently removes\n |      and reapplies authentication where possible to avoid credential loss.\n |  \n |  \n\n\nSessionRedirectMixin.rebuild_method\n |  \n |  rebuild_method(self, prepared_request, response)\n |      When being redirected we may want to change the method of the request\n |      based on certain specs or browser behavior.\n |  \n |  \n\n\nSessionRedirectMixin.rebuild_proxies\n |  \n |  rebuild_proxies(self, prepared_request, proxies)\n |      This method re-evaluates the proxy configuration by considering the\n |      environment variables. If we are redirected to a URL covered by\n |      NO_PROXY, we strip the proxy configuration. Otherwise, we set missing\n |      proxy keys for this URL (in case they were stripped by a previous\n |      redirect).\n |      \n |      This method also replaces the Proxy-Authorization header where\n |      necessary.\n |      \n |      :rtype: dict\n |  \n |  \n\n\nSessionRedirectMixin.resolve_redirects\n |  \n |  resolve_redirects(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs)\n |      Receives a Response. Returns a generator of Responses or Requests.\n |  \n |  \n\n\nSessionRedirectMixin.should_strip_auth\n |  \n |  should_strip_auth(self, old_url, new_url)\n |      Decide whether Authorization header should be removed when redirecting\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"
  },
  {
    "objectID": "examples/requests/sessions.html#functions",
    "href": "examples/requests/sessions.html#functions",
    "title": "sessions",
    "section": "Functions",
    "text": "Functions\n\nmerge_hooks\nmerge_hooks(request_hooks, session_hooks, dict_class=)\n    Properly merges both requests and session hooks.\n    \n    This is necessary because when request_hooks == {'response': []}, the\n    merge breaks Session hooks entirely.\n\n\nmerge_setting\nmerge_setting(request_setting, session_setting, dict_class=)\n    Determines appropriate setting for a given request, taking into account\n    the explicit setting on that request, and the setting in the session. If a\n    setting is a dictionary, they will be merged together using `dict_class`\n\n\npreferred_clock\npreferred_clock = time(...)\n    time() -> floating point number\n    \n    Return the current time in seconds since the Epoch.\n    Fractions of a second may be present if the system clock provides them.\n\n\nsession\nsession()\n    Returns a :class:`Session` for context-management.\n    \n    .. deprecated:: 1.0.0\n    \n        This method has been deprecated since version 1.0.0 and is only kept for\n        backwards compatibility. New code should use :class:`~requests.sessions.Session`\n        to create a session. This may be removed at a future date.\n    \n    :rtype: Session"
  },
  {
    "objectID": "examples/requests/adapters.html",
    "href": "examples/requests/adapters.html",
    "title": "adapters",
    "section": "",
    "text": "requests.adapters\n~~~~~~~~~~~~~~~~~\n\nThis module contains the transport adapters that Requests uses to define\nand maintain connections."
  },
  {
    "objectID": "examples/requests/adapters.html#classes",
    "href": "examples/requests/adapters.html#classes",
    "title": "adapters",
    "section": "Classes",
    "text": "Classes\nbuiltins.object\n    BaseAdapter\n        HTTPAdapter\n\nBaseAdapter\nclass BaseAdapter(builtins.object)\n |  The Base Transport Adapter\n |  \n |  Methods defined here:\n |  \n |  \n\nBaseAdapter.__init__\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nBaseAdapter.close\n |  \n |  close(self)\n |      Cleans up adapter specific items.\n |  \n |  \n\n\nBaseAdapter.send\n |  \n |  send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None)\n |      Sends PreparedRequest object. Returns Response object.\n |      \n |      :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n |      :param stream: (optional) Whether to stream the request content.\n |      :param timeout: (optional) How long to wait for the server to send\n |          data before giving up, as a float, or a :ref:`(connect timeout,\n |          read timeout) <timeouts>` tuple.\n |      :type timeout: float or tuple\n |      :param verify: (optional) Either a boolean, in which case it controls whether we verify\n |          the server's TLS certificate, or a string, in which case it must be a path\n |          to a CA bundle to use\n |      :param cert: (optional) Any user-provided SSL certificate to be trusted.\n |      :param proxies: (optional) The proxies dictionary to apply to the request.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nHTTPAdapter\nclass HTTPAdapter(BaseAdapter)\n |  HTTPAdapter(pool_connections=10, pool_maxsize=10, max_retries=0, pool_block=False)\n |  \n |  The built-in HTTP Adapter for urllib3.\n |  \n |  Provides a general-case interface for Requests sessions to contact HTTP and\n |  HTTPS urls by implementing the Transport Adapter interface. This class will\n |  usually be created by the :class:`Session <Session>` class under the\n |  covers.\n |  \n |  :param pool_connections: The number of urllib3 connection pools to cache.\n |  :param pool_maxsize: The maximum number of connections to save in the pool.\n |  :param max_retries: The maximum number of retries each connection\n |      should attempt. Note, this applies only to failed DNS lookups, socket\n |      connections and connection timeouts, never to requests where data has\n |      made it to the server. By default, Requests does not retry failed\n |      connections. If you need granular control over the conditions under\n |      which we retry a request, import urllib3's ``Retry`` class and pass\n |      that instead.\n |  :param pool_block: Whether the connection pool should block for connections.\n |  \n |  Usage::\n |  \n |    >>> import requests\n |    >>> s = requests.Session()\n |    >>> a = requests.adapters.HTTPAdapter(max_retries=3)\n |    >>> s.mount('http://', a)\n |  \n |  Method resolution order:\n |      HTTPAdapter\n |      BaseAdapter\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nHTTPAdapter.__getstate__\n |  \n |  __getstate__(self)\n |  \n |  \n\n\nHTTPAdapter.__init__\n |  \n |  __init__(self, pool_connections=10, pool_maxsize=10, max_retries=0, pool_block=False)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nHTTPAdapter.__setstate__\n |  \n |  __setstate__(self, state)\n |  \n |  \n\n\nHTTPAdapter.add_headers\n |  \n |  add_headers(self, request, **kwargs)\n |      Add any headers needed by the connection. As of v2.0 this does\n |      nothing by default, but is left for overriding by users that subclass\n |      the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n |      \n |      This should not be called from user code, and is only exposed for use\n |      when subclassing the\n |      :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n |      \n |      :param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n |      :param kwargs: The keyword arguments from the call to send().\n |  \n |  \n\n\nHTTPAdapter.build_response\n |  \n |  build_response(self, req, resp)\n |      Builds a :class:`Response <requests.Response>` object from a urllib3\n |      response. This should not be called from user code, and is only exposed\n |      for use when subclassing the\n |      :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`\n |      \n |      :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n |      :param resp: The urllib3 response object.\n |      :rtype: requests.Response\n |  \n |  \n\n\nHTTPAdapter.cert_verify\n |  \n |  cert_verify(self, conn, url, verify, cert)\n |      Verify a SSL certificate. This method should not be called from user\n |      code, and is only exposed for use when subclassing the\n |      :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n |      \n |      :param conn: The urllib3 connection object associated with the cert.\n |      :param url: The requested URL.\n |      :param verify: Either a boolean, in which case it controls whether we verify\n |          the server's TLS certificate, or a string, in which case it must be a path\n |          to a CA bundle to use\n |      :param cert: The SSL certificate to verify.\n |  \n |  \n\n\nHTTPAdapter.close\n |  \n |  close(self)\n |      Disposes of any internal state.\n |      \n |      Currently, this closes the PoolManager and any active ProxyManager,\n |      which closes any pooled connections.\n |  \n |  \n\n\nHTTPAdapter.get_connection\n |  \n |  get_connection(self, url, proxies=None)\n |      Returns a urllib3 connection for the given URL. This should not be\n |      called from user code, and is only exposed for use when subclassing the\n |      :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n |      \n |      :param url: The URL to connect to.\n |      :param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n |      :rtype: urllib3.ConnectionPool\n |  \n |  \n\n\nHTTPAdapter.init_poolmanager\n |  \n |  init_poolmanager(self, connections, maxsize, block=False, **pool_kwargs)\n |      Initializes a urllib3 PoolManager.\n |      \n |      This method should not be called from user code, and is only\n |      exposed for use when subclassing the\n |      :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n |      \n |      :param connections: The number of urllib3 connection pools to cache.\n |      :param maxsize: The maximum number of connections to save in the pool.\n |      :param block: Block when no free connections are available.\n |      :param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager.\n |  \n |  \n\n\nHTTPAdapter.proxy_headers\n |  \n |  proxy_headers(self, proxy)\n |      Returns a dictionary of the headers to add to any request sent\n |      through a proxy. This works with urllib3 magic to ensure that they are\n |      correctly sent to the proxy, rather than in a tunnelled request if\n |      CONNECT is being used.\n |      \n |      This should not be called from user code, and is only exposed for use\n |      when subclassing the\n |      :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n |      \n |      :param proxy: The url of the proxy being used for this request.\n |      :rtype: dict\n |  \n |  \n\n\nHTTPAdapter.proxy_manager_for\n |  \n |  proxy_manager_for(self, proxy, **proxy_kwargs)\n |      Return urllib3 ProxyManager for the given proxy.\n |      \n |      This method should not be called from user code, and is only\n |      exposed for use when subclassing the\n |      :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n |      \n |      :param proxy: The proxy to return a urllib3 ProxyManager for.\n |      :param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.\n |      :returns: ProxyManager\n |      :rtype: urllib3.ProxyManager\n |  \n |  \n\n\nHTTPAdapter.request_url\n |  \n |  request_url(self, request, proxies)\n |      Obtain the url to use when making the final request.\n |      \n |      If the message is being sent through a HTTP proxy, the full URL has to\n |      be used. Otherwise, we should only use the path portion of the URL.\n |      \n |      This should not be called from user code, and is only exposed for use\n |      when subclassing the\n |      :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n |      \n |      :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n |      :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.\n |      :rtype: str\n |  \n |  \n\n\nHTTPAdapter.send\n |  \n |  send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None)\n |      Sends PreparedRequest object. Returns Response object.\n |      \n |      :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n |      :param stream: (optional) Whether to stream the request content.\n |      :param timeout: (optional) How long to wait for the server to send\n |          data before giving up, as a float, or a :ref:`(connect timeout,\n |          read timeout) <timeouts>` tuple.\n |      :type timeout: float or tuple or urllib3 Timeout object\n |      :param verify: (optional) Either a boolean, in which case it controls whether\n |          we verify the server's TLS certificate, or a string, in which case it\n |          must be a path to a CA bundle to use\n |      :param cert: (optional) Any user-provided SSL certificate to be trusted.\n |      :param proxies: (optional) The proxies dictionary to apply to the request.\n |      :rtype: requests.Response\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __attrs__ = ['max_retries', 'config', '_pool_connections', '_pool_maxs...\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from BaseAdapter:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"
  },
  {
    "objectID": "examples/requests/status_codes.html",
    "href": "examples/requests/status_codes.html",
    "title": "status_codes",
    "section": "",
    "text": "The ``codes`` object defines a mapping from common names for HTTP statuses\nto their numerical codes, accessible either as attributes or as dictionary\nitems.\n\nExample::\n\n    >>> import requests\n    >>> requests.codes['temporary_redirect']\n    307\n    >>> requests.codes.teapot\n    418\n    >>> requests.codes['\\o/']\n    200\n\nSome codes have multiple names, and both upper- and lower-case versions of\nthe names are allowed. For example, ``codes.ok``, ``codes.OK``, and\n``codes.okay`` all correspond to the HTTP status code 200.\n\n* 100: ``continue``\n* 101: ``switching_protocols``\n* 102: ``processing``\n* 103: ``checkpoint``\n* 122: ``uri_too_long``, ``request_uri_too_long``\n* 200: ``ok``, ``okay``, ``all_ok``, ``all_okay``, ``all_good``, ``\\o/``, ``✓``\n* 201: ``created``\n* 202: ``accepted``\n* 203: ``non_authoritative_info``, ``non_authoritative_information``\n* 204: ``no_content``\n* 205: ``reset_content``, ``reset``\n* 206: ``partial_content``, ``partial``\n* 207: ``multi_status``, ``multiple_status``, ``multi_stati``, ``multiple_stati``\n* 208: ``already_reported``\n* 226: ``im_used``\n* 300: ``multiple_choices``\n* 301: ``moved_permanently``, ``moved``, ``\\o-``\n* 302: ``found``\n* 303: ``see_other``, ``other``\n* 304: ``not_modified``\n* 305: ``use_proxy``\n* 306: ``switch_proxy``\n* 307: ``temporary_redirect``, ``temporary_moved``, ``temporary``\n* 308: ``permanent_redirect``, ``resume_incomplete``, ``resume``\n* 400: ``bad_request``, ``bad``\n* 401: ``unauthorized``\n* 402: ``payment_required``, ``payment``\n* 403: ``forbidden``\n* 404: ``not_found``, ``-o-``\n* 405: ``method_not_allowed``, ``not_allowed``\n* 406: ``not_acceptable``\n* 407: ``proxy_authentication_required``, ``proxy_auth``, ``proxy_authentication``\n* 408: ``request_timeout``, ``timeout``\n* 409: ``conflict``\n* 410: ``gone``\n* 411: ``length_required``\n* 412: ``precondition_failed``, ``precondition``\n* 413: ``request_entity_too_large``\n* 414: ``request_uri_too_large``\n* 415: ``unsupported_media_type``, ``unsupported_media``, ``media_type``\n* 416: ``requested_range_not_satisfiable``, ``requested_range``, ``range_not_satisfiable``\n* 417: ``expectation_failed``\n* 418: ``im_a_teapot``, ``teapot``, ``i_am_a_teapot``\n* 421: ``misdirected_request``\n* 422: ``unprocessable_entity``, ``unprocessable``\n* 423: ``locked``\n* 424: ``failed_dependency``, ``dependency``\n* 425: ``unordered_collection``, ``unordered``\n* 426: ``upgrade_required``, ``upgrade``\n* 428: ``precondition_required``, ``precondition``\n* 429: ``too_many_requests``, ``too_many``\n* 431: ``header_fields_too_large``, ``fields_too_large``\n* 444: ``no_response``, ``none``\n* 449: ``retry_with``, ``retry``\n* 450: ``blocked_by_windows_parental_controls``, ``parental_controls``\n* 451: ``unavailable_for_legal_reasons``, ``legal_reasons``\n* 499: ``client_closed_request``\n* 500: ``internal_server_error``, ``server_error``, ``/o\\``, ``✗``\n* 501: ``not_implemented``\n* 502: ``bad_gateway``\n* 503: ``service_unavailable``, ``unavailable``\n* 504: ``gateway_timeout``\n* 505: ``http_version_not_supported``, ``http_version``\n* 506: ``variant_also_negotiates``\n* 507: ``insufficient_storage``\n* 509: ``bandwidth_limit_exceeded``, ``bandwidth``\n* 510: ``not_extended``\n* 511: ``network_authentication_required``, ``network_auth``, ``network_authentication``"
  },
  {
    "objectID": "examples/requests/auth.html",
    "href": "examples/requests/auth.html",
    "title": "auth",
    "section": "",
    "text": "requests.auth\n~~~~~~~~~~~~~\n\nThis module contains the authentication handlers for Requests."
  },
  {
    "objectID": "examples/requests/auth.html#classes",
    "href": "examples/requests/auth.html#classes",
    "title": "auth",
    "section": "Classes",
    "text": "Classes\nbuiltins.object\n    AuthBase\n        HTTPBasicAuth\n            HTTPProxyAuth\n        HTTPDigestAuth\n\nAuthBase\nclass AuthBase(builtins.object)\n |  Base class that all auth implementations derive from\n |  \n |  Methods defined here:\n |  \n |  \n\nAuthBase.__call__\n |  \n |  __call__(self, r)\n |      Call self as a function.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nHTTPBasicAuth\nclass HTTPBasicAuth(AuthBase)\n |  HTTPBasicAuth(username, password)\n |  \n |  Attaches HTTP Basic Authentication to the given Request object.\n |  \n |  Method resolution order:\n |      HTTPBasicAuth\n |      AuthBase\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nHTTPBasicAuth.__call__\n |  \n |  __call__(self, r)\n |      Call self as a function.\n |  \n |  \n\n\nHTTPBasicAuth.__eq__\n |  \n |  __eq__(self, other)\n |      Return self==value.\n |  \n |  \n\n\nHTTPBasicAuth.__init__\n |  \n |  __init__(self, username, password)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nHTTPBasicAuth.__ne__\n |  \n |  __ne__(self, other)\n |      Return self!=value.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from AuthBase:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nHTTPDigestAuth\nclass HTTPDigestAuth(AuthBase)\n |  HTTPDigestAuth(username, password)\n |  \n |  Attaches HTTP Digest Authentication to the given Request object.\n |  \n |  Method resolution order:\n |      HTTPDigestAuth\n |      AuthBase\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nHTTPDigestAuth.__call__\n |  \n |  __call__(self, r)\n |      Call self as a function.\n |  \n |  \n\n\nHTTPDigestAuth.__eq__\n |  \n |  __eq__(self, other)\n |      Return self==value.\n |  \n |  \n\n\nHTTPDigestAuth.__init__\n |  \n |  __init__(self, username, password)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nHTTPDigestAuth.__ne__\n |  \n |  __ne__(self, other)\n |      Return self!=value.\n |  \n |  \n\n\nHTTPDigestAuth.build_digest_header\n |  \n |  build_digest_header(self, method, url)\n |      :rtype: str\n |  \n |  \n\n\nHTTPDigestAuth.handle_401\n |  \n |  handle_401(self, r, **kwargs)\n |      Takes the given response and tries digest-auth, if needed.\n |      \n |      :rtype: requests.Response\n |  \n |  \n\n\nHTTPDigestAuth.handle_redirect\n |  \n |  handle_redirect(self, r, **kwargs)\n |      Reset num_401_calls counter on redirects.\n |  \n |  \n\n\nHTTPDigestAuth.init_per_thread_state\n |  \n |  init_per_thread_state(self)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from AuthBase:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nHTTPProxyAuth\nclass HTTPProxyAuth(HTTPBasicAuth)\n |  HTTPProxyAuth(username, password)\n |  \n |  Attaches HTTP Proxy Authentication to a given Request object.\n |  \n |  Method resolution order:\n |      HTTPProxyAuth\n |      HTTPBasicAuth\n |      AuthBase\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nHTTPProxyAuth.__call__\n |  \n |  __call__(self, r)\n |      Call self as a function.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from HTTPBasicAuth:\n |  \n |  \n\n\nHTTPBasicAuth.__eq__\n |  \n |  __eq__(self, other)\n |      Return self==value.\n |  \n |  \n\n\nHTTPBasicAuth.__init__\n |  \n |  __init__(self, username, password)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nHTTPBasicAuth.__ne__\n |  \n |  __ne__(self, other)\n |      Return self!=value.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes inherited from HTTPBasicAuth:\n |  \n |  __hash__ = None\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from AuthBase:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nget_modules\n\n get_modules (lib:module)\n\nget a list of modules from a python package\nFor example, we can list all the modules in the requests library:\n\nimport requests\n\n\nmods = get_modules(requests)\nmods\n\n['requests.adapters',\n 'requests.api',\n 'requests.auth',\n 'requests.certs',\n 'requests.compat',\n 'requests.cookies',\n 'requests.exceptions',\n 'requests.help',\n 'requests.hooks',\n 'requests.models',\n 'requests.packages',\n 'requests.sessions',\n 'requests.status_codes',\n 'requests.structures',\n 'requests.utils']\n\n\n\nsource\n\n\nMarkdownDoc\n\n MarkdownDoc ()\n\nFormatter class for text documentation.\n\nsource\n\n\nrender_quarto_md\n\n render_quarto_md (thing, title=None, forceload=0)\n\nRender text documentation, given an object or a path to an object.\n\nsource\n\n\ngethelp\n\n gethelp (modname:str, title:str=None)\n\nGet the help string for a module in a markdown format.\nThis is an example of how the docs are rendered for requests.models:\n::: {.cell}\nprint(gethelp('requests.models'))\n::: {.cell-output .cell-output-stdout}\n---\ntitle: \"requests.models\"\ndescription: \"module requests.models in requests\"\n---\n\n## Description\n\n    requests.models\n    ~~~~~~~~~~~~~~~\n    \n    This module contains the primary objects that power Requests.\n\n## Classes\n\n    builtins.object\n        RequestEncodingMixin\n            PreparedRequest(RequestEncodingMixin, RequestHooksMixin)\n        RequestHooksMixin\n            Request\n        Response\n    \n    \n### PreparedRequest\n    \n\n\n```{=html}\n<blockquote><strong><code>class PreparedRequest(RequestEncodingMixin, RequestHooksMixin)</code></strong></blockquote>\n |  The fully mutable :class:`PreparedRequest <PreparedRequest>` object,\n |  containing the exact bytes that will be sent to the server.\n |  \n |  Instances are generated from a :class:`Request <Request>` object, and\n |  should not be instantiated manually; doing so may produce undesirable\n |  effects.\n |  \n |  Usage::\n |  \n |    >>> import requests\n |    >>> req = requests.Request('GET', 'https://httpbin.org/get')\n |    >>> r = req.prepare()\n |    >>> r\n |    <PreparedRequest [GET]>\n |  \n |    >>> s = requests.Session()\n |    >>> s.send(r)\n |    <Response [200]>\n |  \n |  Method resolution order:\n |      PreparedRequest\n |      RequestEncodingMixin\n |      RequestHooksMixin\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nPreparedRequest.__init__\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nPreparedRequest.__repr__\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\nPreparedRequest.copy\n |  \n |  copy(self)\n |  \n |  \n\n\nPreparedRequest.prepare\n |  \n |  prepare(self, method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)\n |      Prepares the entire request with the given parameters.\n |  \n |  \n\n\nPreparedRequest.prepare_auth\n |  \n |  prepare_auth(self, auth, url='')\n |      Prepares the given HTTP auth data.\n |  \n |  \n\n\nPreparedRequest.prepare_body\n |  \n |  prepare_body(self, data, files, json=None)\n |      Prepares the given HTTP body data.\n |  \n |  \n\n\nPreparedRequest.prepare_content_length\n |  \n |  prepare_content_length(self, body)\n |      Prepare Content-Length header based on request method and body\n |  \n |  \n\n\nPreparedRequest.prepare_cookies\n |  \n |  prepare_cookies(self, cookies)\n |      Prepares the given HTTP cookie data.\n |      \n |      This function eventually generates a ``Cookie`` header from the\n |      given cookies using cookielib. Due to cookielib's design, the header\n |      will not be regenerated if it already exists, meaning this function\n |      can only be called once for the life of the\n |      :class:`PreparedRequest <PreparedRequest>` object. Any subsequent calls\n |      to ``prepare_cookies`` will have no actual effect, unless the \"Cookie\"\n |      header is removed beforehand.\n |  \n |  \n\n\nPreparedRequest.prepare_headers\n |  \n |  prepare_headers(self, headers)\n |      Prepares the given HTTP headers.\n |  \n |  \n\n\nPreparedRequest.prepare_hooks\n |  \n |  prepare_hooks(self, hooks)\n |      Prepares the given hooks.\n |  \n |  \n\n\nPreparedRequest.prepare_method\n |  \n |  prepare_method(self, method)\n |      Prepares the given HTTP method.\n |  \n |  \n\n\nPreparedRequest.prepare_url\n |  \n |  prepare_url(self, url, params)\n |      Prepares the given HTTP URL.\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties inherited from RequestEncodingMixin:\n |  \n |  path_url\n |      Build the path URL to use.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestEncodingMixin:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from RequestHooksMixin:\n |  \n |  \n\n\nRequestHooksMixin.deregister_hook\n |  \n |  deregister_hook(self, event, hook)\n |      Deregister a previously registered hook.\n |      Returns True if the hook existed, False if not.\n |  \n |  \n\n\nRequestHooksMixin.register_hook\n |  \n |  register_hook(self, event, hook)\n |      Properly register a hook.\n\n\n\nRequest\nclass Request(RequestHooksMixin)\n |  Request(method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)\n |  \n |  A user-created :class:`Request <Request>` object.\n |  \n |  Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.\n |  \n |  :param method: HTTP method to use.\n |  :param url: URL to send.\n |  :param headers: dictionary of headers to send.\n |  :param files: dictionary of {filename: fileobject} files to multipart upload.\n |  :param data: the body to attach to the request. If a dictionary or\n |      list of tuples ``[(key, value)]`` is provided, form-encoding will\n |      take place.\n |  :param json: json for the body to attach to the request (if files or data is not specified).\n |  :param params: URL parameters to append to the URL. If a dictionary or\n |      list of tuples ``[(key, value)]`` is provided, form-encoding will\n |      take place.\n |  :param auth: Auth handler or (user, pass) tuple.\n |  :param cookies: dictionary or CookieJar of cookies to attach to this request.\n |  :param hooks: dictionary of callback hooks, for internal usage.\n |  \n |  Usage::\n |  \n |    >>> import requests\n |    >>> req = requests.Request('GET', 'https://httpbin.org/get')\n |    >>> req.prepare()\n |    <PreparedRequest [GET]>\n |  \n |  Method resolution order:\n |      Request\n |      RequestHooksMixin\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  \n\nRequest.__init__\n |  \n |  __init__(self, method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nRequest.__repr__\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\nRequest.prepare\n |  \n |  prepare(self)\n |      Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from RequestHooksMixin:\n |  \n |  \n\n\nRequestHooksMixin.deregister_hook\n |  \n |  deregister_hook(self, event, hook)\n |      Deregister a previously registered hook.\n |      Returns True if the hook existed, False if not.\n |  \n |  \n\n\nRequestHooksMixin.register_hook\n |  \n |  register_hook(self, event, hook)\n |      Properly register a hook.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from RequestHooksMixin:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nRequestEncodingMixin\nclass RequestEncodingMixin(builtins.object)\n |  Readonly properties defined here:\n |  \n |  path_url\n |      Build the path URL to use.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\nRequestHooksMixin\nclass RequestHooksMixin(builtins.object)\n |  Methods defined here:\n |  \n |  \n\nRequestHooksMixin.deregister_hook\n |  \n |  deregister_hook(self, event, hook)\n |      Deregister a previously registered hook.\n |      Returns True if the hook existed, False if not.\n |  \n |  \n\n\nRequestHooksMixin.register_hook\n |  \n |  register_hook(self, event, hook)\n |      Properly register a hook.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n\nResponse\nclass Response(builtins.object)\n |  The :class:`Response <Response>` object, which contains a\n |  server's response to an HTTP request.\n |  \n |  Methods defined here:\n |  \n |  \n\nResponse.__bool__\n |  \n |  __bool__(self)\n |      Returns True if :attr:`status_code` is less than 400.\n |      \n |      This attribute checks if the status code of the response is between\n |      400 and 600 to see if there was a client error or a server error. If\n |      the status code, is between 200 and 400, this will return True. This\n |      is **not** a check to see if the response code is ``200 OK``.\n |  \n |  \n\n\nResponse.__enter__\n |  \n |  __enter__(self)\n |  \n |  \n\n\nResponse.__exit__\n |  \n |  __exit__(self, *args)\n |  \n |  \n\n\nResponse.__getstate__\n |  \n |  __getstate__(self)\n |  \n |  \n\n\nResponse.__init__\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  \n\n\nResponse.__iter__\n |  \n |  __iter__(self)\n |      Allows you to use a response as an iterator.\n |  \n |  \n\n\nResponse.__nonzero__\n |  \n |  __nonzero__(self)\n |      Returns True if :attr:`status_code` is less than 400.\n |      \n |      This attribute checks if the status code of the response is between\n |      400 and 600 to see if there was a client error or a server error. If\n |      the status code, is between 200 and 400, this will return True. This\n |      is **not** a check to see if the response code is ``200 OK``.\n |  \n |  \n\n\nResponse.__repr__\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  \n\n\nResponse.__setstate__\n |  \n |  __setstate__(self, state)\n |  \n |  \n\n\nResponse.close\n |  \n |  close(self)\n |      Releases the connection back to the pool. Once this method has been\n |      called the underlying ``raw`` object must not be accessed again.\n |      \n |      *Note: Should not normally need to be called explicitly.*\n |  \n |  \n\n\nResponse.iter_content\n |  \n |  iter_content(self, chunk_size=1, decode_unicode=False)\n |      Iterates over the response data.  When stream=True is set on the\n |      request, this avoids reading the content at once into memory for\n |      large responses.  The chunk size is the number of bytes it should\n |      read into memory.  This is not necessarily the length of each item\n |      returned as decoding can take place.\n |      \n |      chunk_size must be of type int or None. A value of None will\n |      function differently depending on the value of `stream`.\n |      stream=True will read data as it arrives in whatever size the\n |      chunks are received. If stream=False, data is returned as\n |      a single chunk.\n |      \n |      If decode_unicode is True, content will be decoded using the best\n |      available encoding based on the response.\n |  \n |  \n\n\nResponse.iter_lines\n |  \n |  iter_lines(self, chunk_size=512, decode_unicode=False, delimiter=None)\n |      Iterates over the response data, one line at a time.  When\n |      stream=True is set on the request, this avoids reading the\n |      content at once into memory for large responses.\n |      \n |      .. note:: This method is not reentrant safe.\n |  \n |  \n\n\nResponse.json\n |  \n |  json(self, **kwargs)\n |      Returns the json-encoded content of a response, if any.\n |      \n |      :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n |      :raises requests.exceptions.JSONDecodeError: If the response body does not\n |          contain valid json.\n |  \n |  \n\n\nResponse.raise_for_status\n |  \n |  raise_for_status(self)\n |      Raises :class:`HTTPError`, if one occurred.\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties defined here:\n |  \n |  apparent_encoding\n |      The apparent encoding, provided by the charset_normalizer or chardet libraries.\n |  \n |  content\n |      Content of the response, in bytes.\n |  \n |  is_permanent_redirect\n |      True if this Response one of the permanent versions of redirect.\n |  \n |  is_redirect\n |      True if this Response is a well-formed HTTP redirect that could have\n |      been processed automatically (by :meth:`Session.resolve_redirects`).\n |  \n |  links\n |      Returns the parsed header links of the response, if any.\n |  \n |  next\n |      Returns a PreparedRequest for the next request in a redirect chain, if there is one.\n |  \n |  ok\n |      Returns True if :attr:`status_code` is less than 400, False if not.\n |      \n |      This attribute checks if the status code of the response is between\n |      400 and 600 to see if there was a client error or a server error. If\n |      the status code is between 200 and 400, this will return True. This\n |      is **not** a check to see if the response code is ``200 OK``.\n |  \n |  text\n |      Content of the response, in unicode.\n |      \n |      If Response.encoding is None, encoding will be guessed using\n |      ``charset_normalizer`` or ``chardet``.\n |      \n |      The encoding of the response content is determined based solely on HTTP\n |      headers, following RFC 2616 to the letter. If you can take advantage of\n |      non-HTTP knowledge to make a better guess at the encoding, you should\n |      set ``r.encoding`` appropriately before accessing this property.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __attrs__ = ['_content', 'status_code', 'headers', 'url', 'history', '...\n:::\n:::\n\n\nThis is another example with `requests.api`:\n\n::: {.cell}\n``` {.python .cell-code}\nprint(gethelp('requests.api'))\n\n---\ntitle: \"requests.api\"\ndescription: \"module requests.api in requests\"\n---\n\n## Description\n\n    requests.api\n    ~~~~~~~~~~~~\n    \n    This module implements the Requests API.\n    \n    :copyright: (c) 2012 by Kenneth Reitz.\n    :license: Apache2, see LICENSE for more details.\n\n## Functions\n\n    \n### `delete`\n    \n\n\n```{=html}\n<blockquote><strong><code>delete(url, **kwargs)</code></strong></blockquote>\n    Sends a DELETE request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\nget\nget(url, params=None, **kwargs)\n    Sends a GET request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param params: (optional) Dictionary, list of tuples or bytes to send\n        in the query string for the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\nhead\nhead(url, **kwargs)\n    Sends a HEAD request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes. If\n        `allow_redirects` is not provided, it will be set to `False` (as\n        opposed to the default :meth:`request` behavior).\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\noptions\noptions(url, **kwargs)\n    Sends an OPTIONS request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\npatch\npatch(url, data=None, **kwargs)\n    Sends a PATCH request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) json data to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\npost\npost(url, data=None, json=None, **kwargs)\n    Sends a POST request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) json data to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\nput\nput(url, data=None, **kwargs)\n    Sends a PUT request.\n    \n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) json data to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n\nrequest\nrequest(method, url, **kwargs)\n    Constructs and sends a :class:`Request <Request>`.\n    \n    :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n    :param url: URL for the new :class:`Request` object.\n    :param params: (optional) Dictionary, list of tuples or bytes to send\n        in the query string for the :class:`Request`.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n    :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n        ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n        or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n        defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n        to add for the file.\n    :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n    :param timeout: (optional) How many seconds to wait for the server to send data\n        before giving up, as a float, or a :ref:`(connect timeout, read\n        timeout) <timeouts>` tuple.\n    :type timeout: float or tuple\n    :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n    :type allow_redirects: bool\n    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n    :param verify: (optional) Either a boolean, in which case it controls whether we verify\n            the server's TLS certificate, or a string, in which case it must be a path\n            to a CA bundle to use. Defaults to ``True``.\n    :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n    :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    \n    Usage::\n    \n      >>> import requests\n      >>> req = requests.request('GET', 'https://httpbin.org/get')\n      >>> req\n      <Response [200]>\n:::\n:::\n\n\n---\n\n[source](https://github.com/hamelsmu/pydoc_quarto/blob/main/pydoc_quarto/core.py#L123){target=\"_blank\" style=\"float:right; font-size:smaller\"}\n\n### gen_md\n\n>      gen_md (lib:str, dest_dir:str)\n\nGenerate Quarto Markdown API docs\n\n|    | **Type** | **Details** |\n| -- | -------- | ----------- |\n| lib | str | the name or module of the python library, if module should be in the form `library.module` |\n| dest_dir | str | the destination directory the markdown files will be rendered into |\n| **Returns** | **None** |  |\n\n\n---\n\n[source](https://github.com/hamelsmu/pydoc_quarto/blob/main/pydoc_quarto/core.py#L116){target=\"_blank\" style=\"float:right; font-size:smaller\"}\n\n### write_md\n\n>      write_md (modname, dest_dir)\n\nWrite markdown to file\n\n\nYou can generate your docs in the desired directory like so:\n\n::: {.cell}\n``` {.python .cell-code}\n!rm -rf _test_dir/\ngen_md('requests', '_test_dir1/')\n\n\n\n!ls _test_dir1\n\nadapters.qmd     compat.qmd       hooks.qmd        status_codes.qmd\napi.qmd          cookies.qmd      models.qmd       structures.qmd\nauth.qmd         exceptions.qmd   packages.qmd     utils.qmd\ncerts.qmd        help.qmd         sessions.qmd\n\n\nYou can also export docs for a particular model. This might be helpful if pydoc_quarto cannot auto-detect your modules or they are in a deeply nested structure:\n\n!rm -rf _test_dir2/\ngen_md('requests.api', '_test_dir2/')\n\n\n!ls _test_dir2/\n\napi.qmd"
  }
]